{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#client","title":"Client","text":""},{"location":"#site","title":"Site","text":""},{"location":"#support","title":"Support","text":""},{"location":"#notifiarr","title":"Notifiarr","text":"<p>You just found one of the coolest tools on the Internet for a homelab enthusiast. We do notifications. We do them right. We've been doing then for years and we'll keep doing them for years to come. Notifiarr provides native custom integrations with dozens, maybe hundreds of applications and websites. That means these applications or websites can send data to Notifiarr, and we'll format a message according to your configuration then send it to your chat server.</p> <p>What sets us apart from direct integrations are the options we provide to format your messages. We also maintain and provide, for your conveince, a local agent you may run on any server or network you wish to monitor. The agent is fully configurable to collect network and system data so you can get health reports from your servers.</p> <p>Everything is configurable, even how much data we keep on our servers. You get to decide how long your transaction log files live for, or if your transactions even get logged at all.</p>"},{"location":"#support_1","title":"Support","text":"<p>Over on discord we have a big community, if you need assistance you can ask there by opening a support thread in the <code>#support</code> channel.</p> <p>Info</p> <p>For Patron access - Link your GitHub from the Profile Page on the Notifiarr Website</p>"},{"location":"#from-the-author","title":"From the author","text":"<p>I built Notifiarr in late 2019 for myself, and it was used by only myself until August of 2020 when I opened it up for others to use. My goal has always been to have a single location for common notification needs, so I am not jumping around 20 apps to do things. Captain joined the crew in December 2020, and the two of us run the servers and write the code for the client and website.</p>"},{"location":"#integrations","title":"Integrations","text":"<p>Note</p> <p>How to setup integrations</p>"},{"location":"#additional-features","title":"Additional Features","text":"<ul> <li>Fully configurable on what triggers to get notifications for. Each integration and many triggers in them can go to their own channels.</li> <li>Layout configuration for some notifications</li> <li>Content configuration for most notifications (color, content, etc)</li> <li>Media Requests Bot - Discord Bot for all 4 *Arr apps with:</li> <li>Media Requests</li> <li>User Permissions</li> <li>Approvals</li> <li>Sonarr Profiles</li> <li>Default Options</li> <li>Series Following</li> <li>Discover features</li> <li>Multi-Instance Support</li> <li>Minimal Access - No *Arr apikeys or anything of the sort is used or saved on the site.   All requests to the client are verified with your Notifiarr apikey and thrown out if they don't match up</li> <li>TRaSH Custom Format Sync *Patron Feature* -   Automated continuous add/sync for the custom formats TRaSH has made to use with Radarr</li> <li>Radarr Collections - A fully automated way to monitor all your Radarr collections with auto add new   items to your library as they are put into the collection on TMDb for any monitored collections, etc.</li> </ul>"},{"location":"pages/client/afterInstall/","title":"After Install","text":""},{"location":"pages/client/afterInstall/#notifiarr-client-after-install","title":"Notifiarr Client After Install","text":"<p>Do these things:</p> <ol> <li>Log into the Web UI to configure the client.</li> <li>Set a Hostname.</li> <li>Setup Plex Webhook.</li> <li>Install Snapshot Dependencies.</li> <li>Do all the things under Configure the client.</li> </ol>"},{"location":"pages/client/afterInstall/#web-ui","title":"Web UI","text":"<p>When you open the application on MacOS or Windows for the first time, you're prompted for your API key. Enter it. Must provide the \"All\" API key from your Profile page on notifiarr.com</p> <p>API Key</p> <p>The Notifiarr client uses the API key for bi-directional authorization between notifiarr.com and the Client. Keep it safe, and never share it.</p> <p>If you're on Linux or FreeBSD and installed with root, you should set the API key in the config file @ <code>/etc/notifiarr/notifiarr.conf</code> or <code>/usr/local/etc/notifiarr/notifiarr.conf</code>. If you installed on a seed box, set the API key in the config file in your home folder.</p> <p>Most users will use the API key as the password to login into the client's WebUI for the first time. You can set a dedicated password after logging in by clicking your username in the menu =&gt; Trust Profile. The default username is <code>admin</code>.</p> <p>The login URL will usually look like one of these. The default listen port is <code>5454</code>.</p> <ul> <li><code>http://localhost:5454</code></li> <li><code>http://notifiarr</code></li> <li><code>http://192.168.1.10:5454</code></li> <li><code>http://notifiarr.yourdomain.com</code> (if you setup a proxy)</li> </ul>"},{"location":"pages/client/afterInstall/#hostname","title":"Hostname","text":"<p>It is important that a static hostname is set so the site can keep track of multiple clients' settings. Some examples of how to do that:</p> <ul> <li>Docker Run users add <code>-h notifiarr</code> to your <code>docker run</code> command.</li> <li>Docker Compose users add <code>hostname: notifiarr</code> to your docker-compose.yaml file.</li> <li>Unraid users add <code>-h notifiarr</code> to <code>Extra Parameters</code>.</li> <li>Kubernetes hostnames are automatically determined based on the pod name.</li> </ul> <p>Note</p> <p>Failure to set a hostname will result in duplicate clients that need to be fixed once a hostname is set. Restart the client if you set or change the hostname.</p>"},{"location":"pages/client/afterInstall/#wsl2-users","title":"WSL2 users","text":"<p>Add this volume to your Notifiarr container. This is used for a unique UUID for each client instance.</p> <pre><code>volumes:\n  /etc/machine-id:/etc/machine-id\n</code></pre>"},{"location":"pages/client/afterInstall/#docker-users","title":"Docker Users","text":"<p>When a new docker image is deployed with an empty <code>/config</code> folder mounted, the app will do two things:</p> <ul> <li>If the API Key is not configured or invalid: Create a new Web UI <code>admin</code> password and print it into the log file and docker logs.</li> <li>Write a brand new config to <code>/config/notifiarr.conf</code> file with this password already saved.</li> <li>Find the password by running <code>docker logs Notifiarr</code>.</li> </ul> <p>Environment Variables - and the Unraid Template - override settings in the Config file.</p> <p>Unraid Users</p> <p>The Official Unraid Template for Notifiarr Client contains the API Key and Plex Token as pre-defined inputs. Normally, you can just go ahead and set those there. Alternatively, you can delete them from the template, and configure these values using the client's Web UI. For consistency, we recommend setting the API key and Plex token in the Unraid template.</p>"},{"location":"pages/client/afterInstall/#plex-webhook","title":"Plex Webhook","text":"<p>If you're using Plex, you can configure it to send Notifications. Unlike other integrations, Plex sends all its webhooks through the client. We do this because Plex can get overzealous with how much data it sends. The client can buffer these webhooks and filter duplicate notifications. It also checks the Plex API for sessions after it gets a webhook so it can provide richer notifications.</p> <p>Plex Token</p> <p>You must configure the Plex URL and Plex Token in the client Web UI Media Apps page for this to work.</p> <ul> <li>In Plex Media Server, add this URL to webhooks:</li> <li><code>http://localhost:5454/plex?token=plex-token-here</code></li> <li>Replace <code>localhost</code> with the IP or host of the notifiarr client application.</li> <li>Replace <code>plex-token-here</code> with your plex token.</li> <li>The Notifiarr application uses the Plex token to authorize incoming webhooks.</li> </ul>"},{"location":"pages/client/afterInstall/#snapshot-dependencies","title":"Snapshot Dependencies","text":"<p>This application can take a snapshot of your system at an interval and send you a notification. Snapshot means system health like cpu, memory, disk, raid, users, etc. Other data available in the snapshot: mysql health, <code>iotop</code>, <code>iostat</code> and <code>top</code> data. Some of this may only be available on Linux, but other platforms have similar abilities.</p> <p>If you monitor drive health you must have smartmontools (<code>smartctl</code>) installed. If you use smartctl on Linux, you must enable sudo. Add the sudoers entry below to <code>/etc/sudoers</code> and fix the path to <code>smartctl</code> if yours differs. If you monitor raid and use MegaCli (LSI card), add the appropriate sudoers entry for that too.</p> <p>To monitor application disk I/O you may install <code>iotop</code> and add the sudoers entry for it, shown below. This feature is enabled on the website.</p>"},{"location":"pages/client/afterInstall/#snapshot-sudoers","title":"Snapshot Sudoers","text":"<p>The following sudoers entries are used by various snapshot features. Add them if you use the respective feature. Restart the client after modifying sudoers entries. You can usually just put the following content into <code>/etc/sudoers</code> or <code>/etc/sudoers.d/00-notifiarr</code>. Make sure the 00-notifiarr file has the proper permissions needed <code>chmod 400 /etc/sudoers.d/00-notifiarr</code>.</p> <pre><code># Allows drive health monitoring on macOS, Linux/Docker and FreeBSD.\nnotifiarr ALL=(root) NOPASSWD:/usr/sbin/smartctl *\n\n# Allows disk utilization monitoring on Linux (non-Docker).\nnotifiarr ALL=(root) NOPASSWD:/usr/sbin/iotop *\n\n# Allows monitoring megaraid volumes on macOS, Linux/Docker and FreeBSD.\n# Rarely needed, and you'll know if you need this.\nnotifiarr ALL=(root) NOPASSWD:/usr/sbin/MegaCli64 -LDInfo -Lall -aALL\n</code></pre>"},{"location":"pages/client/afterInstall/#snapshot-packages","title":"Snapshot Packages","text":"<p>Install optional package(s) for snapshot data collection.</p>"},{"location":"pages/client/afterInstall/#windows","title":"Windows","text":"<p><code>smartmontools</code> - get it here https://sourceforge.net/projects/smartmontools/</p>"},{"location":"pages/client/afterInstall/#linux","title":"Linux","text":"<ul> <li>Debian/Ubuntu: <code>apt install smartmontools</code></li> <li>RedHat/CentOS: <code>yum install smartmontools</code></li> <li>Docker:    It's already in the container. Lucky you! Just run the container in <code>--privileged</code> mode.</li> <li>Synology: <code>opkg install smartmontools</code>, but first get Entware:</li> <li>Entware (synology):  https://github.com/Entware/Entware-ng/wiki/Install-on-Synology-NAS</li> <li>Entware Package List:  https://github.com/Entware/Entware-ng/wiki/Install-on-Synology-NAS</li> </ul>"},{"location":"pages/client/afterInstall/#configure-the-client","title":"Configure The Client","text":"<ul> <li>This is your after install check list.</li> </ul> <p>It does not cover everything, but it's the things you should get done first. You should definitely check out the stuff above though, a lot of it is important prerequisites.</p>"},{"location":"pages/client/afterInstall/#set-a-password","title":"Set a password","text":"<p>Set a password, or configure your auth proxy header on the Trust Profile page. Find this page by clicking your username in the Web UI menu. There's a screenshot of it to the left; click that to see a larger version.</p>"},{"location":"pages/client/afterInstall/#setup-log-files","title":"Setup Log Files","text":"<p>Head to the Settings =&gt; Configuration page and scroll down to Logging. If you don't see an Application Log File (and only a placeholder), then add one, and click Save Configuration.</p> <p></p> <p>Click the Folder icon to open a server-side file browser. You may optionally add Services, HTTP and Debug log files. These are not strictly necessary.</p> <p></p>"},{"location":"pages/client/afterInstall/#configure-apps","title":"Configure Apps","text":"<p>Test Button</p> <p>Click the Test button while adding instances. Make sure it works. The test button is the green double-check mark button next to the URL.</p> <ol> <li>On the Starr Apps pages, configure your apps.<ol> <li>We recommend adding them all. If you have all the starr apps, add them all.</li> <li>All you need is a URL and an API key.</li> <li>If you turn on database backup checks (on the website), a username and password is also required.</li> </ol> </li> <li>Add all your download apps too. And Plex, and add Tautulli if you use it.     Find these on their respective pages: Download Apps and Media Apps.</li> </ol>"},{"location":"pages/client/afterInstall/#health-checks","title":"Health Checks","text":"<p>Set the health check intervals on all your apps if you want notifications when an app goes down. See the Health Checks page for more information about that.</p>"},{"location":"pages/client/afterInstall/#log-files","title":"Log Files","text":"<p>Log file contents can be viewed in the UI under Insights =&gt; Log Files.</p> <p>These are the default location for application output (logs). Make sure you setup a log file if you can't find your logs.</p> <ul> <li>Linux: <code>/var/log/notifiarr/{app,http,services}.log</code></li> <li>Log paths for linux apt/deb installations are hardcoded</li> <li>FreeBSD: <code>/var/log/syslog</code> (w/ default syslog)</li> <li>macOS: <code>~/.notifiarr/Notifiarr.log</code></li> <li>Windows: <code>&lt;home folder&gt;/.notifiarr/Notifiarr.log</code></li> <li>Docker: <code>docker logs Notifiarr</code> (recommend setting a log file)</li> </ul>"},{"location":"pages/client/cloudflare/","title":"Cloudflare Proxy","text":""},{"location":"pages/client/cloudflare/#notifiarr-client-cloudflare-proxy","title":"Notifiarr Client Cloudflare Proxy","text":"<p>Danger</p> <p>None of this is required or necessary. We recommend NOT exposing your Notifiarr client to the Internet at all. In other words, don't do any of this. But you can if you want to access your local Notifiarr Client from the Internet.</p> <p>Some users use Cloudflare's \"Cloudflare Tunnel\" feature or additional Cloudflare security features to provide protected external access to their Notifiarr Client and other services. Specific configuration required for Cloudflare's various options are detailed below.</p>"},{"location":"pages/client/cloudflare/#cloudflare-tunnel","title":"Cloudflare Tunnel","text":"<p>Info</p> <p>This assumes that you already have a Cloudflare Tunnel set up on your system. If you want to get started with Cloudflare Tunnels follow this YouTube guide first: Cloudflare Tunnel: Creating Tunnels via GUI - Bypass CG-NAT by IBRACORP</p> <ol> <li>Login to your Cloudflare teams account at dash.teams.Cloudflare.com</li> <li>Click Tunnels and then configure next to the Cloudflare Tunnel you would like to use.     </li> <li>In your Tunnel section click on Public Hostname and add a new hostname by clicking on Add a public hostname.     </li> <li>Fill in the public hostname information on the next screen.     <ol> <li><code>Subdomain</code>: Notifiarr (or whatever else you want it to be)</li> <li><code>Domain</code>: choose one of your domains</li> <li><code>Service</code>: HTTP + Your Local IP Address for Notifiarr</li> </ol> </li> </ol> <p>Save your host name settings, that's it! Your client is now exposed to the Internet!</p>"},{"location":"pages/client/configuration/","title":"Notifiarr Client Configuration","text":""},{"location":"pages/client/configuration/#notifiarr-client-configuration","title":"Notifiarr Client Configuration","text":"<p>Deprecated Page</p> <p>This page is deprecated and the application configuration is now documented in the application Web UI. Log into the user interface in a web browser to read about all the configuration options.</p> <p>Use the Web UI to change the application configuration.</p>"},{"location":"pages/client/configuration/#conf-file","title":"<code>.conf</code> File","text":"<p>The config file used to be the preferred way to change the application's behavior, but now days the config file is compressed and direct edits are discouraged. The format has become too much to properly document. If you're configuring your client with automation such as puppet or ansible, then you should use environment variables for configuration. It's possible the config file format may change in the future, and the env variables are more likely to remain unaffected.</p>"},{"location":"pages/client/configuration/#configuration-options","title":"Configuration Options","text":"<p>Config File and Environment Variables are listed below. The up-to-date data now lives in the client's Web UI.</p> <ul> <li>Any variable not provided takes the default.</li> <li>Environmental Variables take precedent over config file settings.</li> <li>Must provide an \"All\" API key from notifiarr.com.</li> <li>The Notifiarr application uses the API key for bi-directional authorization.</li> <li>You may provide multiple Sonarr, Radarr or Readarr instances using <code>DN_SONARR_1_URL</code>,   <code>DN_SONARR_2_URL</code>, etc or by duplicating the starr block in the conf file.</li> <li>Note the header of <code>[[radarr]]</code>, <code>[[sonarr]]</code>, <code>[[readarr]]</code>, etc. is required.</li> </ul> <p>The following data is out of date, and may not be updated very often.</p>"},{"location":"pages/client/configuration/#global-configuration","title":"Global Configuration","text":"Config Name Variable Name Default / Note api_key <code>DN_API_KEY</code> Required / API Key from Notifiarr.com auto_update <code>DN_AUTO_UPDATE</code> <code>off</code> / Set to <code>daily</code> to turn on automatic updates (windows only) bind_addr <code>DN_BIND_ADDR</code> <code>0.0.0.0:5454</code> / The IP and port to listen on quiet <code>DN_QUIET</code> <code>false</code> / Turns off output. Set a log_file if this is true ui_password <code>DN_UI_PASSWORD</code> None by default. Set a username:password &amp; change the password to encrypt it urlbase <code>DN_URLBASE</code> default: <code>/</code> Change the web root with this setting upstreams <code>DN_UPSTREAMS_0</code> List of upstream networks that can set X-Forwarded-For ssl_key_file <code>DN_SSL_KEY_FILE</code> Providing SSL files turns on the SSL listener ssl_cert_file <code>DN_SSL_CERT_FILE</code> Providing SSL files turns on the SSL listener log_file <code>DN_LOG_FILE</code> None by default. Optionally provide a file path to save app logs http_log <code>DN_HTTP_LOG</code> None by default. Provide a file path to save HTTP request logs log_file_mb <code>DN_LOG_FILE_MB</code> <code>100</code> / Max size of log files in megabytes log_files <code>DN_LOG_FILES</code> <code>10</code> / Log files to keep after rotating. <code>0</code> disables rotation file_mode <code>DN_FILE_MODE</code> <code>\"0600\"</code> / Unix octal filemode for new log files timeout <code>DN_TIMEOUT</code> <code>60s</code> / Global API Timeouts (all apps default)"},{"location":"pages/client/configuration/#secret-settings","title":"Secret Settings","text":"<p>Recommend not messing with these unless instructed to do so.</p> Config Name Variable Name Default / Note extra_keys <code>DN_EXTRA_KEYS_0</code> <code>[]</code> (empty list) / Add keys to allow API requests from places besides notifiarr.com debug <code>DN_DEBUG</code> <code>false</code> / Adds payloads and other stuff to the log output; very verbose/noisy debug_log <code>DN_DEBUG_LOG</code> <code>\"\"</code> / Set a file system path to write debug logs to a dedicated file max_body <code>DN_MAX_BODY</code> Unlimited, <code>0</code> / Maximum debug-log body size (integer) for payloads to and from notifiarr.com <code>TMPDIR</code> <code>%TMP%</code> on Windows. Varies depending on system; must be writable if using Backup Corruption Check <p>Note: You may disable the GUI (menu item) on Windows and MacOS by setting the env variable <code>USEGUI</code> to <code>false</code>.</p>"},{"location":"pages/client/configuration/#snapshots","title":"Snapshots","text":"<p>Many of the snapshot settings are on the website, but a few are configured locally.</p>"},{"location":"pages/client/configuration/#nvidia","title":"Nvidia","text":"<p>The app can collect Nvidia GPU stats for snapshot notifications.</p> Config Name Variable Name Note snapshot.nvidia.disabled <code>DN_SNAPSHOT_NVIDIA_DISABLED</code> Set this to true to turn off this feature. <p>Busids and smi path are missing. ^ This is incomplete.</p>"},{"location":"pages/client/configuration/#mysql","title":"MySQL","text":"<p>You may add mysql credentials to your notifiarr configuration to snapshot mysql service health. This feature snapshots <code>SHOW PROCESSLIST</code> and <code>SHOW STATUS</code> data.</p> <p>Access to a database is not required. Example Grant:</p> <pre><code>GRANT PROCESS ON *.* to 'notifiarr'@'localhost'\n</code></pre> Config Name Variable Name Note snapshot.mysql.name <code>DN_SNAPSHOT_MYSQL_NAME</code> Setting a name enables service checks of MySQL snapshot.mysql.host <code>DN_SNAPSHOT_MYSQL_HOST</code> Something like: <code>localhost:3306</code> snapshot.mysql.user <code>DN_SNAPSHOT_MYSQL_USER</code> Username in the GRANT statement snapshot.mysql.pass <code>DN_SNAPSHOT_MYSQL_PASS</code> Password for the user in the GRANT statement"},{"location":"pages/client/configuration/#lidarr","title":"Lidarr","text":"Config Name Variable Name Note lidarr.name <code>DN_LIDARR_0_NAME</code> No Default. Setting a name enables service checks lidarr.url <code>DN_LIDARR_0_URL</code> No Default. Something like: <code>http://lidarr:8686</code> lidarr.api_key <code>DN_LIDARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr lidarr.username <code>DN_LIDARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled lidarr.password <code>DN_LIDARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled <ul> <li>BCC = Backup Corruption Check</li> </ul>"},{"location":"pages/client/configuration/#prowlarr","title":"Prowlarr","text":"Config Name Variable Name Note prowlarr.name <code>DN_PROWLARR_0_NAME</code> No Default. Setting a name enables service checks prowlarr.url <code>DN_PROWLARR_0_URL</code> No Default. Something like: <code>http://prowlarr:9696</code> prowlarr.api_key <code>DN_PROWLARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr prowlarr.username <code>DN_PROWLARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled prowlarr.password <code>DN_PROWLARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled"},{"location":"pages/client/configuration/#radarr","title":"Radarr","text":"Config Name Variable Name Note radarr.name <code>DN_RADARR_0_NAME</code> No Default. Setting a name enables service checks. radarr.url <code>DN_RADARR_0_URL</code> No Default. Something like: <code>http://localhost:7878</code> radarr.api_key <code>DN_RADARR_0_API_KEY</code> No Default. Provide URL and API key if you use Radarr radarr.username <code>DN_RADARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled radarr.password <code>DN_RADARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled"},{"location":"pages/client/configuration/#readarr","title":"Readarr","text":"Config Name Variable Name Note readarr.name <code>DN_READARR_0_NAME</code> No Default. Setting a name enables service checks readarr.url <code>DN_READARR_0_URL</code> No Default. Something like: <code>http://localhost:8787</code> readarr.api_key <code>DN_READARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr readarr.username <code>DN_READARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled readarr.password <code>DN_READARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled"},{"location":"pages/client/configuration/#sonarr","title":"Sonarr","text":"Config Name Variable Name Note sonarr.name <code>DN_SONARR_0_NAME</code> No Default. Setting a name enables service checks sonarr.url <code>DN_SONARR_0_URL</code> No Default. Something like: <code>http://localhost:8989</code> sonarr.api_key <code>DN_SONARR_0_API_KEY</code> No Default. Provide URL and API key if you use Sonarr sonarr.username <code>DN_SONARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled sonarr.password <code>DN_SONARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled"},{"location":"pages/client/configuration/#downloaders","title":"Downloaders","text":"<p>You can add supported downloaders so they show up on the dashboard integration. You may easily add service checks to these downloaders by setting a check <code>interval</code> to a positive value like <code>1m</code>.Any number of downloaders of any type may be configured.</p> <p>These all also have <code>interval</code> and <code>timeout</code> represented as a Go Duration. Examples: <code>1m</code>, <code>1m30s</code>, <code>3m15s</code>, <code>1h5m</code>. Valid units are<code>s</code>,<code>m</code>, and<code>h</code>. Combining units is additive.</p>"},{"location":"pages/client/configuration/#qbittorrent","title":"QbitTorrent","text":"Config Name Variable Name Note qbit.name <code>DN_QBIT_0_NAME</code> Defaults to the URL if left unset. qbit.url <code>DN_QBIT_0_URL</code> No Default. Something like: <code>http://localhost:8080</code> qbit.user <code>DN_QBIT_0_USER</code> No Default. Provide URL, user and pass if you use Qbit qbit.pass <code>DN_QBIT_0_PASS</code> No Default. Provide URL, user and pass if you use Qbit qbit.http_user <code>DN_QBIT_0_HTTP_USER</code> Provide this username if Qbit is behind basic auth (uncommon) qbit.http_pass <code>DN_QBIT_0_HTTP_PASS</code> Provide this password if Qbit is behind basic auth (uncommon)"},{"location":"pages/client/configuration/#rtorrent","title":"rTorrent","text":"Config Name Variable Name Note rtorrent.name <code>DN_RTORRENT_0_NAME</code> Defaults to the URL if left unset. rtorrent.url <code>DN_RTORRENT_0_URL</code> No Default. Something like: <code>http://localhost:5000</code> rtorrent.user <code>DN_RTORRENT_0_USER</code> No Default. Provide URL, user and pass if you use rTorrent rtorrent.pass <code>DN_RTORRENT_0_PASS</code> No Default. Provide URL, user and pass if you use rTorrent"},{"location":"pages/client/configuration/#sabnzbd","title":"SABnzbd","text":"Config Name Variable Name Note sabnzbd.name <code>DN_SABNZBD_0_NAME</code> Defaults to the URL if left unset. sabnzbd.url <code>DN_SABNZBD_0_URL</code> No Default. Something like: <code>http://localhost:8080/sabnzbd</code> sabnzbd.api_key <code>DN_SABNZBD_0_API_KEY</code> No Default. Provide URL and API key if you use SABnzbd"},{"location":"pages/client/configuration/#deluge","title":"Deluge","text":"Config Name Variable Name Note deluge.name <code>DN_DELUGE_0_NAME</code> Defaults to the URL if left unset. deluge.url <code>DN_DELUGE_0_URL</code> No Default. Something like: <code>http://localhost:8080</code> deluge.password <code>DN_DELUGE_0_PASSWORD</code> No Default. Provide URL and password key if you use Deluge deluge.http_user <code>DN_DELUGE_0_HTTP_USER</code> Provide this username if Deluge is behind basic auth (uncommon) deluge.http_pass <code>DN_DELUGE_0_HTTP_PASS</code> Provide this password if Deluge is behind basic auth (uncommon)"},{"location":"pages/client/configuration/#nzbget","title":"NZBGet","text":"Config Name Variable Name Note nzbget.name <code>DN_NZBGET_0_NAME</code> Defaults to the URL if left unset. nzbget.url <code>DN_NZBGET_0_URL</code> No Default. Something like: <code>http://localhost:6789</code> nzbget.user <code>DN_NZBGET_0_USER</code> No Default. Provide URL username and password if you use NZBGet nzbget.pass <code>DN_NZBGET_0_PASS</code> No Default. Provide URL username and password if you use NZBGet"},{"location":"pages/client/configuration/#plex","title":"Plex","text":"<p>This application can also send Plex sessions to Notifiarr so you can receive notifications when users interact with your server. This has three different features:</p> <ul> <li>Notify all sessions on a longer interval (30+ minutes).</li> <li>Notify on session nearing completion (percent complete).</li> <li>Notify on session change (Plex Webhook) ie. pause/resume.</li> <li>See Plex Webhook in the After Install page for more info.</li> </ul> Config Name Variable Name Note plex.url <code>DN_PLEX_URL</code> <code>http://localhost:32400</code> / local URL to your plex server plex.token <code>DN_PLEX_TOKEN</code> Required. Must provide Plex Token for this to work."},{"location":"pages/client/configuration/#tautulli","title":"Tautulli","text":"<p>Only 1 Tautulli instance may be configured per client. Providing Tautulli allows Notifiarr to use the \"Friendly Name\" for your Plex users and it allows you to easily enable a service check.</p> Config Name Variable Name Note tautulli.name <code>DN_TAUTULLI_NAME</code> Defaults to the URL if left unset. tautulli.url <code>DN_TAUTULLI_URL</code> No Default. Something like: <code>http://localhost:8181</code> tautulli.api_key <code>DN_TAUTULLI_API_KEY</code> No Default. Provide URL and API key if you want name maps from Tautulli"},{"location":"pages/client/configuration/#endpoint-url-relay","title":"Endpoint URL Relay","text":"<p>The application can poll (download) a URL on a schedule and relay it as a notification. This is incomplete.</p>"},{"location":"pages/client/configuration/#service-checks","title":"Service Checks","text":"<p>The Notifiarr client can also check URLs for health. If you set names on your Starr apps they will be automatically checked and reports sent to Notifiarr. If you provide a log file for service checks, those logs will no longer write to the app log nor to console stdout.</p> Config Name Variable Name Note services.log_file <code>DN_SERVICES_LOG_FILE</code> If a file path is provided, service check logs write there services.interval <code>DN_SERVICES_INTERVAL</code> <code>10m</code>, How often to send service states to Notifiarr; minimum: <code>5m</code> services.parallel <code>DN_SERVICES_PARALLEL</code> <code>1</code>, How many services can be checked at once; 1 is plenty <p>You can also create ad-hoc service checks for things like Bazarr.</p> Config Name Variable Name Note service.name <code>DN_SERVICE_0_NAME</code> Services must have a unique name service.type <code>DN_SERVICE_0_TYPE</code> Type must be one of <code>http</code>, <code>tcp</code>, <code>process</code> service.check <code>DN_SERVICE_0_CHECK</code> The <code>URL</code>, or <code>host/ip:port</code> to check service.expect <code>DN_SERVICE_0_EXPECT</code> <code>200</code>, For HTTP, the return code to expect service.timeout <code>DN_SERVICE_0_TIMEOUT</code> <code>15s</code>, How long to wait for service response service.interval <code>DN_SERVICE_0_INTERVAL</code> <code>5m</code>, How often to check the service <p>Web UI</p> <p>It's a lot easier to configure service checks in the Web UI.</p> <p>When <code>type</code> is set to <code>process</code>, the <code>expect</code> parameter becomes a special variable. You may set it to <code>restart</code> to send a notification when the process restarts. You may set it to <code>running</code> to alert if the process is found running (negative check). You may set it to <code>count:min:max</code>. ie <code>count:1:2</code> means alert if process count is below 1 or above 2. You may combine these with commas. ie <code>restart,count:1:3</code>.</p> <p>By default <code>check</code> is the value to find in the process list. It uses a simple string match. Unless you wrap the value in slashes, then it becomes a regex. ie. use this <code>expect = \"/^/usr/bin/smtpd$/\"</code> to match an exact string.</p> <p>Notifiarr is a CLI app too</p> <p>Run <code>notifiarr --ps</code> to view the process list from Notifiarr's point of view.</p>"},{"location":"pages/client/gui/","title":"Web UI","text":""},{"location":"pages/client/gui/#notifiarr-client-web-ui","title":"Notifiarr Client Web UI","text":"<p>The client's Web UI is the preferred and recommended method of modifying the Notifiarr configuration. The Web UI provides an easy and intuitive interface to configure Integrations for use with Notifiarr.</p>"},{"location":"pages/client/gui/#forgotten-passwords","title":"Forgotten Passwords","text":"<p>Head back to After Install or Troubleshooting for help getting logged in.</p> <p></p>"},{"location":"pages/client/gui/#landing-page","title":"Landing Page","text":"<p>Once logged in you will be taken to the Landing page. From here you are free to navigate the Client and have the power to update settings, configure and trigger integrations and much, much more.</p> <p></p> <p>The Web UI is full of documentation. It's even available in multiple languages. If you have suggestions where the UI can be improved, or documentation added, please reach out on Discord, or open a new Issue on GitHub. We encourage and appreciate your feedback!</p> <p>Client Configuration</p> <p>Find the primary configuration documentation in the Web UI.</p> <p>Find more information in the legacy Configuration page. It's a legacy page, but the information in it is still accurate.</p>"},{"location":"pages/client/healthChecks/","title":"Health Checks","text":""},{"location":"pages/client/healthChecks/#notifiarr-client-health-checks","title":"Notifiarr Client Health Checks","text":"<p>This is one of the most powerful features we provide. And it's free. You can configure an unlimited number of service checks in the Notifiarr Client. These checks can check URLs for specific response codes, look for running processes, or check TCP ports.</p> <p>Enable Network Integration</p> <ul> <li>This client feature sends reports to the website using the Network Integration.</li> <li>Make sure you enable that Integration on the website and choose a chat channel for notifications.</li> </ul> <p>This page explains the logic the service check module uses.</p> <p></p>"},{"location":"pages/client/healthChecks/#automatic-instance-checks","title":"Automatic Instance Checks","text":"<p>The application will automatically add service checks for any instances you configure. An instance is just an application like Radarr or Transmission. When you add the instance, all you need to do is choose a Check Interval duration. That determines how often the client checks the instance's health.</p> <p>Assumptions</p> <p>Some of the automatic service checks may set the HTTP expect code to something other than 200 / OK. This is normal. There are few configurations for the automatic service checks, most settings are hard coded assumptions. The test buttons in the Web UI use different logic than the automatic service checks.</p> <p>The automatic service checks do not work in every environment. You should disable them, and create custom checks if they are not working for you.</p> <p></p>"},{"location":"pages/client/healthChecks/#custom-health-checks","title":"Custom Health Checks","text":"<p>Health checks currently supported are <code>HTTP</code>, <code>TCP port</code>, <code>ICMP</code>, and <code>UDP Ping</code>. Future versions may include the ability for subscribers to run commands and scripts.</p> <p>Configure custom checks in the Web UI on the Settings =&gt; Services page. The Web UI does a good job of documenting the service check configuration, so this section is light on words. Go check out the Web UI for information about how to configure a service check. The screenshot to the right does not do it justice.</p>"},{"location":"pages/client/healthChecks/#monitoring","title":"Monitoring","text":"<ul> <li>Find current statuses on the Insights =&gt; Monitoring page in the client Web UI.</li> <li>Configure a custom Service Status Page on the website in the Network Integration.</li> </ul> <p>Website Configuration</p> <p>Configure the notifications chat channel, which role gets pinged, and a few other notification settings in the Network Integration on the website.</p> <p>When a service changes state the new state is immediately reported to the website. By default the website will turn this state change into an immediate notification. The notification goes to the Network Integration channel that has been selected.</p>"},{"location":"pages/client/install/","title":"Install","text":""},{"location":"pages/client/install/#notifiarr-client-installation","title":"Notifiarr Client Installation","text":"<p>Click your OS in the table of contents and follow the provided directions to get the client installed. Review the After Install page for next steps.</p>"},{"location":"pages/client/install/#linux","title":"Linux","text":"<ul> <li>Linux repository hosting provided by </li> </ul> <p>This works on any system with <code>apt</code> or <code>yum</code>. If your system does not use APT or YUM, download a binary from the Releases page and install it.</p> <p>Important</p> <p>When you install from a deb or apt package, the logs folder <code>/var/log/notifiarr</code> and config folder <code>/etc/notifiarr</code> are automatically created. The <code>notifiarr</code> user and group are also created; the application runs as <code>notifiarr:notifiarr</code>. If you remove the package, these things will not be fully removed. If you do not install from a package, they will not be created automatically either.</p> <ol> <li> <p>Install the Go Lift package repo and Notifiarr with this command:</p> <pre><code>curl -s https://golift.io/repo.sh | sudo bash -s - notifiarr\n</code></pre> </li> <li> <p>After install, edit the config, set your apikey, and restart the service:</p> <pre><code>sudo nano /etc/notifiarr/notifiarr.conf\nsudo systemctl restart notifiarr\n</code></pre> </li> </ol>"},{"location":"pages/client/install/#arch-linux","title":"Arch Linux","text":"<ul> <li>This one is special; hope you know what you're doing.</li> <li>Build a package with <code>makepkg</code> using the <code>aur</code> source</li> </ul>"},{"location":"pages/client/install/#freebsd","title":"FreeBSD","text":"<ol> <li>Download a <code>txz</code> package from the Releases page.</li> <li>Install it, edit config, start it.</li> <li>On FreeBSD, Notifiarr runs as <code>user:group</code> of <code>notifiarr:notifiarr</code>.</li> </ol> <p>Example of the above in shell form:</p> <pre><code>wget -qO- https://raw.githubusercontent.com/Notifiarr/notifiarr/main/userscripts/install.sh | sudo bash\nvi /usr/local/etc/notifiarr/notifiarr.conf\nservice notifiarr start\n</code></pre>"},{"location":"pages/client/install/#truenas-scale","title":"TrueNAS Scale","text":"<p>TrueNAS</p> <p>If you figure out how to install Notifiarr on TrueNAS, please update these instructions. Notifiarr support and developers have very little experience with TrueNAS.</p>"},{"location":"pages/client/install/#macos","title":"macOS","text":"<ol> <li>Download the signed <code>dmg</code> file from the Releases page.</li> <li>Mount it and copy Notifiarr.app to /Applications then double-click it there.</li> <li>When you open it for the first time it will create a config file and log file:<ol> <li><code>~/.notifiarr/notifiarr.conf</code></li> <li><code>~/.notifiarr/Notifiarr.log</code></li> </ol> </li> <li>Use the menu bar icon to access the WebUI.</li> <li>Head on over to After Install.</li> </ol>"},{"location":"pages/client/install/#windows","title":"Windows","text":"<p>Info</p> <p>Suggested location and structure based on experience with permissions.</p>"},{"location":"pages/client/install/#desired-outcome","title":"Desired Outcome","text":"<ul> <li><code>C:\\ProgramData\\notifiarr\\notifiarr.amd64.exe</code> - The Application.</li> <li><code>C:\\ProgramData\\notifiarr\\notifiarr.conf</code> - The config file. Just the add the API key.</li> <li><code>C:\\ProgramData\\notifiarr\\logs</code> - Folder for log files.</li> </ul>"},{"location":"pages/client/install/#create-the-folders","title":"Create the folders","text":"<ol> <li>Open C:\\ProgramData and create a folder <code>notifiarr</code></li> <li>Create a new folder named <code>logs</code>, so you now have <code>C:\\ProgramData\\notifiarr\\logs</code><ul> <li>When you add the log paths in the client UI (later steps), make sure you point them to a file such as:</li> <li><code>C:\\ProgramData\\notifiarr\\logs\\app.log</code></li> <li><code>C:\\ProgramData\\notifiarr\\logs\\debug.log</code></li> <li><code>C:\\ProgramData\\notifiarr\\logs\\http.log</code></li> </ul> </li> </ol>"},{"location":"pages/client/install/#new-install","title":"New Install","text":"<ol> <li>Download <code>notifiarr.amd64.exe.zip</code> from the Releases page</li> <li>Save it in <code>C:\\ProgramData\\notifiarr</code></li> <li>Open the folder that was created from extracting and copy the <code>.exe</code> + example <code>.conf</code> files up one directory so it is located at:<ul> <li><code>C:\\ProgramData\\notifiarr\\notifiarr.amd64.exe</code></li> <li><code>C:\\ProgramData\\notifiarr\\notifiarr.conf.example</code></li> </ul> </li> <li>You can now delete the <code>.zip</code> file that was downloaded and the folder that was extracted</li> <li>Rename <code>notifiarr.conf.example</code> to <code>notifiarr.conf</code></li> </ol>"},{"location":"pages/client/install/#fix-existing-install","title":"Fix Existing Install","text":"<ol> <li>Stop the client</li> <li>Copy the existing <code>.exe</code> to <code>C:\\ProgramData\\notifiarr\\notifiarr.amd64.exe</code></li> <li>Copy the existing conf file to <code>C:\\ProgramData\\notifiarr\\notifiarr.conf</code></li> <li>If the <code>C:\\users\\&lt;your home folder&gt;\\.notifiarr</code> folder exists, delete it</li> </ol>"},{"location":"pages/client/install/#autostart-password","title":"Autostart &amp; Password","text":"<ul> <li> <p>At this point, the structure should look like the Desired Outcome mentioned above.</p> </li> <li> <p>Right click on the <code>.exe</code> and create a shortcut</p> </li> <li>Windows logo key + R, type <code>shell:startup</code>, then select OK. This opens the Startup folder.</li> <li>Copy and paste the newly created shortcut from its current location to the opened Startup folder.</li> <li>Double click on the shortcut and the client is now running</li> <li>If this is the first time you have ran it:<ol> <li>Option A: Look at the notifiarr.log (or app.log) and you will see the password at the top of the file.</li> <li>Option B: Right click on the notifiarr icon and pick Logs -&gt; View and get the login credentials from there.</li> </ol> </li> </ul>"},{"location":"pages/client/install/#synology","title":"Synology","text":"<ol> <li>Run the below command while ssh'd in to the NAS.     It will run the Syno Install Script located on the Notifiarr Repository</li> </ol> <pre><code>curl -sSL https://raw.githubusercontent.com/Notifiarr/notifiarr/main/userscripts/install-synology.sh | sudo bash\n</code></pre>"},{"location":"pages/client/install/#docker","title":"Docker","text":"<p>This project builds automatically in Docker Cloud and creates ready-to-use multi-architecture images. The <code>latest</code> tag is always a tagged release in GitHub. It also builds in a GitHub Action and publishes to GHCR (ghcr.io).</p>"},{"location":"pages/client/install/#compose","title":"Compose","text":"<p>A sample docker compose file may be found in the Github repo here.</p>"},{"location":"pages/client/install/#docker-run","title":"<code>docker run</code>","text":"<ol> <li>Mount an empty <code>/config</code> folder and the application will automatically write the config file there.</li> <li>Pull the image from docker hub or ghcr and run it.</li> <li>You must enable <code>privileged</code> to use <code>smartctl</code> (<code>monitor_drives</code>) and/or <code>MegaCli</code> (<code>monitor_raid</code>).</li> <li>Map the <code>/var/run/utmp</code> volume if you want to count users.</li> <li>Mount any volumes you want to report storage space for.<ol> <li>Where you mount it sets the 'name'. e.g. <code>/mnt/nas/data:/synonas</code></li> </ol> </li> </ol> <p>Static Hostname</p> <p>Why <code>-h notifiarr</code> ? You MUST set a static hostname. Each client is identified by hostname.</p> <pre><code>docker pull golift/notifiarr\ndocker run --name Notifiarr -h notifiarr --restart unless-stopped \\\n    --privileged -p 5454:5454 -v /path/to/notifiarrconfig/:/config \\\n    -v /var/run/utmp:/var/run/utmp -v /etc/machine-id:/etc/machine-id golift/notifiarr\ndocker logs Notifiarr\n</code></pre>"},{"location":"pages/client/install/#docker-environment-variables","title":"Docker Environment Variables","text":"<p>You can find all the environment variables in the client's Web UI. You can run the app without a config file like this, but it's not recommended and only for advanced-needs.</p> <pre><code>docker pull golift/notifiarr\ndocker run --hostname $(hostname) -d --privileged \\\n  -v /var/run/utmp:/var/run/utmp \\\n  -e \"DN_API_KEY=abcdef-12345-bcfead-43312-bbbaaa-123\" \\\n  -e \"DN_SONARR_0_URL=http://localhost:8989\" \\\n  -e \"DN_SONARR_0_API_KEY=kjsdkasjdaksdj\" \\\n  golift/notifiarr\ndocker logs &lt;container id from docker run&gt;\n</code></pre>"},{"location":"pages/client/install/#home-assistant-os","title":"Home Assistant OS","text":"<p>Home Assistant OS Users</p> <p>This is community provided. The Notifiarr developers have very little experience with Home Assistant OS.</p> <p>Home Assistant Addon, the person to ask for help is <code>@ZanY</code> on the Notifiarr discord. If they are no longer a member, try their Github.</p>"},{"location":"pages/client/install/#proxmox","title":"Proxmox","text":"<p>Proxmox Users</p> <p>This is community provided. The Notifiarr developers have very little experience with Proxmox.</p> <ul> <li>Proxmox Helper script</li> </ul>"},{"location":"pages/client/install/#ultracc-seedbox","title":"UltraCC Seedbox","text":"<p>UltraCC Seedbox Users</p> <p>This is community provided. The Notifiarr developers have very little experience with UltraCC.</p>"},{"location":"pages/client/install/#install-client","title":"Install Client","text":"<p>The outcome of these steps is that you make a new folder named <code>notifiarr</code> in your home folder, and it contains the <code>notifiarr</code> binary and <code>notifiarr.conf</code> config file. We're also adding a user-level systemd service unit file to your home folder, enabling it (so it starts when the server boots).</p> <p>When you finish here, head on over to the After Install page for next steps.</p> <ol> <li>SSH into your Ultra Seedbox.</li> <li>In your home folder type <code>mkdir notifiarr</code></li> <li>Type <code>cd notifiarr</code></li> <li>On Github find the latest release asset labeled <code>notifiarr.amd64.linux.gz</code>,     right click on that and click copy link.</li> <li>Download it; Back on your terminal type <code>wget '&lt;paste link&gt;'</code></li> <li>Decompress it; Type <code>gzip -d notifiarr.amd64.linux.gz</code></li> <li>Rename it; Type <code>mv notifiarr.amd64.linux notifiarr</code></li> <li>Make it executable; Type <code>chmod +x notifiarr</code></li> <li>Download config file; Type <code>wget -O notifiarr.conf https://raw.githubusercontent.com/Notifiarr/notifiarr/refs/heads/main/examples/notifiarr.conf.example</code></li> </ol>"},{"location":"pages/client/install/#install-service-unit","title":"Install Service Unit","text":"<ol> <li>Type <code>mkdir -p /home/$USER/.config/systemd/user</code></li> <li>Type <code>cd /home/$USER/.config/systemd/user</code></li> <li>Type <code>id</code> to see your username.</li> <li> <p>Type <code>nano notifiarr.service</code></p> <ol> <li>Copy and paste the following content.</li> <li>Replace <code>YOUR-API-KEY-FROM-NOTIFIARR.COM</code> with your API key.</li> <li>Replace <code>$USER</code> with your username.</li> </ol> <pre><code># Systemd service unit for notifiarr.\n\n[Unit]\nDescription=notifiarr - Official chat integration client for Notifiarr.com\n\n[Service]\nExecStart=/home/$USER/notifiarr/notifiarr\nRestart=always\nRestartSec=10\nType=simple\nWorkingDirectory=/home/$USER/notifiarr\nEnvironment=DN_API_KEY=YOUR-API-KEY-FROM-NOTIFIARR.COM\nEnvironment=DN_LOG_FILE=/home/$USER/notifiarr/app.log\nEnvironment=DN_HTTP_LOG=/home/$USER/notifiarr/http.log\nEnvironment=DN_DEBUG_LOG=/home/$USR/notifiarr/debug.log\nEnvironment=DN_SERVICES_LOG_FILE=/home/$USER/notifiarr/services.log\nEnvironment=DN_QUIET=true\n\n[Install]\nWantedBy=default.target\n</code></pre> </li> </ol>"},{"location":"pages/client/install/#start-client","title":"Start Client","text":"<p>Use these commands to control systemd. Systemd is what launches apps like notifiarr client. The <code>stop</code> and <code>restart</code> commands are not listed below, but you can use those too if you need them.</p> <ol> <li>Type <code>systemctl --user enable notifiarr</code> to make notifiarr auto-start.</li> <li>Type <code>systemctl --user start notifiarr</code> to start notifiarr now.</li> <li>Type <code>systemctl --user status notifiarr</code> to check if there are any errors.</li> <li>Type <code>systemctl --user daemon-reload</code> if you make changes to the above file (to re-load it).</li> <li>On your browser go to <code>http://your-ultraseedbox-url:5454</code></li> </ol>"},{"location":"pages/client/install/#configure-proxy","title":"Configure Proxy","text":"<p>Setting up the proxy is optional, but recommended so you can access the client like your other apps.</p> <ol> <li>Log into your Notifarr client and change the base url to <code>/notifiarr</code> and save changes</li> <li>Go back to your ssh console</li> <li>Type <code>cd /home/$USER/.apps/nginx/proxy.d</code></li> <li>Type <code>nano notifiarr.conf</code></li> <li>Paste the following content without changing it.</li> </ol> <pre><code>location /notifiarr {\n    # &lt;put proxy auth directives here&gt; Optional:\n    # proxy_set_header X-WebAuth-User $auth_user;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    set $notifiarr http://127.0.0.1:5454;\n    proxy_pass $notifiarr$request_uri;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $http_connection;\n    proxy_set_header Host $host;\n}\n# Notifiarr Client\nlocation /notifiarr/api {\n    proxy_set_header X-Forwarded-For $remote_addr;\n    set $notifiarr http://127.0.0.1:5454;\n    proxy_pass $notifiarr$request_uri;\n}\n</code></pre> <ol> <li>Type <code>systemctl --user restart nginx</code></li> <li>Now you should be able to browse to <code>https://your-ultraseedbox-url/notifiarr</code></li> </ol>"},{"location":"pages/client/reverseProxy/","title":"Reverse Proxy","text":""},{"location":"pages/client/reverseProxy/#notifiarr-client-reverse-proxy","title":"Notifiarr Client Reverse Proxy","text":"<p>Danger</p> <p>None of this is required or necessary. We recommend NOT exposing your Notifiarr client to the Internet at all. In other words, don't do any of this. But you can if you want to access your local Notifiarr Client from the Internet.</p> <p>While you can certainly poke a hole your firewall and send the traffic directly to this app, it is recommended that you put it behind a reverse proxy if you're going to expose it. It's pretty easy.</p> <ul> <li>You'll want to tune the <code>upstreams</code> and <code>urlbase</code> client settings for your environment.</li> <li>If your reverse proxy IP is <code>192.168.3.45</code> then set <code>upstreams</code>     in the Trust Profile page of the local Notifiarr Client to <code>192.168.3.45/32</code></li> <li>The <code>urlbase</code> on the local Notifiarr client configuration page can be left at <code>/</code>,   but change it if you serve this app from a subfolder like <code>/notifiarr</code>.</li> </ul>"},{"location":"pages/client/reverseProxy/#cloudflare-users","title":"Cloudflare Users","text":"<p>If you use Cloudflare Firewall or ZeroTrust see the CloudFlare Proxy page to ensure Notifiarr is allowed through Cloudflare.</p>"},{"location":"pages/client/reverseProxy/#nginx-subfolder-example","title":"NGINX Subfolder Example","text":"<ul> <li>We'll assume you want to serve the client from <code>/notifiarr</code> and it's running on <code>127.0.0.1</code>.</li> <li>Here's a sample nginx config to do that:</li> </ul> <pre><code># Notifiarr Client\nlocation /notifiarr/api {\n    proxy_set_header X-Forwarded-For $remote_addr;\n    set $notifiarr http://127.0.0.1:5454;\n    proxy_pass $notifiarr$request_uri;\n    auth_request off;\n}\n\nlocation /notifiarr {\n    # &lt;put proxy auth directives here&gt; Optional:\n    # proxy_set_header X-WebAuth-User $auth_user;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    set $notifiarr http://127.0.0.1:5454;\n    proxy_pass $notifiarr$request_uri;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $http_connection;\n    proxy_set_header Host $host;\n}\n</code></pre> <p>Make sure the Nginx <code>location</code> path matches the <code>URL Base</code> Notifiarr setting. That's all there is to it.</p>"},{"location":"pages/client/reverseProxy/#reverse-proxy-authentication","title":"Reverse Proxy Authentication","text":"<p>Info</p> <p>If using Authelia or Organizr ensure they are passing the username header.</p> <p>There is working a SWAG example (with authelia, organizr, ldap) at the bottom of this page.</p> <p>For example in NGINX: if <code>auth_user</code> is the variable your authentication app is passing (and it probably isn't) then your would need:</p> <pre><code>proxy_set_header X-WebAuth-User $auth_user;\n</code></pre>"},{"location":"pages/client/reverseProxy/#traefik","title":"Traefik","text":"<p>Make sure to select the correct <code>Remote-User</code> header on the Trust Profile page in the client's Web UI.</p>"},{"location":"pages/client/reverseProxy/#nginx-subdomain-example","title":"NGINX Subdomain Example","text":"<ul> <li>We'll assume you're running LSIO's SWAG docker container</li> <li>Non-SWAG users will need to update the file - including the <code>includes</code> as applicable</li> </ul> <pre><code>## Version 2023/02/09\n## TRaSH drop in for LSIO SWAG\n## Originally from https://gist.github.com/TRaSH-/037235b0440b38c8964a2cbb64179cf3\n## LSIO SWAG https://github.com/linuxserver/docker-swag\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n\n    server_name notifiarr.*;\n\n    include /config/nginx/ssl.conf;\n    include /config/nginx/proxy.conf;\n    include /config/nginx/resolver.conf;\n\n    client_max_body_size 0;\n\n    # enable for ldap auth, fill in ldap details in ldap.conf\n    #include /config/nginx/ldap.conf;\n\n    # enable for Authelia\n    #include /config/nginx/authelia-server.conf;\n\n    set $upstream_app notifiarr;\n    set $upstream_port 5454;\n    set $upstream_proto http;\n\n    location / {\n        # enable the next two lines for http auth\n        #auth_basic \"Restricted\";\n        #auth_basic_user_file /config/nginx/.htpasswd;\n\n        # enable the next two lines for organizr auth\n        #include /config/nginx/orgauth.conf;\n        #auth_request /organizr-auth/0;\n\n        # enable the next two lines for ldap auth\n        #auth_request /auth;\n        #error_page 401 =200 /ldaplogin;\n\n        # enable for Authelia\n        #include /config/nginx/authelia-location.conf;\n\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_set_header X-WebAuth-User $auth_user;\n        proxy_pass $upstream_proto://$upstream_app:$upstream_port;\n    }\n\n    # API path must not be protected by auth, authelia, ldap, etc.\n    location ~ (/notifiarr)?/api {\n        deny all; # remove this line if you really want to expose the API.\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_pass $upstream_proto://$upstream_app:$upstream_port;\n    }\n}\n</code></pre>"},{"location":"pages/client/reverseProxy/#nginx-proxy-manager","title":"Nginx Proxy Manager","text":"<ul> <li>You will need a registered domain name with ddns services.</li> <li>Add a subdomain thru aliases on your domain/ddns provider and point it to your external ip.</li> <li>Add a proxy host in NPM.</li> </ul>"},{"location":"pages/client/reverseProxy/#details-tab","title":"Details Tab","text":"<ol> <li>Domain names: subdomain you just created</li> <li>Scheme: <code>http</code></li> <li>Forwarded Hostname/IP: Your Internal LAN IP hosting Notifiarr E.g. <code>192.168.1.2</code></li> <li>Forward Port : The port Notifiarr is running on, default: <code>5454</code></li> <li>Check <code>Block common exploits</code></li> </ol>"},{"location":"pages/client/reverseProxy/#ssl-tab","title":"SSL Tab","text":"<ol> <li>Choose a certificate ( or make a fresh one pointing to your freshly made subdomain )</li> <li>Check <code>Force SSL and HTTP/2 Support</code></li> <li>Save</li> </ol> <p>You will need to use Notifiarr Login/Password setup, not the webauth method with the above NPM configuration. See client Web UI for more details</p>"},{"location":"pages/client/setup/","title":"Notifiarr Client Setup","text":""},{"location":"pages/client/setup/#notifiarr-client-setup","title":"Notifiarr Client Setup","text":"<p>The content on this page has been moved. Find it in these two pages:</p> <ul> <li>Looking for Plex Webhook help? Check the After Install page</li> <li>Tmp not found error? Check out the Troubleshooting page.</li> </ul>"},{"location":"pages/client/troubleshooting/","title":"Troubleshooting","text":""},{"location":"pages/client/troubleshooting/#client-troubleshooting","title":"Client Troubleshooting","text":"<ul> <li>Find help on Notifiarr's Discord (preferred).</li> <li>Or Go Lift if you want to chat about the client code.</li> </ul> <p>Find tips for common problems on this page.</p>"},{"location":"pages/client/troubleshooting/#tmp-not-found","title":"Tmp not found","text":"<p>Corruption checks require a temp folder to write the db file. This may be a couple hundred megabytes or more. Set the <code>TMPDIR</code> environment variable to a writable path, or mount <code>/tmp</code> to resolve the error.</p>"},{"location":"pages/client/troubleshooting/#duplicate-clients","title":"Duplicate Clients","text":"<p>If you have duplicate clients on the website:</p> <ol> <li>Make sure your client has a static hostname.</li> <li>Then see these instructions     to remove the duplicates.</li> </ol>"},{"location":"pages/client/troubleshooting/#gibberish-config-file","title":"Gibberish Config File","text":"<p>Once you click save in the Web UI, the config file is compressed. It will look like gibberish when you try to edit it. In the rare case the UI is not accessible and the conf file must be edited, you will need to decompress the file with <code>bzcat</code> prior to making your edits. Example:</p> <pre><code>bzcat /path/to/notifiarr.conf &gt; /output/path/to/notifiarr_decomp.conf\n# or\nmv /path/to/notifiarr.conf /path/to/notifiarr.conf.bz\nbunzip2 /path/to/notifiarr.conf.bz\n</code></pre>"},{"location":"pages/client/troubleshooting/#clearing-logs","title":"Clearing Logs","text":"<ul> <li>To <code>clear</code> logs to make troubleshooting easier - stop the client   and rename/remove the log file(s), then restart the client.</li> <li>If you have not previously enabled debug logs you do not need to clear anything.</li> </ul>"},{"location":"pages/client/troubleshooting/#forgotten-passwords","title":"Forgotten Passwords","text":""},{"location":"pages/client/troubleshooting/#fresh-installs","title":"Fresh Installs","text":"<p>Execute the below command to print the unencrypted first-start password. This only works for brand new installations.</p> <pre><code># Fix the path yourself:\ngrep ui_password  /path/to/notifiarr/notifiarr.conf\n\n# Unraid usually:\ngrep ui_password  /mnt/user/appdata/Notifiarr/notifiarr.conf\n</code></pre>"},{"location":"pages/client/troubleshooting/#liunx-freebsd","title":"Liunx &amp; FreeBSD","text":"<ul> <li>Run these commands to reset the password and restart the application.</li> </ul> <pre><code># Reset password.\nnotifiarr --reset\n# Restart client (linux).\nsystemctl restart notifiarr\n</code></pre>"},{"location":"pages/client/troubleshooting/#windows","title":"Windows","text":"<ul> <li>Run this command, and then restart the application.</li> </ul> <pre><code>notifiarr.exe --reset\n</code></pre>"},{"location":"pages/client/troubleshooting/#docker-unraid","title":"Docker &amp; Unraid","text":"<ul> <li>Run these two commands in your host system's terminal (console or ssh) while the Notifiarr container is running.    If your container is named <code>notifiarr</code> then replace <code>Notifiarr</code> with the lowercase version.</li> </ul> <pre><code>docker exec Notifiarr /notifiarr --reset\ndocker kill --signal=HUP Notifiarr\n</code></pre> <pre><code># Example output with new password:\n[INFO] 2023/09/08 09:32:11 New 'admin' user password: four38=Draw\n[INFO] 2023/09/08 09:32:11 Writing Config File: /config/notifiarr.conf\n</code></pre> <ul> <li>If you still can't login, restart the container.</li> </ul>"},{"location":"pages/discordbot/custombot/","title":"Custom Bot","text":""},{"location":"pages/discordbot/custombot/#discord","title":"Discord","text":"<p>Info</p> <p>Let the Staff know that you want to run your own bot instead of the Notifiarr bot so we can enable it for your account. Keep in mind this is a Sub feature.</p>"},{"location":"pages/discordbot/custombot/#dev-portal","title":"Dev portal","text":"<p>There are tons of tutorials online about creating a Discord bot, it is super simple. After you have created your bot and you are on the page where you copy your bot token, make sure you check the intents</p>"},{"location":"pages/discordbot/custombot/#privileged-gateway-intents","title":"Privileged Gateway Intents","text":"<ul> <li>PRESENCE INTENT</li> <li>SERVER MEMBERS INTENT</li> <li>MESSAGE CONTENT INTENT</li> </ul> <p>After you have created the bot, invite it to your server. It will show offline for now and that is fine &amp; expected.</p>"},{"location":"pages/discordbot/custombot/#your-server","title":"Your Server","text":"<p>Now that you have added the bot to your server you need to get the bots id. Right click on the bot and select the bottom option \"Copy User ID\"</p>"},{"location":"pages/discordbot/custombot/#notifiarr-website","title":"Notifiarr Website","text":"<p>After the Admins have enabled it you simply need to go to your profile and in the Notification section is a place for the Bot Token and Bot Id. Add those pieces of information and click save so the site will create a container for your bot.</p> <p>Since you already added the bot to your server above, once you hit save it should only take a few seconds for the bot to show online in your server</p>"},{"location":"pages/discordbot/permissions/","title":"Permissions","text":""},{"location":"pages/discordbot/permissions/#discord-permissions","title":"Discord Permissions","text":"<p>Getting permissions correct for your setup can be a struggle depending on how you have your Discord server setup. If you want to run a simple test to see if you have permission issues, set the Notifiarr role to have <code>Admin</code> permission and see whether it solves your issue. If everything works, this means you simply need to adjust permissions for the the Notifiarr role and you don't need to give it full admin permissions.</p> <p>To update the integration's permissions, click on your server name at the top and pick <code>Server Settings &gt; Roles</code>. Click on the <code>Notifiarr</code> role and then pick <code>Permissions</code>.</p>"},{"location":"pages/discordbot/permissions/#required-permissions","title":"Required Permissions","text":"<ol> <li><code>View Channels</code><ul> <li>The bot needs this role to generate a channel list so you can assign which notifications go to which channels on your server. If the channel is a private channel, you may also need to adjust channel specific permissions.</li> </ul> </li> <li><code>Send Messages and Create Posts</code><ul> <li>This one is obvious, without it the bot role can not add messages to channels</li> </ul> </li> <li><code>Embed Links</code><ul> <li>Many notifications have links (such as TMDb, TVDb, IMDb, Website links, etc.)</li> </ul> </li> <li><code>Add Reactions</code><ul> <li>*arr and Plex notifications add reactions to notifications to signify things such as the indexer, manual or rss grab, imported, failed, unpacked, subtitles, etc.</li> </ul> </li> <li><code>Mention @everyone, @here and All Roles</code><ul> <li>Needed if you have alerts setup with Snapshots or Media Request integrations so the proper user/role can be @mentioned</li> </ul> </li> <li><code>Manage Messages</code><ul> <li>This is used for the Media Request integration so the bot can remove all the back and forth posts when adding new things to leave a clean channel history</li> </ul> </li> <li><code>Read Message History</code><ul> <li>This is used for the Media Request integration so the bot can get the user interactions and is also used to place reactions on existing messages</li> </ul> </li> </ol>"},{"location":"pages/discordbot/permissions/#optional-permissions","title":"Optional Permissions","text":"<ol> <li><code>Use External Emojis</code><ul> <li>Only required if the reactions you use are from another server</li> </ul> </li> <li><code>Manage Channels</code><ul> <li>Only required with the Channel stats integration</li> </ul> </li> <li><code>Connect</code><ul> <li>Only required with the Channel stats integration</li> </ul> </li> </ol> <p>If you manage your channels with individual permissions plus bot permissions, you will need to adjust them accordingly so the bot can do its job</p> <ul> <li> <p>If permissions are misconfigured, then the Notifiarr site will auto-disable the integration after 25 Discord API errors</p> </li> <li> <p>If you are using reactions and get API errors, the site will auto-remove the reaction</p> </li> <li> <p>If you are using the bot and have cleanup history enabled and get API errors, the site will auto disable it.</p> </li> </ul> <p>You will know when the site does this with a big red notice on top of the setup page that explains the error that Discord reported and what action was taken. All you have to do is fix the issue and re-enable what the site disabled from that point.</p>"},{"location":"pages/faq/faq/","title":"Faq","text":""},{"location":"pages/faq/faq/#faq","title":"FAQ","text":""},{"location":"pages/faq/faq/#why-is-a-discord-server-needed","title":"Why is a Discord Server needed?","text":"<ul> <li>You need to have a discord server to invite the bot to so the notifications have a place to go.</li> </ul>"},{"location":"pages/faq/faq/#what-is-notifiarrs-website-ip-address","title":"What is Notifiarr's (website) IP Address","text":"<ul> <li>Some more security conscious users restrict incoming traffic to only certain IP addresses.</li> <li>The Notifiarr Website's IP address is rather \"sticky\" and rarely changes. However, you can always find the current IP address by getting the IP of the domain listed below.</li> </ul> <pre><code>ping origin-proxy.notifiarr.com\n</code></pre>"},{"location":"pages/faq/faq/#q-is-the-notifiarr-client-required","title":"Q. Is the Notifiarr client required?","text":"<ul> <li>The client is only required for certain integrations/features. If you open the <code>Manage Integrations</code> on the site, it will display in the bottom right corner as well which need the client.</li> </ul>"},{"location":"pages/faq/faq/#integrations","title":"Integrations","text":"<ul> <li>Channel Stats</li> <li>Dashboard</li> <li>MDBList (Adding lists &amp; movies to Radarr, Adding shows to Sonarr)</li> <li>Media Requests</li> <li>Network</li> <li>Plex</li> <li>Lidarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>Prowlarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>Radarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>Readarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>Reciperr (Adding lists &amp; movies to Radarr)</li> <li>Snapshot</li> <li>Sonarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>TRaSH Custom Format &amp; Profile Sync (Patron)</li> <li>Client Commands</li> <li>Discord triggering, automation, and advanced features (Sub)</li> </ul>"},{"location":"pages/faq/faq/#features","title":"Features","text":"<ul> <li>Radarr Collections</li> <li>Automatic unmonitoring of movies/episodes after finish</li> <li>Automatic refresh of TBA episodes</li> <li>Automatic plex session killing per user/device based on rules</li> <li>Stuck queue item notifications</li> <li>Starr backup/corruption check notifications</li> </ul>"},{"location":"pages/faq/faq/#q-how-do-i-monitor-the-queue-for-stuck-items","title":"Q. How do I monitor the queue for stuck items?","text":"<ul> <li> <p>Open the Client Settings on the site and expand the Starr section to set the notify times.</p> </li> <li> <p>It will notify once when it thinks it is stuck and then update the existing message every 5 minutes until it is imported so you can see the amount of time it is stuck and why. Messages go to the shared <code>Errors</code> channel.</p> </li> <li> <p>If you want the notifications to stop coming for a specific item, click the <code>Acknowledge</code> link in the notification. This is useful if something has a low amount of peers for example so it could take some time to complete it.</p> </li> </ul>"},{"location":"pages/faq/faq/#q-how-do-i-testtroubleshoot-plex","title":"Q. How do I test/troubleshoot Plex?","text":""},{"location":"pages/faq/faq/#locating-the-plex-token","title":"Locating the Plex Token","text":"<ul> <li>See this post in the Plex Forums</li> </ul> <p>Info</p> <p>The Plex Token is required for the Notifiarr Client to send commands to Plex</p>"},{"location":"pages/faq/faq/#connection","title":"Connection","text":"<ul> <li>You can run a curl command and make sure you get an <code>200 OK</code> response returned.</li> </ul> <pre><code>curl -I -H \"X-Plex-Token: &lt;token&gt;\" &lt;url&gt;/status/sessions\n</code></pre> <ul> <li><code>&lt;token&gt;</code> The plex token from your config (Unraid: ENV | All: UI) Ex: <code>ZQonMnitLFbFsuaLXT9Yj</code></li> <li> <p><code>&lt;url&gt;</code> The plex URL from your config (ENV or conf file). Ex: <code>http://localhost:32400</code></p> </li> <li> <p>Expected result: HTTP/1.1 200 OK</p> </li> <li> <p>Incorrect result: HTTP/1.1 401 Unauthorized</p> </li> <li> <p>Adjust the token and url until it is 200.</p> </li> <li>Update the Notifiarr Client's configuration with the correct url and token</li> <li>Restart the Notifiarr Client</li> </ul>"},{"location":"pages/faq/faq/#notifications-sessions","title":"Notifications &amp; Sessions","text":"<p>If session info is missing from notifications or the sessions notification is not working:</p> <ul> <li>Make sure you dont have duplicated clients in the Client Settings</li> <li>Make sure you have a client setup for Plex</li> <li>Make sure you have selected the Activity checkbox in the Plex section of the Client Settings</li> <li>Try to increase the Activity Delay in the Plex section of the Client Settings as this will give Plex more time to get the session available in the endpoint</li> <li>Note 1: The sessions notifications will only send when there is at least one item being played or paused</li> <li>Note 2: It doesn't matter what Tautulli shows or the Plex Dashboard shows, they both use the same sessions endpoint.   If you where to look at them at the same time as the notification is sent (when it doesn't work) they would also not   show the session yet. How long it takes Plex &amp; your (possibly low powered or over worked) server to make the session   available in the endpoint is out of our control which is why we added the delay option</li> </ul>"},{"location":"pages/faq/faq/#q-what-are-the-user-level-differences","title":"Q. What are the user level differences","text":"<ul> <li>User: Anyone who makes an account for free</li> <li>Patron: Anyone who supports the project once</li> <li>Subscriber: Anyone who supports the project monthly</li> </ul> <p>Note</p> <p>Patron and Sub also have extra channels available on Discord with roles and colors</p>"},{"location":"pages/faq/faq/#limitations","title":"Limitations","text":"User Patron Subscriber Integration Setting 12,000 / day 500 / hour 24,000 / day 1,000 / hour Unlimited Core Notifications All but TRaSH Sync All All Core Integrations 7 days 14 days Unlimited Network Status retention (used for the network status page to show uptime and for detail links in notifications) 14 days 30 days Unlimited Plex Session retention (used for tracking transcodes by device, app, user, media type, etc and sessions notifications) 7 days 14 days Unlimited Website Status Incident retention (used for network status page to show uptime)"},{"location":"pages/integrations/apprise/","title":"Apprise","text":""},{"location":"pages/integrations/apprise/#apprise","title":"Apprise","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/authentik/","title":"Authentik","text":""},{"location":"pages/integrations/authentik/#authentik","title":"Authentik","text":"<p>Info</p> <p>This integration is for setting up discord notifications for Authentik</p>"},{"location":"pages/integrations/authentik/#trigger-options","title":"Trigger options","text":"<ul> <li><code>Authorize apps</code> - when applications are authorized with the correct login credentials</li> <li><code>Model created</code> - when new models are created in the admin interface</li> <li><code>Model updated</code> - when models are updated/changed in the admin interface</li> <li><code>Login</code> - when successful logins occur</li> <li><code>Logout</code> - when logouts occur</li> </ul>"},{"location":"pages/integrations/authentik/#instructions","title":"Instructions","text":"<p>Authentik Notifications</p> <p>Detailed wiki for Authentik Notifications</p> <p></p> <ol> <li>Instructions on how too set webhook notifications in Authentik</li> <li>the webhook URL you will use in Authentik</li> </ol>"},{"location":"pages/integrations/authentik/#configuration","title":"Configuration","text":"<p>Click the cog icon too open the configuration settings</p> <p></p> <ol> <li>enabling each <code>trigger field</code>, and using the <code>customize toggle</code> too drop down the <code>notification fields</code> for each trigger</li> <li>choosing the color of the notification</li> </ol>"},{"location":"pages/integrations/authentik/#example-notifications","title":"Example Notifications","text":"<p>Here is an example with all <code>notification fields</code> enabled for the <code>Login</code> and <code>Authorize apps</code> triggers</p> <p></p>"},{"location":"pages/integrations/autobrr/","title":"Autobrr","text":""},{"location":"pages/integrations/autobrr/#autobrr","title":"Autobrr","text":"<p>Info</p> <p>This integration is to enable discord notifications for autobrr.</p>"},{"location":"pages/integrations/autobrr/#trigger-options","title":"Trigger Options","text":"<p><code>Approved</code> - Be notified of approved media.</p> <p><code>Rejected</code> - Be notified of rejected media.</p> <p><code>Error</code> - Be notified of any errors that may occur.</p> <p><code>IRC Down</code> - Be notified of any Down IRC.</p> <p><code>IRC Up</code> - Be notified when the IRC is back Up.</p> <p><code>Updates</code> - Be notified of any updates available.</p>"},{"location":"pages/integrations/autobrr/#configuration","title":"Configuration","text":"<p>Here you can customize the layout and color of your notification for each available <code>trigger</code></p> <p></p>"},{"location":"pages/integrations/autobrr/#instructions","title":"Instructions","text":"<ol> <li>Basic instructions to setup autobrr notifications.</li> <li>The API key used within the autobrr settings \u2192 Notifications.</li> <li>Always save.</li> </ol> <p>Info</p> <p>Here is how to setup your notifications in autobrr.</p> <p></p>"},{"location":"pages/integrations/autobrr/#test-notification-examples","title":"Test Notification Examples","text":""},{"location":"pages/integrations/basicUsage/","title":"How To Setup Integrations","text":""},{"location":"pages/integrations/basicUsage/#how-to-setup-integrations","title":"How To Setup Integrations","text":"<p>Info</p> <p>All the integrations follow the same layout and logic so this means once you understand how one of them works you will be able to figure out how to setup any of them.</p>"},{"location":"pages/integrations/basicUsage/#explaining-integrations","title":"Explaining Integrations","text":"<p>Each integration is split up into sections and there is a sub menu on the right (unless using mobile) that will help you jump to specific sections.</p> <p></p> <ul> <li>Basic Instructions: Tell you the basics of how to get the integration to work</li> <li>Triggers: Allow you to turn on/off different notification types the integration has</li> <li>Integration/Extra Settings: Other things the integration can offer outside of the Triggers</li> <li>Client Settings: Any settings, timers, etc that the local client needs to work with this integration</li> <li>Custom Icon: A way to change the icon used for the integration on the site and notifications</li> <li>Content Lines: A way to get a small preview on mobile devices, wearables, computer toast notifications, etc</li> <li>Screenshots: What the integration notifications can look like</li> </ul>"},{"location":"pages/integrations/basicUsage/#instructions","title":"Instructions","text":"<ol> <li>This section is typically information on how to get things working in the 3rd party app</li> <li>This section is the apikey/url used in the 3rd party app. Many apps offer an optional apikey just for that 3rd party app that you can add in your profile</li> <li>This section is any extra notes about using the integration</li> </ol>"},{"location":"pages/integrations/basicUsage/#triggers","title":"Triggers","text":"<ol> <li> <p>Toggle the trigger on/off to receive notifications</p> </li> <li> <p>The button with the 3 lines on it allows you to customize the fields in the notification</p> </li> <li> <p>The name of the trigger, will usually relate to what the 3rd party app calls it</p> </li> <li> <p>The color of the notification</p> </li> <li> <p>Reset the color back to default</p> </li> <li> <p>Trigger ping settings which will allow picking a role that gets pinged every time a notification is received for the selected trigger. (Pro tip: Press <code>Ctrl</code> when clicking to unselect the last item)</p> </li> <li> <p>The button with the grid box allows you to customize where each field in the notification goes with a drag/drop interface</p> </li> </ol>"},{"location":"pages/integrations/bazarr/","title":"Bazarr","text":""},{"location":"pages/integrations/bazarr/#bazarr","title":"Bazarr","text":"<p>Info</p> <p>This integration allows for notifications from Bazarr and will also add reactions to notifications if a subtitle was found for it and you are using reactions.</p>"},{"location":"pages/integrations/bazarr/#current-versions","title":"Current Versions","text":""},{"location":"pages/integrations/bazarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/bazarr/#triggers","title":"Triggers","text":"<ul> <li><code>Info</code> - Currently all notifications use this type</li> <li><code>Warning</code> - To date, Bazarr doesn't use this type</li> <li><code>Success</code> - To date, Bazarr doesn't use this type</li> <li><code>Failure</code> - To date, Bazarr doesn't use this type</li> </ul>"},{"location":"pages/integrations/bazarr/#channel","title":"Channel","text":"<ul> <li>Bazarr shares the *arr channel unless Granular Setup is used, clicking the link on the site will move to the channel setup location.</li> </ul>"},{"location":"pages/integrations/bazarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Bazarr.</p> <p></p> <ol> <li>Open integration specific instructions</li> <li>Choose the notification format</li> <li>Enable reactions for <code>*arr</code> notifications when a subtitle is found if the associated <code>*arr</code> notification can be found</li> </ol> <p>Reaction example:</p> <p></p>"},{"location":"pages/integrations/bazarr/#instructions","title":"Instructions","text":"<ol> <li>How to enable notifications from within Bazarr</li> <li>The URL to use in Bazarr</li> <li>Test the notification from Notifiarr to Discord</li> </ol> <p>Note</p> <p>This will ensure your server, channel and permissions are set properly in Discord</p>"},{"location":"pages/integrations/betterstack/","title":"Better Stack","text":""},{"location":"pages/integrations/betterstack/#better-stack","title":"Better Stack","text":"<p>Info</p> <p>This integration allows for notifications from Better stack utilizing their webhook system</p>"},{"location":"pages/integrations/betterstack/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Started</code> - Sent when Better Uptime detects an issue with a site you are monitoring</li> <li><code>Ack</code> (Acknowledged) - Sent when you mark the issue as acknowledged through Better Uptime</li> <li><code>Resoled</code> - Sent when the site you are monitoring returns a successful response</li> </ul> </li> <li>Channel<ul> <li>Pick a channel from your server to send these notifications</li> </ul> </li> </ol>"},{"location":"pages/integrations/betterstack/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Better Uptime.</p> <p></p> <ol> <li>Notification colors for each trigger type</li> <li>Notification content options that you can turn on/off to show in the notifications</li> <li>Better Uptime team id that is used to link the Incident in the notification</li> </ol> <p>Note</p> <p>This integration sends a single notification for all triggers. After the first one is sent, the rest will update the existing notification in the chain.</p>"},{"location":"pages/integrations/channelstats/","title":"Channel Stats","text":""},{"location":"pages/integrations/channelstats/#channel-stats","title":"Channel stats","text":"<p>Prerequisites</p> <p>This integration requires both a client setup and the configuration of the dashboard integration, as the channel stats will pull data from there.</p> <p>Info</p> <p><code>Channel stats</code> requires you to enable the <code>manage roles</code> and <code>connect</code> permissions within your discord settings for the notifiarr bot.</p> <p>Warning</p> <p>Do not attempt to change any of the permissions or settings of the channels that are created by this integration. They are very specific, so they are read-only to users.</p>"},{"location":"pages/integrations/channelstats/#setup","title":"Setup","text":"<p>Setup for <code>channel stats</code> is a little different than the rest; you don't need an API key, nor do you choose any channels. Since we have to give the bot the above permissions, it instead creates voice channels with the appropriate data that you enable.</p> <p>While most of the information is pulled from the dashboard integration, things such as <code>New Movies</code> or <code>New Episodes</code> utilize the <code>Imported</code> trigger for the corresponding Starr integration. If you plan to use the github triggers, you will need to also setup the github integration.</p> <p></p> <p>Info</p> <p>You will also need the Plex client setup if you plan to use the available Plex triggers.</p> <ol> <li>The trigger to enable each field that you may want.</li> <li><code>Sonarr Total</code> - This will display the total number in sonarr.</li> <li><code>Episodes on disk</code> - This is where you can choose how you want to name your <code>sonarr total</code> instance</li> <li>choose to list either the total <code>On Disk</code> or <code>In Database</code></li> <li><code>Plex Streaming</code> - Enabling this will list any plex streams that are happening.</li> <li><code>Plex Transcoding</code> - Enabling this will list any present transcodes on the server.</li> <li><code>Plex Lan Traffic</code> - Enabling this will display the current plex traffic on your LAN.</li> <li><code>Plex Wan Traffic</code> - Enable this will display the current plex traffic on your WAN.</li> </ol> <p>There are also some basic triggers such as:</p> <p></p> <ol> <li><code>discord: users</code> - Enabling this will list how many members are in the server.</li> <li><code>Notifications: daily</code> - Enabling this will list how many notifications you get day by day.</li> <li><code>Notifications: Total</code> - Enabling this will give you the total notifications that notifiarr has ever sent.</li> </ol>"},{"location":"pages/integrations/channelstats/#example","title":"Example","text":""},{"location":"pages/integrations/cronitor/","title":"Cronitor","text":""},{"location":"pages/integrations/cronitor/#cronitor","title":"Cronitor","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/crossseed/","title":"Cross Seed","text":""},{"location":"pages/integrations/crossseed/#crossseed","title":"CrossSeed","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/crowdsec/","title":"Crowdsec","text":""},{"location":"pages/integrations/crowdsec/#crowdsec","title":"Crowdsec","text":"<p>Note</p> <p>This integration allows webhook notifications for crowdsec</p>"},{"location":"pages/integrations/crowdsec/#trigger-options","title":"Trigger options","text":"<ul> <li><code>Ban</code> - Be notified of any bans that occur</li> </ul> <p>Click the cog icon too open the configuration settings</p> <p></p>"},{"location":"pages/integrations/crowdsec/#instructions","title":"Instructions","text":"<ul> <li>you will need too edit your <code>/etc/crowdsec/notifications/http.yaml</code> file to look like this</li> </ul> <pre><code>type: http          # Don't change\nname: notifiarr  # Must match the registered plugin in the profile\nlog_level: info # One of \"trace\", \"debug\", \"info\", \"warn\", \"error\", \"off\"\nformat: |\n  {{ .|toJson }}\nurl: https://notifiarr.com/api/v1/notification/crowdsec\nmethod: POST # Any of the http verbs: \"POST\", \"GET\", \"PUT\"...\nheaders:\n  Content-Type: application/json\n  x-api-key: YOUR_APIKEY_HERE\n</code></pre> <p>make sure too replace <code>YOUR_API_KEY</code> with either your <code>global</code> API KEY or as its recommended you can create a API KEY for Crowdsec.</p> <p>you will register notifiarr in the <code>profiles.yaml</code> in your crowdsec directory</p> <pre><code>name: default_ip_remediation\nfilters:\n - Alert.Remediation == true &amp;&amp; Alert.GetScope() == \"Ip\"\ndecisions:\n - type: ban\n   duration: 4h\nnotifications:\n  - notifiarr\non_success: break\n</code></pre> <p>Crowdec Notifications</p> <ul> <li>Please refer too Crowdsec-Notifications for issues with setup</li> </ul>"},{"location":"pages/integrations/crowdsec/#configuration","title":"Configuration","text":"<ol> <li>Click the <code>Customize</code> toggle too show all available options for the <code>Ban</code> trigger</li> <li>All available <code>notification fields</code></li> <li>Use this if you want to be pings</li> <li>Enable GEO map locations in your notification</li> </ol>"},{"location":"pages/integrations/crowdsec/#examples","title":"Examples","text":"appsec example http example"},{"location":"pages/integrations/dashboard/","title":"Dashboard","text":""},{"location":"pages/integrations/dashboard/#dashboard","title":"Dashboard","text":"<p>Info</p> <p>This integration allows for notifications to keep you updated with an overview of some commonly used apps.</p> <p>The frequency of dashboard updates is controlled by the Notifiarr Client Configuration for the Dashboard for the specified client. All other Dashboard settings are noted below and within the Dashboard Integration.</p>"},{"location":"pages/integrations/dashboard/#trigger-options","title":"Trigger options","text":"<ol> <li>List of apps that are posting updates</li> <li>Used to assign a discord channel to each of your apps to enable notifications</li> </ol>"},{"location":"pages/integrations/dashboard/#discord-channel-setup","title":"Discord Channel Setup","text":"<ol> <li>List of currently supported Apps</li> <li>Copies the first Discord channel to all channels below</li> <li>Discord channel drop-down selection list</li> <li>Discord bot permissions test. If the test passes the user will receive a notification from the bot in the specified channel. If no notification is received, please ensure you have assigned appropriate permissions to the Notifiarr bot.</li> <li>Displays all available Discord channels in the users Notifiarr instance</li> </ol>"},{"location":"pages/integrations/dashboard/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for the Dashboard integration and the following window will open.</p> <p></p> <ol> <li>Initial instructions on how to setup the Dashboard by using the Notifiarr UI.</li> <li>In this section you can define the active Apps and further configure them.</li> <li>Contains additional Settings and customizations</li> <li>Here you can set the update interval of the Dashboard</li> <li>Allows you to change the default icon (Subscriber feature).</li> <li>Some examples of the Dashboard output.</li> <li>The apps you want to get info from.</li> <li>How many of the newest items to see in the message (1-5).</li> <li>How many of the upcoming items to see in the message (1-10).</li> <li>How the Dashboard should display your completion ratio. Two options are available,</li> <li><code>In Database</code> - Compares your downloaded items against what the App considers a complete list</li> <li><code>On Disk</code> - Compares your downloaded items to what you have on your disk.</li> </ol> <p>Warning</p> <p>When you change the active status or the order, the next update will trigger a delete all and repost everything automatically, so they are in the correct order based on what you have turned on.</p>"},{"location":"pages/integrations/dashboard/#examples","title":"Examples","text":"radarr example sonarr example"},{"location":"pages/integrations/discordApp/","title":"Discord App","text":""},{"location":"pages/integrations/discordApp/#discord-app","title":"Discord App","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/dockwatch/","title":"DockWatch","text":""},{"location":"pages/integrations/dockwatch/#dockwatch","title":"DockWatch","text":"<p>Info</p> <p>This integration is for setting up discord notifications with dockwatch, Here you can find more information on Dockwatch</p>"},{"location":"pages/integrations/dockwatch/#trigger-options","title":"Trigger Options","text":"<ol> <li> <p><code>State Change</code> - Trigger a notification for container up/down state changes.</p> </li> <li> <p><code>Usage</code> - Trigger notifications for usages such as CPU, and memory You must set usage thresholds in Dockwatch</p> </li> <li> <p><code>Health</code> - Trigger a notification if a container becomes unhealthy.</p> </li> <li> <p><code>Updates</code> - Trigger a notification when a container has a available update.</p> </li> <li> <p><code>Prunes</code> - Trigger a notification when a container image, or volume has been pruned.</p> </li> </ol>"},{"location":"pages/integrations/dockwatch/#instructions","title":"Instructions","text":"<p>Note</p> <p>It is recommended to setup a API specifically for dockwatch.</p> <p>Here is the setup on dockwatch's end.</p> <p></p> <ol> <li> <p>Click the Three lines too extend the menu.</p> </li> <li> <p>Go into the notification settings.</p> </li> <li> <p>Choose Notifiarr under platforms.</p> </li> <li> <p>Enable any triggers you may need.</p> </li> <li> <p>set a name for the sender.</p> </li> <li> <p>Paste your API key.</p> </li> <li> <p>Save your settings.</p> </li> </ol>"},{"location":"pages/integrations/dockwatch/#configuration","title":"Configuration","text":"<ol> <li><code>Customize</code> - Under the customize tab you can change the color of your notification for each available trigger.</li> </ol>"},{"location":"pages/integrations/dockwatch/#notification-examples","title":"Notification Examples","text":""},{"location":"pages/integrations/duplicacy/","title":"Duplicacy","text":""},{"location":"pages/integrations/duplicacy/#duplicacy","title":"Duplicacy","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/emby/","title":"Emby","text":""},{"location":"pages/integrations/emby/#emby","title":"Emby","text":"<p>Info</p> <p>This integration allows for notifications from the Emby media app</p>"},{"location":"pages/integrations/emby/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Play</code> - Receive a notification when media has started playing</li> <li><code>Stop</code> - Receive a notification when media has stopped playing</li> <li><code>Resume</code> - Receive a notification when media has resumed playing</li> <li><code>Update</code> - Receive a notification when Emby has a server update available</li> <li><code>Restart</code> - Receive a notification when Emby requires a restart</li> </ul> </li> <li>More Triggers<ul> <li>Open the configuration to enable/disable more triggers</li> </ul> </li> <li>Channel<ul> <li>Setup all the channels needed for each trigger</li> </ul> </li> </ol>"},{"location":"pages/integrations/emby/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Emby.</p> <p></p> <ol> <li>Enable triggers and pick colors for each trigger</li> </ol>"},{"location":"pages/integrations/emby/#instructions","title":"Instructions","text":"<ol> <li>This needs to be done in Emby to enable webhooks</li> </ol>"},{"location":"pages/integrations/fail2ban/","title":"Fail2ban","text":""},{"location":"pages/integrations/fail2ban/#fail2ban","title":"Fail2ban","text":"<ul> <li>To make setup easier; set the following variables</li> </ul>"},{"location":"pages/integrations/fail2ban/#variables","title":"Variables","text":"<pre><code>F2BAPI_KEY=\"your_notifiarr_api_key_here\"\nF2B_HOST=\"$(hostname)\"\n</code></pre>"},{"location":"pages/integrations/fail2ban/#instructions","title":"Instructions","text":"<ol> <li> <p>Open a shell on the server where Fail2ban is installed.</p> </li> <li> <p>Change to the Fail2ban actions directory.    Adjust the path if your installation is different.</p> </li> </ol> <pre><code>cd /etc/fail2ban/action.d/\n</code></pre> <ol> <li>Download the Notifiarr Fail2ban action file.</li> </ol> <pre><code>curl -o notifiarr.conf https://notifiarr.com/scripts/fail2ban/notifiarr.conf\n</code></pre> <ol> <li>Configure the Notification - Option A: Edit the <code>notifiarr.conf</code> file and update the hostname and API key.</li> </ol> <pre><code>nano notifiarr.conf\n</code></pre> <ol> <li> <p>Configure the Notification - Option B: Use sed to Update the hostname and API key:</p> <pre><code># Replace `YOUR_SERVERNAME_HERE` with your server's hostname:\nsed -i \"s/YOUR_SERVERNAME_HERE/${F2B_HOST}/g\" notifiarr.conf\n# Replace `YOUR_NOTIFIARR_API_KEY_HERE` with your API key:\nsed -i \"s/YOUR_NOTIFIARR_API_KEY_HERE/${F2BAPI_KEY}/g\" notifiarr.conf\n</code></pre> </li> <li> <p>Configure your <code>jail.local</code> file:</p> </li> </ol> <p>Open your jail configuration:</p> <pre><code>nano /etc/fail2ban/jail.local\n</code></pre> <p>Add <code>notifiarr</code> as an action to the relevant jails or default settings:</p> <pre><code>action = notifiarr[bantime=\"%(bantime)s\", port=\"%(port)s\", protocol=\"%(protocol)s\"]\n</code></pre> <ol> <li>Restart Fail2ban to apply the changes.</li> </ol> <pre><code>fail2ban-client restart\n</code></pre>"},{"location":"pages/integrations/github/","title":"Github","text":""},{"location":"pages/integrations/github/#github","title":"Github","text":"<p>Info</p> <p>This integration allows for notifications from public Github repositories.</p>"},{"location":"pages/integrations/github/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li>List of all repositories with notifications enabled</li> </ul> </li> </ol>"},{"location":"pages/integrations/github/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Github.</p> <p> </p> <ol> <li>Add the organization URL. You have to be able to manage the selected Organization so you can add webhooks.</li> <li>Remove an existing organization, keep in mind this removes all repositories linked to it</li> <li>Add a discord server. The default server is available but this allows you to push notifications to other servers (example my personal discord (default) or Notifiarr discord).</li> <li>Remove a discord server.</li> <li>Pick a repository, they are pulled automatically based on the organizations added.</li> <li>Copy the <code>Server</code> or <code>Channel</code> selection to all triggers</li> <li>Available Github triggers</li> </ol>"},{"location":"pages/integrations/github/#instructions","title":"Instructions","text":"<p>Note</p> <p>This is how you add the webhook to Github and then how you add the organization in the Github integration</p>"},{"location":"pages/integrations/hotio/","title":"Hotio","text":""},{"location":"pages/integrations/hotio/#hotio","title":"Hotio","text":"<p>Info</p> <p>This integration allows for notifications from Hotio.</p>"},{"location":"pages/integrations/hotio/#currently-supported","title":"Currently supported","text":"<ul> <li>Pullio</li> </ul>"},{"location":"pages/integrations/hotio/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Pullio</code> - Enable notifications from Pullio</li> </ul> </li> <li>Channel<ul> <li>Pick the channel on your server to send Pullio notifications to.</li> </ul> </li> </ol>"},{"location":"pages/integrations/hotio/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Hotio apps.</p> <p></p> <ol> <li>Pick the colors for the different Pullio update states</li> </ol>"},{"location":"pages/integrations/hotio/#instructions","title":"Instructions","text":"<p>The compose entry to enable Notifiarr with Pullio</p> <p>Note</p> <p>for images: If you do not specify an avatar image in the app compose one will be used from the site so you do not have to worry about image hosting sites.</p>"},{"location":"pages/integrations/jellyfin/","title":"Jellyfin","text":""},{"location":"pages/integrations/jellyfin/#jellyfin","title":"Jellyfin","text":"<p>Info</p> <p>This integration allows for notifications from the Jellyfin media app</p>"},{"location":"pages/integrations/jellyfin/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Items</code> - Receive a notification when media is added</li> <li><code>Play</code> - Receive a notification when media has started playing</li> <li><code>Stop</code> - Receive a notification when media has stopped playing</li> <li><code>Plugin Install</code> - Receive a notification when a plugin has been installed</li> <li><code>Plugin Uninstall</code> - Receive a notification when a plugin has been removed</li> </ul> </li> <li>More Triggers<ul> <li>Open the configuration to enable/disable more triggers</li> </ul> </li> <li>Channel<ul> <li>Setup all the channels needed for each trigger</li> </ul> </li> </ol>"},{"location":"pages/integrations/jellyfin/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Jellyfin.</p> <p></p> <ol> <li>Enable triggers and pick colors for each trigger</li> <li>Expand the notification content settings via the customize button</li> </ol> <p></p> <ol> <li>Notification content options that you can turn on/off to show in the notifications</li> </ol>"},{"location":"pages/integrations/jellyfin/#notifiarr","title":"NOTIFIARR","text":"<ol> <li>This needs to be done in Jellyfin before webhooks can be used</li> <li>After the webhook plugin is installed, this is how you add the webhook for Notifiarr</li> </ol>"},{"location":"pages/integrations/jellyfin/#jellyfin_1","title":"JELLYFIN","text":"<p>To configure your Jellyfin server to work with Notifiarr, we will first have to configure a few things, such as our webhook and notification settings - the latter required to for new content notifications.</p>"},{"location":"pages/integrations/jellyfin/#install-the-webhook-plugin","title":"Install the Webhook Plugin","text":"<p>To install the Webhook plugin, navigate to the <code>Dashboard</code> and into the <code>Plugins</code> section. From here, scroll down until you find the <code>Webhook Plugin</code></p> <p>Click on the plugin and install the latest version. Once installed, go ahead and restart your Jellyfin server for the plugin to be loaded.</p>"},{"location":"pages/integrations/jellyfin/#configure-the-webhook-plugin","title":"Configure the Webhook Plugin","text":"<p>Once you have restarted your Jellyfin server, navigate back to your <code>Plugins</code> menu and look for Webhook under the <code>My Plugins tab</code>. Click on it to reveal its options.</p> <p>Write the URL of your Jellyfin server where it says <code>SERVER URL</code> and click on \"Add Generic Destination\" and scroll down to configure it.</p> <ul> <li><code>NAME</code></li> </ul> <p>Give the Webhook a name</p> <p>Info</p> <p>Example: Notifiarr</p> <ul> <li><code>Webhook Url</code></li> </ul> <p>Note</p> <p>This is the URL of your webhook, which includes your API Key</p> <pre><code>https://notifiarr.com/api/v1/notification/jellyfin/YOUR_API_KEY\n</code></pre> <ul> <li><code>Notification Type</code></li> </ul> <p>Enable all except:</p> <ol> <li>Generic</li> <li>Playback Progress</li> <li>Task Completed</li> <li>User Data Saved</li> </ol> <p>Check \"Send All Properties (ignores template)\"</p> <p>Once the webhook has been configured, remember to click on  Save.</p> <p>Note</p> <p>If you are using the 'Item Added' notification, be sure to enable it in the notifications settings, otherwise it won't work.  Dashboard &gt; Notifications &gt; New content added  You can also change how often Jellyfin notifies you of new items by changing the intervals of the scheduled task.  Dashboard &gt; Scheduled Tasks &gt; Webhook Item Added Notifier</p>"},{"location":"pages/integrations/jellyfin/#debugging-webhooks","title":"Debugging Webhooks","text":"<p>Info</p> <p>If your webhook isn't working, start debugging by adding webhooks to your logging configuration.  Amend your Jellyfin's logging.json file to enable webhook debugging by adding <code>\"Jellyfin.Plugin.Webhook\": \"Debug\"</code></p> <p>Warning</p> <p>Remember to add a comma after <code>\"System\": \"Warning\"</code> to avoid formatting errors.  </p><pre><code>{\n\"Serilog\": {\n     \"MinimumLevel\": {\n          \"Default\": \"Information\",\n          \"Override\": {\n               \"Microsoft\": \"Warning\",\n               \"System\": \"Warning\",\n+               \"Jellyfin.Plugin.Webhook\": \"Debug\"\n          }\n     }\n</code></pre><p></p>"},{"location":"pages/integrations/jellyseerr/","title":"Jellyseerr","text":""},{"location":"pages/integrations/jellyseerr/#jellyseerr","title":"Jellyseerr","text":"<p>jellyseerr notifications</p> <p>If you have any issues setting up notifications for jellyseerr refer to this wiki</p>"},{"location":"pages/integrations/jellyseerr/#integration-card","title":"Integration Card","text":"<ol> <li>Configuration</li> <li>Channel picker for the notifications</li> </ol>"},{"location":"pages/integrations/jellyseerr/#channel-picker","title":"Channel Picker","text":"<ol> <li>List of channels <code>Dropdown menu</code></li> <li>Test bot channel permissions</li> <li>Copy Channel to all</li> </ol>"},{"location":"pages/integrations/jellyseerr/#configuration","title":"Configuration","text":"<ol> <li>Notification triggers</li> <li>Notification Options</li> <li>Notification Color</li> </ol> <p>Note</p> <p>Be sure to save settings</p>"},{"location":"pages/integrations/jellyseerr/#instructions","title":"Instructions","text":"<ol> <li>Notifications Settings</li> <li>Webhook</li> <li>Enable the webhook agent</li> <li>Add the notification URL <code>https://notifiarr.com/api/v1/notification/overseerr/api_key_here</code> - Make sure to make a api key specific to overseerr</li> <li>Notification types you want to receive</li> <li>Save changes and enable the webhook</li> </ol>"},{"location":"pages/integrations/kometa/","title":"Kometa","text":""},{"location":"pages/integrations/kometa/#kometa","title":"Kometa","text":""},{"location":"pages/integrations/kometa/#webhook-types","title":"Webhook Types","text":"<p>Info</p> <p>As of December 2022, this integration can send 5 webhooks. You can either activate them by ticking the on/off buttons or clicking on the gear icon where you can pic your notifications\u2019 colours as well.</p> <p></p> <ul> <li><code>Start/Complete</code>: Sends a notification every time Kometa runs and finishes its run.</li> <li><code>Updated</code>: Sends a notification whenever a collection changes, whether an item is added or removed. They can be sent at the same time as well. Notifiarr will show a maximum of 10 items and will sum up the rest according to their number.</li> <li><code>Created</code>: Sends a notification whenever a Kometa collection is created.</li> <li><code>Failure</code>: Sends a notification whenever there\u2019s an error inside your Kometa configs. For more information you would have to look at your Kometa logs. This notification is sent to the default notifiarr error channel.</li> <li><code>Deleted</code>: Sends a notification whenever a Kometa collection is removed.</li> <li><code>Updates</code>: Sends a notification whenever there's a new Kometa version available.</li> </ul>"},{"location":"pages/integrations/kometa/#client","title":"Client","text":"<p>The Notifiarr client on your local machine is not required for this integration to work. Kometa is webhook based.  It is highly recommended you add an API key specific to this integration since it is a 3rd party.</p>"},{"location":"pages/integrations/kometa/#kometa-config-file","title":"Kometa Config File","text":"<p>In order to activate Notifiarr on Kometa, you need to edit the yml config file and add the following:     </p><pre><code>notifiarr:\napikey: YOURKEY\n</code></pre><p></p> <p>Kometa is web-hook agnostic hence you need to instruct it where to send the webhooks. Inside the config file edit the following:     </p><pre><code>webhooks:\n  error: notifiarr\n  version: notifiarr\n  run_start: notifiarr\n  run_end: notifiarr\n  changes: notifiarr\n</code></pre><p></p> <p>It's always good to run a yml validator if you are not sure if your file will be a valid one. Then make sure to restart Kometa in order for new changes to take effect.</p>"},{"location":"pages/integrations/kometa/#misc","title":"Misc","text":"<p>If you would like Notifiarr to include your Collections\u2019 pictures and background, you can include <code>url_background</code> and/or <code>url_poster</code> inside your PMM library\u2019s yml file and notifiarr will grab them and include them within the notification, making them look nicer.</p>"},{"location":"pages/integrations/lidarr/","title":"Lidarr","text":""},{"location":"pages/integrations/lidarr/#lidarr","title":"Lidarr","text":"<p>Lidarr</p> <p>This integration allows for notifications from Lidarr using its built in Connection for Notifiarr. In Lidarr click Settings \u2192 Connect \u2192 Notifiarr</p>"},{"location":"pages/integrations/lidarr/#current-versions","title":"Current Versions","text":""},{"location":"pages/integrations/lidarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/lidarr/#triggers","title":"Triggers","text":"<ul> <li><code>Grab</code> - Receive a notification when media is initially grabbed (RSS or manual)</li> <li><code>Download</code> - Receive a notification when media new is successfully imported</li> <li><code>Update</code> - Receive a notification when the application updates</li> <li><code>Upgrade</code> - Receive a notification when upgraded media is successfully imported</li> <li><code>Failed</code> - Custom notification type based on previous grabs. If the system detects a grab for the same media with the same quality or better before the previous one was imported then it will set the previous one as failed</li> <li><code>Health</code> - Receive a notification when the application reports an issue</li> <li><code>Backup</code> - Receive a notification when a backup occurs</li> <li><code>Corrupt</code> - Monitor backups for corruption and size loss</li> <li><code>Deleted</code> - Be notified when media is deleted</li> </ul>"},{"location":"pages/integrations/lidarr/#channel","title":"Channel","text":"<ul> <li>Lidarr shares the *arr channel unless Granular Setup is used, clicking the link on the site will move to the channel setup location.</li> </ul>"},{"location":"pages/integrations/lidarr/#instructions","title":"Instructions","text":""},{"location":"pages/integrations/lidarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Lidarr.</p> <p></p> <ol> <li>set the notification color</li> <li>enable trigger in this example we used <code>album delete</code> and selected all available fields</li> </ol>"},{"location":"pages/integrations/lidarr/#example","title":"Example","text":"<p>here is a example if we enable all notification fields under the <code>grab</code> trigger</p> <p></p>"},{"location":"pages/integrations/lidarr/#errors","title":"Errors","text":""},{"location":"pages/integrations/lidarr/#400-bad-request","title":"400 Bad Request","text":"<p>Check and ensure you have a Grab or Download channel configured for Lidarr</p>"},{"location":"pages/integrations/lidarr/#401-unauthorized","title":"401 Unauthorized","text":"<p>Your APIKey is incorrect</p>"},{"location":"pages/integrations/logWatch/","title":"Log Watcher","text":""},{"location":"pages/integrations/logWatch/#log-watcher","title":"Log Watcher","text":"<p>aka File Watcher</p> <p>This allows the Notifiarr Client to watch (log) files for lines matching a regular expression. This is similar to tail -f file | grep string and allows you to send notifications when, for instance, a log file has a new line written that matches a regular expression.</p> <p>Coming Soon</p> <p>Info</p> <p>If creating a skip expression that contains <code>'</code> replace the apostrophe with <code>.?</code></p>"},{"location":"pages/integrations/logWatch/#regular-expressions-skip-expressions","title":"Regular Expressions &amp; Skip Expressions","text":"<p>Below are community suggested expressions</p> App Regular Expression Skip Expression Regular Explanation Skip Explanation Radarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v5.+\\])</code> <code>(?i)Movie with IMDBId|It will not be added|Invalid date found|Validation failed|An unhandled exception has occurred while executing the request.|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip movie add errors. Skip Indexer Feed invalid date Errors. Skip Errors   saying there was an Error Sonarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v4.+\\])</code> <code>(?i)Invalid date found|Validation failed|An unhandled exception has occurred while executing the request.|Unable to find exact quality|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip Indexer Feed invalid date Errors. Skip Errors saying there was an   Error. Skip unknown quality errors. Prowlarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v1.+\\])</code> <code>(?i)Validation failed|An unhandled exception has occurred while executing the request|[?:CinemaZ|PrivateHD](.a-z0-9/=&amp;?: )+404\\.NotFound|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip Errors saying there was an error. Skip Cinemaz/PrivateHD 404   (NotFound Errors) Readarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v1.+\\])</code> <code>(?i)Validation failed|An unhandled exception has occurred while executing the request.|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip Errors saying there was an error. Lidarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v2.+\\])</code> <code>(?i)Validation failed|An unhandled exception has occurred while executing the request.|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip Errors saying there was an error. PMM <code>(?i)(\\[ERROR\\])</code> <code>(?i)(Convert Error:|ID not found|TVDb Error: Name not found|Plex Error: No Items found in Plex|Trakt Error: No TVDb ID found for|TMDb Error: No Movie found for TMDb ID)</code> Notify on Errors Exclude common errors of unable to find/map ids or Plex searches returning no items."},{"location":"pages/integrations/mdblist/","title":"MDBList","text":""},{"location":"pages/integrations/mdblist/#mdblist","title":"MDBList","text":""},{"location":"pages/integrations/mdblist/#what-is-mdblist","title":"What is MDBList","text":"<p>MDBList is a 3rd party service that allows you to curate lists of shows and movies from various sources and can be found here, this integration is meant to do three things:</p> <ol> <li> <p>Allow for the ability to add individual shows or movies to Radarr or Sonarr using the add button on the show item on the MDBList website</p> </li> <li> <p>Sync lists created on MDBList into Sonarr and Radarr automatically. (this is currently not functioning and provides an error \u201cThe list was not automatically added to Sonarr because it does not support generic lists. You'll have to add it as a Trakt list and authenticate inside of Sonarr.\" which has been reported)</p> </li> <li>Sync a list of IDs from your local collection to MDBList which can be used within the filtering of a list, to exclude, for example, all collected shows or movies.</li> </ol>"},{"location":"pages/integrations/mdblist/#prerequisites","title":"Prerequisites:","text":"<ol> <li>Notifier setup with and working with Discord, Sonarr, and Radarr integrations</li> <li>Account with MDBList</li> <li>API key created on the Notfier website and assigned for use with MDBList, this can be generated and found in your profile, under the API Keys section</li> <li>Notifier API key allocated to the MDList integration added to your profile under preferences\\Notifiarr on MDList and enable \u201cAutomatically add lists to Radarr (if configured in Notifiarr)\"</li> </ol>"},{"location":"pages/integrations/mdblist/#steps-to-configure-integration","title":"Steps to configure integration:","text":"<ol> <li>From within the notifier website add the MDBList integration</li> <li>Configure your discord channels</li> <li>Enable \"Movie Add\" and \"Show Add\" by enabling the toggles as shown below.</li> </ol> <p>We now need to configure some additional settings from within the integration, to tell Notifiarr what settings to use when adding a movie or show.</p> <p>Edit the MDBList integration, scroll down to the Extra settings modify the add movie and add show settings and save:</p> <ol> <li>Add Movie/Shows to Radarr/Sonarr = Enabled</li> <li>Select the instance for notifiarr to use</li> <li>Add as monitored</li> <li>Search on add</li> <li>Minimum Availability</li> <li>Root folder</li> </ol> <p>When setup how you like, select save. When you now find a show or movie on MDBList, you have the option to add to Radarr and Sonarr, the above enables that. You will find it is added to the instance and a search takes place immediately.</p> <p></p>"},{"location":"pages/integrations/mediaRequests/","title":"Media Requests","text":""},{"location":"pages/integrations/mediaRequests/#media-requests","title":"Media Requests","text":"<p>Info</p> <p>This integration allows for requesting media via Discord.</p>"},{"location":"pages/integrations/mediaRequests/#currently-supported-applications","title":"Currently Supported Applications","text":"<ul> <li>Lidarr &gt;= v1</li> <li>Radarr &gt;= v4</li> <li>Readarr &gt;= v1</li> <li>Sonarr &gt;= v4</li> </ul>"},{"location":"pages/integrations/mediaRequests/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/mediaRequests/#triggers","title":"Triggers","text":"<ul> <li><code>Lidarr</code> - Enable Lidarr requests for an instance</li> <li><code>Radarr</code> - Enable Radarr requests for an instance</li> <li><code>Readarr</code>- Enable Readarr requests for an instance</li> <li><code>Sonarr</code>- Enable Sonarr requests for an instance</li> </ul>"},{"location":"pages/integrations/mediaRequests/#channel","title":"Channel","text":"<ul> <li>Pick the channel on your server to monitor for requests and send optional approval messages.</li> </ul>"},{"location":"pages/integrations/mediaRequests/#configuration","title":"Configuration","text":""},{"location":"pages/integrations/mediaRequests/#global-configuration","title":"Global configuration","text":"<p>Click the cog icon to open the configuration options for *arr apps.</p> <p></p> <ol> <li>The client to use for Media Requests</li> <li>Default *arr apps, opening them allows for individual configuration. Details below + button adds another instance of an *arr app. This also needs configured in the Notifiarr client conf (or ENV if you use that) Details below</li> <li>User based granular options</li> <li>Cleanup will remove all the ping/pong messages when adding things, leaving only the final message.</li> <li>Default keywords that control the bot, change them however you want.</li> </ol>"},{"location":"pages/integrations/mediaRequests/#multiple-instances","title":"Multiple instances","text":"<ol> <li>Add another instance of an *arr app to be used for anything related to the Notifiarr client.</li> </ol>"},{"location":"pages/integrations/mediaRequests/#app-settings","title":"App settings","text":"<ol> <li>Keyword the bot looks for when adding something. add movie batman for example.</li> <li>Settings used when adding media to *arr.</li> </ol>"},{"location":"pages/integrations/mediaRequests/#user-settings","title":"User settings","text":"<ol> <li>Discord users that can be used to assign permissions to</li> <li>User details</li> <li>App settings for the user</li> </ol>"},{"location":"pages/integrations/mediaRequests/#instructions","title":"Instructions","text":"<p>A basic overview on how to use the integration. This may change from time to time on the site without updating the screenshot here.</p>"},{"location":"pages/integrations/mediaRequests/#discord-troubleshooting","title":"Discord Troubleshooting","text":"<ul> <li>Type <code>cancel</code> to end any existing or stuck requests</li> <li>Type <code>help</code> to ensure the bot has access to the channel and can response</li> </ul>"},{"location":"pages/integrations/network/","title":"Network","text":""},{"location":"pages/integrations/network/#network","title":"network","text":"<p>Info</p> <p>This integration allows for notifications from the local Notifiarr client app to monitor network machines or services.</p>"},{"location":"pages/integrations/network/#network-overview","title":"Network Overview","text":"<ol> <li> <p>Reloads the integration.</p> </li> <li> <p>Opens the integrations settings.</p> </li> <li> <p>A list of everything you are monitoring with the Notifiarr client and show a green arrow if it is available or red arrow if it isn't.</p> </li> <li> <p>Opens up the Discord channel selection menu.</p> </li> </ol>"},{"location":"pages/integrations/network/#integration-settings-menu","title":"Integration Settings Menu","text":"<p>Click the cog icon to open the integration settings for the Network integration.</p> <p></p> <ol> <li> <p><code>Basic Instructions</code> - Gives you basic guidelines on how to setup this integration in the UI.</p> </li> <li> <p><code>Triggers</code> - Adjust which webhooks will send notifications to you.</p> </li> <li> <p><code>Integration Settings</code> - Allows the user to further configure the integration.</p> </li> <li> <p><code>Extra Settings</code> - Adjust the extra settings for this integration.</p> </li> <li> <p><code>Client Settings</code> - Allows the user to set the scanning interval.</p> </li> <li> <p><code>Custom Icon</code> - Assign another icon to notifications from this integration. (Subscriber Feature)</p> </li> <li> <p><code>Screenshots</code> - Shows the expected output once all correctly configured.</p> </li> <li> <p><code>Save</code> - Saves all your Configured settings and closes the Integration Settings Menu.</p> </li> </ol>"},{"location":"pages/integrations/network/#basic-instructions","title":"Basic Instructions","text":"<p>Detailed instructions are shown in the Client UI section of the wiki.</p> <p></p> <ol> <li> <p><code>Service Checks</code> - Allows the user to configure the destination service and type of check to be done. (Do not add any of your starr applications here)</p> </li> <li> <p><code>+</code> - Adds additional line items.</p> </li> </ol>"},{"location":"pages/integrations/network/#integration-settings","title":"Integration Settings","text":"<p>These are all the configurable options available to the user.</p>"},{"location":"pages/integrations/network/#triggers","title":"Triggers","text":"<p>Here you can select individual color schemes for each available trigger.</p> <p></p>"},{"location":"pages/integrations/network/#integration-settings-monitor-settings","title":"Integration Settings (Monitor Settings)","text":"<ol> <li> <p><code>Order</code> - This is the order of your services, you can't change this here. You will need to use <code>groups</code> (this is covered in the next section below).</p> </li> <li> <p><code>Ping</code> - Enable this to ping the selected role when the corresponding service goes into a down status.</p> </li> <li> <p><code>Pick a role</code> - This is where you can pick the role you want to receive the ping.</p> </li> <li> <p><code>Cron</code> - Enabling the cron will post a status message of the currently selected services. (this will follow the <code>Service Status (Cron)</code> interval that you set).</p> </li> <li> <p><code>Exclude Notify</code> - This will allow you to exclude the selected services from sending notifications about its status.</p> </li> <li> <p><code>Exclude Status</code> - This will exclude the service from showing on the <code>Status Page</code>.</p> </li> <li> <p><code>Services</code> - This tells you the name of your services.</p> </li> <li> <p><code>Type</code> - This tells you the type of service such as <code>HTTP</code>.</p> </li> <li> <p><code>Status</code> - This gives the services current status.</p> </li> </ol>"},{"location":"pages/integrations/network/#integration-settings-status-page","title":"Integration Settings (Status page)","text":"<ol> <li> <p><code>Status Page</code> - Enables a web page status overview of all your monitored items. Past events are also shown. (This requires a API set for the network integration)</p> </li> <li> <p><code>Website Status</code> - Include current status of websites being tracked with the Website Status integration.</p> </li> <li> <p><code>Customization (Patron Feature)</code> - Patrons/Subscribers can use this area to create service groups.</p> </li> <li> <p><code>Group name</code> - Here you can set the desired group name.</p> </li> <li> <p><code>Monitors</code> - Choose the services you want in the group.</p> </li> <li> <p><code>New group</code> - Here you can create another group, so for example if i wanted a group for all my download clients called <code>download_clients</code> and another group for my <code>Starr_applications</code> this is how we can achieve this.</p> </li> <li> <p><code>Trash can</code> - This will delete the group.</p> </li> </ol>"},{"location":"pages/integrations/network/#client-settings","title":"Client Settings","text":"<ol> <li> <p><code>Mute Client Down Alerts</code> - Select this to stop down alerts.</p> </li> <li> <p><code>Interval</code> - Select from the drop down list to select the check time in minutes. Or to disable all checks.</p> </li> <li> <p><code>Save Client Settings</code> - Make sure to save the client settings. (this is different from the top save button)</p> </li> </ol>"},{"location":"pages/integrations/network/#examples","title":"Examples","text":""},{"location":"pages/integrations/overseerr/","title":"Overseerr","text":""},{"location":"pages/integrations/overseerr/#overseerr","title":"Overseerr","text":""},{"location":"pages/integrations/overseerr/#integration-card","title":"Integration Card","text":"<ol> <li>Configuration</li> <li>Channel picker for the notifications</li> </ol>"},{"location":"pages/integrations/overseerr/#channel-picker","title":"Channel Picker","text":"<ol> <li>List of channels <code>Dropdown menu</code></li> <li>Test bot channel permissions</li> <li>Copy Channel to all</li> </ol>"},{"location":"pages/integrations/overseerr/#configuration","title":"Configuration","text":"<ol> <li>Notification triggers</li> <li>Notification Options</li> <li>Notification Color</li> </ol> <p>Note</p> <p>Be sure to save settings</p>"},{"location":"pages/integrations/overseerr/#instructions","title":"Instructions","text":"<ol> <li>Notifications Settings</li> <li>Webhook</li> <li>Enable the webhook agent</li> <li>Add the notification URL <code>https://notifiarr.com/api/v1/notification/overseerr/api_key_here</code> - Make sure to make a api key specific to overseerr</li> <li>Notification types you want to receive</li> <li>Save changes and enable the webhook</li> </ol>"},{"location":"pages/integrations/packagemanager/","title":"Package Manager","text":""},{"location":"pages/integrations/packagemanager/#package-manager","title":"Package manager","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/passthrough/","title":"Passthrough","text":""},{"location":"pages/integrations/passthrough/#passthrough","title":"Passthrough","text":"<p>Info</p> <p>This integration allows for notifications from custom scripts. This means you can create any script you want to run and add a webhook with the JSON payload below so you get notified about it.</p> <p>By sending them through this integration you can keep track of how many it has sent, when the last one was, status code, etc</p> <p></p>"},{"location":"pages/integrations/passthrough/#payload-field-breakdown","title":"Payload field breakdown","text":"<pre><code>notification: {\n    update: false, // Optional (Bool) - This is used to update an existing message with the same id, true will update existing &amp; false will always post new\n    name: \"Local App\", // Required (Str) - This is the name of the custom app/script, should be unique\n    event: \"0\" // Optional (Str) - This is used to pass a unique id for this notification if necessary\n},\ndiscord: {\n    color: \"\", // Optional (Str) - The color you want to use for the notification, 6 digit HTML color code\n    ping: {\n        pingUser: 123456789, // Optional (Int) - If you want to ping a user with this notification, add their discord id\n        pingRole: 0 // Optional (Int) - If you want to ping a role with this notification, add the role discord id\n    },\n    images: {\n        thumbnail: \"http://website.com/image.png\", //-- Optional (Str) - Add a valid URL to a thumbnail\n        image: \"http://website.com/image.png\" //-- Optional (Str) - Add a valid URL to an image that will be on the bottom of the notification\n    },\n    text: {\n        title: \"Notification Title\", // Optional (Str)\n        icon: \"http://website.com/image.png\", // Optional (Str) - Add a valid URL\n        content: \"\", //-- Optional - (Str) This text goes above the embed and is what is seen in toast notifications and wearables\n        description: \"\", // Optional if fields is used (Str) - This text goes between the title and the embeds\n        fields: [{ // Optional if description is used (List) - This is a list of items to put in the notification, 25 max fields allowed\n            title: \"Field\",\n            text: \"Field Text\",\n            inline: false\n        }, {\n            title: \"Field\", // (Str)\n            text: \"Field Text\", // (Str)\n            inline: false // (Bool)\n        }],\n        footer: \"Footer text\" // Optional (Str)\n    },\n    ids: {\n        channel: 1234567890 // Required (Int) - This is the channel to send the notification to on your server\n    }\n}\n</code></pre>"},{"location":"pages/integrations/passthrough/#payload-example-1","title":"Payload Example 1","text":"<ul> <li>This would send a new notification</li> </ul> <pre><code>{\n    \"notification\": {\n        \"update\": false,\n        \"name\": \"1:1 App\",\n        \"event\": \"12345\"\n    },\n    \"discord\": {\n        \"color\": \"FFFFFF\",\n        \"ping\": {\n            \"pingUser\": 0,\n            \"pingRole\": 0\n        },\n        \"images\": {\n            \"thumbnail\": \"\",\n            \"image\": \"\"\n        },\n        \"text\": {\n            \"title\": \"Notification Title\",\n            \"icon\": \"\",\n            \"content\": \"Content of the notification here\",\n            \"description\": \"Body of the notification here\",\n            \"fields\": [],\n            \"footer\": \"Footer Text\"\n        },\n        \"ids\": {\n            \"channel\": 735481457153277994\n        }\n    }\n}\n</code></pre>"},{"location":"pages/integrations/passthrough/#payload-example-2","title":"Payload Example 2","text":"<ul> <li>This would update an existing notification</li> </ul> <pre><code>{\n    \"notification\": {\n        \"update\": true,\n        \"name\": \"Update App\",\n        \"event\": \"\"\n    },\n    \"discord\": {\n        \"color\": \"000000\",\n        \"ping\": {\n            \"pingUser\": 543077981707436033,\n            \"pingRole\": 0\n        },\n        \"images\": {\n            \"thumbnail\": \"https://notifiarr.com/images/logo/notifiarr.png\",\n            \"image\": \"\"\n        },\n        \"text\": {\n            \"title\": \"Notification Title\",\n            \"icon\": \"\",\n            \"content\": \"Content of the notification here\",\n            \"description\": \"Body of the notification here\",\n            \"fields\": [{\n                \"title\": \"Field Title\",\n                \"text\": \"Inline true\",\n                \"inline\": true\n            }, {\n                \"title\": \"Field Title\",\n                \"text\": \"Inline true\",\n                \"inline\": true\n            }, {\n                \"title\": \"Field Title\",\n                \"text\": \"Inline false\",\n                \"inline\": false\n            }],\n            \"footer\": \"\"\n        },\n        \"ids\": {\n            \"channel\": 735481457153277994\n        }\n    }\n}\n</code></pre>"},{"location":"pages/integrations/passthrough/#python-example-usage","title":"Python Example Usage","text":"<pre><code>import json\nimport subprocess\n\nNOTIFIARR_PY = '/path/to/notifiarr.py'\n\n....\n\nwebhook = \"python \" + NOTIFIARR_PY + \" -e \\\" Errors\\\" -c 631827062348512345 -m \\\"FFA500\\\" -t \\\"Error (\"+ str(counter) +\"/\"+ str(totalErrors) +\")\\\" -b \\\"URLs found with errors\\\" -g \\\"\" + json.dumps(inlineFields).replace('\"', r'\\\"') + \"\\\" -f \\\"\" + json.dumps(singleFields).replace('\"', r'\\\"') + \"\\\" -a \\\"https://notifiarr.com/images/logo/notifiarr.png\\\" -z \\\"Passthrough Integration\\\"\"\nsubprocess.call(webhook)\n</code></pre>"},{"location":"pages/integrations/passthrough/#powershell-example-usage","title":"Powershell Example Usage","text":"<pre><code>$payload = @{\n    notification = @{\n        update = $false\n        name = \"My Notifiarr App\"\n        event = \"0\"\n    }\n    discord = @{\n        color = \"00FF00\"\n        ping = @{\n            pingUser = $PING_USER_ID # Replace with your Discord user ID\n            pingRole = $PING_ROLE_ID # Replace with your Discord role ID\n        }\n        images = @{\n            thumbnail = \"https://gh.notifiarr.com/images/icons/notifiarr.png\"\n            image = \"https://gh.notifiarr.com/images/icons/notifiarr.png\"\n        }\n        text = @{\n            title = \"My Notifiarr Title\"\n            icon = \"https://gh.notifiarr.com/images/icons/notifiarr.png\"\n            content = \"My Notifiarr Content\"\n            description = \"My Notifiarr Description\"\n            fields = @(\n            @{ title = 'Field 1'\n                text = 'This is a normal field'\n                inline = $false\n                }\n            @{ title = 'Field 2'\n                text = 'This is an inline field'\n                inline = $true\n                }\n            @{ title = 'Field 3'\n                    text = \"* **This**\n                        * *is*\n                            * ~~a~~\n                                * __*Markdown*__\n                                    * ~~*field*~~\"\n                inline = $false\n                }\n            )\n            footer = \"My Notifiarr Footer Text\"\n        }\n        ids = @{\n            channel = $DISCORD_CHANNEL_ID # Replace with your Discord channel ID\n        }\n    }\n}\n\n    $jsonPayload = $payload | ConvertTo-Json -Depth 10 -Compress\n\n    $params = @{\n        Uri = \"https://notifiarr.com/api/v1/notification/passthrough/$NOTIFIARR_APIKEY\" # Replace with your Notifiarr API key\n        Method = \"POST\"\n        Body = $jsonPayload\n        ContentType = \"application/json\"\n        Headers = @{\n            \"Accept\" = \"text/plain\"\n        }\n    }\n\n    $response = Invoke-RestMethod @params\n\n    if ($request.details.response -eq 'Pass through payload processed.'){\n        Write-Host \"Notification sent successfully!\" -ForegroundColor Green\n    } else {\n        Write-Warning \"Failed to send notification.\"\n        Write-Host \"Response: $($response.result.details)\"\n    }\n</code></pre>"},{"location":"pages/integrations/passthrough/#notifiarr-script","title":"Notifiarr script","text":"<ul> <li>Can be called from any script (example above)</li> </ul>"},{"location":"pages/integrations/passthrough/#python","title":"Python","text":"<pre><code>import argparse\nimport json\nimport requests\n\n#\n# Example\n# python notifiarr.py -e \"System Backup\" -c 735481457153277994 -m \"FFA500\" -t \"Backup Failed\" -f \"[{\\\"Reason\\\": \\\"Permissions error\\\"}, {\\\"Severity\\\": \\\"Critical\\\"}]\" -a \"https://notifiarr.com/images/logo/notifiarr.png\" -z \"Passthrough Integration\"\n# python notifiarr.py -e \"System Backup\" -c 735481457153277994 -m \"FFA500\" -t \"Backup Failed\" -b \"Critical permissions error\" -a \"https://notifiarr.com/images/logo/notifiarr.png\" -z \"Passthrough Integration\"\n#\n\n# The apikey from Passthrough integration (located in Basic Instructions)\nNOTIFIARR_APIKEY = ''\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Example: python notifiarr.py -e \"System Backup\" -c 735481457153277994 -m \"FFA500\" -t \"Backup Failed\" -f \"[{\\\\\"Reason\\\\\": \\\\\"Permissions error\\\\\"}, {\\\\\"Severity\\\\\": \\\\\"Critical\\\\\"}]\" -g \"[{\\\\\"Reason\\\\\": \\\\\"Permissions error\\\\\"}, {\\\\\"Severity\\\\\": \\\\\"Critical\\\\\"}]\" -a \"https://notifiarr.com/images/logo/notifiarr.png\" -z \"Passthrough Integration\"')\n    parser.add_argument('-e', '--event', dest='event', help='notification type (rclone for example)', type=str, required=True, metavar='')\n    parser.add_argument('-c', '--channel', dest='channel', help='valid discord channel id', type=int, required=True, metavar='')\n    parser.add_argument('-t', '--title', dest='title', help='text title of message (rclone started for example)', type=str, required=True, metavar='')\n    parser.add_argument('-b', '--body', dest='body', help='if fields is not used, text body for message', type=str, metavar='')\n    parser.add_argument('-f', '--fields', dest='fields_not_inline', help='if body is not used, valid JSON list of fields [{title,text},{title,text}] max 25 list items (not inline)', type=str, metavar='')\n    parser.add_argument('-g', '--inline', dest='fields_inline', help='if body is not used, valid JSON list of fields [{title,text},{title,text}] max 25 list items (inline)', type=str, metavar='')\n    parser.add_argument('-z', '--footer', dest='footer', help='text footer of message', default='', type=str, metavar='')\n    parser.add_argument('-a', '--avatar', dest='avatar', help='valid url to image', default='', type=str, metavar='')\n    parser.add_argument('-i', '--thumbnail', dest='thumbnail', help='valid url to image', default='', type=str, metavar='')\n    parser.add_argument('-m', '--color', dest='color', help='6 digit html code for the color', default='', type=str, metavar='')\n    parser.add_argument('-u', '--ping-user', dest='ping_user', help='valid discord user id', default=0, type=int, metavar='')\n    parser.add_argument('-r', '--ping-role', dest='ping_role', help='valid discord role id', default=0, type=int, metavar='')\n    args = parser.parse_args()\n\n    if not NOTIFIARR_APIKEY:\n        raise Exception('ERROR: Edit the script and add your Notifiarr apikey')\n\n    if not args.body and not args.fields_not_inline and not args.fields_inline:\n        raise Exception('ERROR: Either -b/--body or -f/--fields or -g/--inline is required')\n\n    inlineFields = []\n    singleFields = []\n\n    if args.fields_inline:\n        inlineFields = [{'title': t, 'text': x, 'inline': True} for f in json.loads(args.fields_inline) for t, x in f.items()] if args.fields_inline else []\n\n    if args.fields_not_inline:\n        singleFields = [{'title': t, 'text': x, 'inline': False} for f in json.loads(args.fields_not_inline) for t, x in f.items()] if args.fields_not_inline else []\n\n    fields = inlineFields + singleFields\n\n    # BUILD THE TEMPLATE\n    notifiarr_payload = {\n        'notification': {\n            'update': False,\n            'name': args.event,\n            'event': 0\n        },\n        'discord': {\n            'color': args.color,\n            'ping': {\n                'pingUser': args.ping_user,\n                'pingRole': args.ping_role\n            },\n            'images': {\n                'thumbnail': args.thumbnail,\n                'image': ''\n            },\n            'text': {\n                'title': args.title,\n                'icon': args.avatar,\n                'content': '',\n                'description': args.body,\n                'fields': fields,\n                'footer': args.footer\n            },\n            'ids': {\n                'channel': args.channel\n            }\n        }\n    }\n\n    # PUSH THE WEBHOOK\n    r = requests.post(f'https://notifiarr.com/api/v1/notification/passthrough/{NOTIFIARR_APIKEY}', data=json.dumps(notifiarr_payload), headers={'Content-type': 'application/json', 'Accept': 'text/plain'})\n    #print(r.text)\n</code></pre>"},{"location":"pages/integrations/passthrough/#powershell","title":"Powershell","text":"<ul> <li>This is a sample function meant to be reused in one or more scripts. It allows you to send payload fields as parameters, and it will build the payload for you.</li> <li>It contains a helper function to validate the fields you pass in, and it will throw an error if they are not valid.</li> </ul> <pre><code>function Send-NotifiarrPassthroughNotification {\n    &lt;#\n    .SYNOPSIS\n    Sends a Discord notification using a third-party passthrough integration.\n\n    .DESCRIPTION\n    This function sends a Discord notification by constructing the payload and sending it to the specified API endpoint.\n    It validates high-level parameters and constructs the notification payload with appropriate formatting.\n    The function supports a wide range of customization options including colors, fields, images, and user mentions.\n\n    .PARAMETER AppName\n    The name of the custom app/script that is sending the notification. Should be unique and non-empty.\n\n    .PARAMETER ChannelId\n    The Discord channel ID to send the notification to. Must be a numeric string.\n\n    .PARAMETER Color\n    The color of the notification embed. Can be a predefined name (\"Success\", \"Warning\", \"Error\") or a custom HEX color code without the # prefix.\n\n    .PARAMETER Content\n    Content text that appears above the embed and is seen in toast notifications.\n\n    .PARAMETER Description\n    The description text of the notification embed. Supports Discord markdown formatting.\n\n    .PARAMETER Event\n    A unique event ID for the notification. Used for message deduplication or tracking.\n\n    .PARAMETER Footer\n    The footer text to display at the bottom of the notification embed.\n\n    .PARAMETER Fields\n    A hashtable or array of hashtables representing fields to include in the notification embed.\n    Each field must have 'title', 'text', and 'inline' keys. Maximum of 25 fields allowed.\n\n    .PARAMETER Icon\n    The URL of the icon to display in the notification. Must be a valid HTTP/HTTPS URL.\n\n    .PARAMETER ImageUrl\n    The URL of the main image to display in the notification embed. Must be a valid HTTP/HTTPS URL.\n\n    .PARAMETER PingRole\n    The Discord role ID to ping with the notification. Must be a numeric string.\n\n    .PARAMETER PingUser\n    The Discord user ID to ping with the notification. Must be a numeric string.\n\n    .PARAMETER ThumbnailUrl\n    The URL of the thumbnail image to display in the notification embed. Must be a valid HTTP/HTTPS URL.\n\n    .PARAMETER Title\n    The title of the notification embed.\n\n    .PARAMETER Update\n    Whether to update an existing message with the same ID instead of sending a new one. Defaults to $false.\n\n    .PARAMETER WebhookUrl\n    The API endpoint URL to send the notification to. Must be a valid HTTP/HTTPS URL.\n\n    .OUTPUTS\n    [PSCustomObject] An object with Status, Message, and ErrorDetail properties indicating the result of the operation.\n\n    .EXAMPLE\n    Send-NotifiarrPassthroughNotification -AppName \"Monitoring\" -ChannelId \"123456789012345678\" -WebhookUrl \"https://api.example.com/webhook\" -Title \"Alert\" -Description \"System is running low on disk space\" -Color \"Warning\"\n\n    .EXAMPLE\n    $fields = @(\n        @{ title = \"Server\"; text = \"PROD-WEB01\"; inline = $true },\n        @{ title = \"Status\"; text = \"Online\"; inline = $true }\n    )\n    Send-NotifiarrPassthroughNotification -AppName \"StatusChecker\" -ChannelId \"123456789012345678\" -WebhookUrl \"https://api.example.com/webhook\" -Fields $fields -Color \"Success\"\n\n    .LINK\n    https://notifiarr.wiki/en/Website/Integrations/Passthrough\n\n    .NOTES\n    This function cleans up sensitive information from memory after execution for security.\n    #&gt;\n    [CmdletBinding(SupportsShouldProcess)]\n    [OutputType([PSCustomObject])]\n    param (\n        [Parameter(Mandatory = $true, Position = 0)]\n        [ValidateNotNullOrEmpty()]\n        [string]\n        $AppName,\n\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [ValidatePattern('^\\d+$')]\n        [string]\n        $ChannelId,\n\n        [Parameter(Mandatory = $false)]\n        [string]\n        $Color,\n\n        [Parameter(Mandatory = $false)]\n        [string]\n        $Content,\n\n        [Parameter(Mandatory = $false)]\n        [string]\n        $Description,\n\n        [Parameter(Mandatory = $false)]\n        [string]\n        $Event,\n\n        [Parameter(Mandatory = $false)]\n        [string]\n        $Footer,\n\n        [Parameter(Mandatory = $false)]\n        [object]\n        $Fields,\n\n        [Parameter(Mandatory = $false)]\n        [ValidatePattern('^https?://.+')]\n        [string]\n        $Icon,\n\n        [Parameter(Mandatory = $false)]\n        [ValidatePattern('^https?://.+')]\n        [string]\n        $ImageUrl,\n\n        [Parameter(Mandatory = $false)]\n        [ValidatePattern('^\\d+$')]\n        [string]\n        $PingRole,\n\n        [Parameter(Mandatory = $false)]\n        [ValidatePattern('^\\d+$')]\n        [string]\n        $PingUser,\n\n        [Parameter(Mandatory = $false)]\n        [ValidatePattern('^https?://.+')]\n        [string]\n        $ThumbnailUrl,\n\n        [Parameter(Mandatory = $false)]\n        [string]\n        $Title,\n\n        [Parameter(Mandatory = $false)]\n        [bool]\n        $Update = $false,\n\n        [Parameter(Mandatory = $true)]\n        [ValidatePattern('^https?://.+')]\n        [string]\n        $WebhookUrl\n    )\n\n    begin {\n        # Initialize tracking variables for payload construction\n        $processedColor = $null\n        $validatedFields = $null\n\n        # Initialize the result object with properties for standardized returns\n        $result = [PSCustomObject]@{\n            Status      = $null\n            Message     = $null\n            ErrorDetail = $null\n        }\n\n        # Map predefined color names to HEX codes for easier user experience\n        $colorMap = @{\n            Success = \"00FF00\" # Green\n            Warning = \"FFFF00\" # Yellow\n            Error   = \"FF0000\" # Red\n        }\n\n        # Build the base notification payload structure with required elements\n        $payload = @{\n            notification = [ordered]@{\n                update = $Update\n                name   = $AppName\n            }\n            discord      = [ordered]@{\n                ids = @{\n                    channel = $ChannelId\n                }\n            }\n        }\n    }\n\n    process {\n        if ($PSCmdlet.ShouldProcess(\"Discord Channel ID: $ChannelId\", \"Send Notification\")) {\n            try {\n                # Process and validate fields if provided\n                if ($PSBoundParameters.ContainsKey('Fields')) {\n                    Write-Verbose \"Fields parameter was provided, performing validation.\"\n                    if ($Fields -is [hashtable]) {\n                        Write-Verbose \"Fields parameter is a single hashtable, converting to array.\"\n                        $Fields = @($Fields)\n                    }\n                    $validatedFields = Confirm-NotifiarrPassthroughFields -Fields $Fields\n                }\n\n                # Process color parameter if provided\n                if ($PSBoundParameters.ContainsKey('Color')) {\n                    Write-Verbose \"Color parameter was provided.\"\n                    if ($colorMap.ContainsKey($Color)) {\n                        Write-Verbose \"Using predefined color: $Color.\"\n                        $processedColor = $colorMap[$Color]\n                    }\n                    elseif ($Color -match '^[0-9A-Fa-f]{6}$') {\n                        Write-Verbose \"Using custom HEX color: $Color.\"\n                        $processedColor = $Color\n                    }\n                    else {\n                        Write-Verbose \"Invalid color format: '$Color'. Using default (null).\"\n                    }\n                }\n\n                # Add optional notification parameters\n                if ($PSBoundParameters.ContainsKey('Event')) {\n                    $payload.notification['event'] = $Event\n                }\n\n                # Build discord object sections\n                # Add color if specified\n                if ($processedColor) {\n                    $payload.discord['color'] = $processedColor\n                }\n\n                # Add ping object if any ping parameters are specified\n                if ($PSBoundParameters.ContainsKey('PingUser') -or $PSBoundParameters.ContainsKey('PingRole')) {\n                    $payload.discord['ping'] = @{}\n\n                    if ($PSBoundParameters.ContainsKey('PingUser')) {\n                        $payload.discord.ping['pingUser'] = $PingUser\n                    }\n                    if ($PSBoundParameters.ContainsKey('PingRole')) {\n                        $payload.discord.ping['pingRole'] = $PingRole\n                    }\n                }\n\n                # Add images object if any image parameters are specified\n                if ($PSBoundParameters.ContainsKey('ThumbnailUrl') -or $PSBoundParameters.ContainsKey('ImageUrl')) {\n                    $payload.discord['images'] = @{}\n                    if ($PSBoundParameters.ContainsKey('ThumbnailUrl')) {\n                        $payload.discord.images['thumbnail'] = $ThumbnailUrl\n                    }\n                    if ($PSBoundParameters.ContainsKey('ImageUrl')) {\n                        $payload.discord.images['image'] = $ImageUrl\n                    }\n                }\n\n                # Build text object with all text-related parameters\n                $text = @{}\n                if ($PSBoundParameters.ContainsKey('Title')) {\n                    Write-Verbose \"Adding title parameter to text object.\"\n                    $text['title'] = $Title\n                }\n                if ($PSBoundParameters.ContainsKey('Icon')) {\n                    Write-Verbose \"Adding icon parameter to text object.\"\n                    $text['icon'] = $Icon\n                }\n                if ($PSBoundParameters.ContainsKey('Content')) {\n                    Write-Verbose \"Adding content parameter to text object.\"\n                    $text['content'] = $Content\n                }\n                if ($PSBoundParameters.ContainsKey('Description')) {\n                    Write-Verbose \"Adding description parameter to text object.\"\n                    $text['description'] = $Description\n                }\n                if ($validatedFields) {\n                    Write-Verbose \"Adding fields parameter to text object.\"\n                    $text['fields'] = @($validatedFields)\n                }\n                if ($PSBoundParameters.ContainsKey('Footer')) {\n                    Write-Verbose \"Adding footer parameter to text object.\"\n                    $text['footer'] = $Footer\n                }\n\n                # Add text object if any text parameters were specified\n                if ($text.Count -gt 0) {\n                    $payload.discord['text'] = $text\n                }\n\n                # Convert the payload to JSON for transmission\n                $jsonPayload = $payload | ConvertTo-Json -Depth 10 -Compress\n\n                $jsonPayload\n\n                Write-Verbose \"Sending payload to webhook: $WebhookUrl\"\n\n                # Send the notification via REST API\n                $response = Invoke-RestMethod -Uri $WebhookUrl -Method Post -Body $jsonPayload -ContentType 'application/json' -StatusCodeVariable 'statusCode' -ErrorAction Stop -SkipHttpErrorCheck\n\n                # Process the API response and update result object\n                if ($response.result -ne 'success') {\n                    $result.Status = $false\n                    $result.Message = \"Failed to send notification: $($response.reason)\"\n                    $result.ErrorDetail = $response | ConvertTo-Json -Compress\n                    Write-Warning \"$($MyInvocation.MyCommand.Name) - Failed to send notification.\"\n                }\n                else {\n                    $result.Status = $true\n                    $result.Message = $response.details\n                    Write-Verbose \"$($MyInvocation.MyCommand.Name) - Notification sent successfully.\"\n                }\n            }\n            catch {\n                # Handle errors and populate the result object with error details\n                $result.Status = $false\n                $result.Message = \"Failed to send notification due to an exception\"\n                $result.ErrorDetail = $_.Exception.Message\n\n                Write-Warning \"$($MyInvocation.MyCommand.Name) - Failed to send notification\"\n            }\n        }\n    }\n\n    end {\n        $result\n    }\n}\n\nfunction Confirm-NotifiarrPassthroughFields {\n    &lt;#\n    .SYNOPSIS\n    Validates field objects for Discord notifications.\n\n    .DESCRIPTION\n    This function validates that each field in the provided array meets the requirements for Discord notification fields.\n    Each field must be a hashtable with 'title', 'text', and 'inline' keys. The function ensures that there are no more than 25 fields\n    and that each field contains properly typed values.\n\n    .PARAMETER Fields\n    An array of hashtables, each representing a field with 'title' (string), 'text' (string), and 'inline' (boolean) keys.\n    Maximum of 25 fields are allowed per Discord API limitations.\n\n    .OUTPUTS\n    [array] The validated fields array, unchanged if all validation passes.\n\n    .EXAMPLE\n    $fields = @(\n        @{ title = \"Field 1\"; text = \"Field 1 Text\"; inline = $false },\n        @{ title = \"Field 2\"; text = \"Field 2 Text\"; inline = $true }\n    )\n    $validatedFields = Confirm-NotifiarrPassthroughFields -Fields $fields\n\n    .NOTES\n    This function performs strict validation and will throw exceptions for any validation failures.\n    #&gt;\n    [CmdletBinding()]\n    [OutputType([array])]\n    param (\n        [Parameter(Mandatory = $true)]\n        [array]\n        $Fields\n    )\n\n    # Ensure the fields array does not exceed Discord's maximum limit of 25 items\n    if ($Fields.Count -gt 25) {\n        throw \"The fields array cannot contain more than 25 items.\"\n    }\n\n    # Validate each field in the array meets all requirements\n    for ($i = 0; $i -lt $Fields.Count; $i++) {\n        $field = $Fields[$i]\n\n        # Ensure the field is a hashtable as required for proper processing\n        if (-not ($field -is [hashtable])) {\n            throw \"Field #$($i + 1) must be a hashtable.\"\n        }\n\n        # Check for the presence of the 'title' key and validate its type\n        if (-not $field.ContainsKey('title')) {\n            throw \"Field #$($i + 1) is missing the 'title' key.\"\n        }\n        if (-not ($field.title -is [string])) {\n            throw \"Field #$($i + 1) has an invalid 'title'. Expected a string but found $($field.title.GetType().Name).\"\n        }\n\n        # Check for the presence of the 'text' key and validate its type\n        if (-not $field.ContainsKey('text')) {\n            throw \"Field #$($i + 1) is missing the 'text' key.\"\n        }\n        if (-not ($field.text -is [string])) {\n            throw \"Field #$($i + 1) has an invalid 'text'. Expected a string but found $($field.text.GetType().Name).\"\n        }\n\n        # Check for the presence of the 'inline' key and validate its type\n        if (-not $field.ContainsKey('inline')) {\n            throw \"Field #$($i + 1) is missing the 'inline' key.\"\n        }\n        if (-not ($field.inline -is [bool])) {\n            throw \"Field #$($i + 1) has an invalid 'inline'. Expected a boolean but found $($field.inline.GetType().Name).\"\n        }\n    }\n\n    # Always return a proper array, even if only one element\n    if ($Fields.Count -eq 1) {\n        # Force return as array with only one element\n        @($Fields[0])\n    }\n    else {\n        # Return the validated fields array - no modification needed if validation passed\n        $Fields\n    }\n}\n\n    # Initialize notification parameters with standard values\n    $notificationParams = @{\n        AppName      = 'My Notifiarr App'\n        ChannelId    = 1234567891011121314 # Replace with your Discord channel ID\n        Color = 'Success'\n        Content = 'My Notifiarr Content'\n        Description = 'My Notifiarr Description'\n        Footer       = \"My Notifiarr Footer Text\"\n        Fields = @(\n            @{ title = 'Field 1'\n                text = 'This is a normal field'\n                inline = $false\n                }\n            @{ title = 'Field 2'\n                text = 'This is an inline field'\n                inline = $true\n                }\n            @{ title = 'Field 3'\n                    text = \"* **This**\n                        * *is*\n                            * ~~a~~\n                                * __*Markdown*__\n                                    * ~~*field*~~\"\n                inline = $false\n                }\n        )\n        Icon         = 'https://gh.notifiarr.com/images/icons/notifiarr.png'\n        ImageUrl     = 'https://gh.notifiarr.com/images/icons/notifiarr.png'\n        PingRole     = 1234567891011121314 # Replace with your Discord role ID\n        PingUser     = 1234567891011121314 # Replace with your Discord user ID\n        ThumbnailUrl = \"https://gh.notifiarr.com/images/icons/notifiarr.png\"\n        Title        = 'My Notifiarr Title'\n        WebhookUrl   = \"https://notifiarr.com/api/v1/notification/passthrough/$NOTIFIARR_APIKEY\" # Replace with your Notifiarr API key\n    }\n\n        # Send the notification using the function\n        $result = Send-NotifiarrPassthroughNotification @notificationParams\n\n        # Check the result and take action based on success or failure\n        if ($result.Status) {\n            Write-Host \"Notification sent successfully!\"\n        }\n        else {\n            Write-Warning \"Failed to send notification: $($result.Message)\"\n            if ($result.ErrorDetail) {\n                Write-Warning \"Error details: $($result.ErrorDetail)\"\n            }\n        }\n</code></pre>"},{"location":"pages/integrations/persistent/","title":"Persistent","text":""},{"location":"pages/integrations/persistent/#persistent","title":"Persistent","text":"<p>Info</p> <p>This integration allows for notifications to always stay in the channel. Anytime someone posts, it will remove its previous post and re-add it to the bottom of the channel.</p>"},{"location":"pages/integrations/persistent/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Active</code> - Enable notifications</li> </ul> </li> </ol>"},{"location":"pages/integrations/persistent/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Persistent messages.</p> <p></p> <ul> <li>Pick the channel you want to add a persistent message to and give it a title with a message.</li> </ul>"},{"location":"pages/integrations/plex/","title":"Plex","text":""},{"location":"pages/integrations/plex/#plex","title":"Plex","text":"<p>Info</p> <p>This integration allows for notifications from Plex. Keep in mind this utilizes the Notifiarr client</p>"},{"location":"pages/integrations/plex/#current-version","title":"Current Version","text":"<p>Reaction example:</p> <p></p>"},{"location":"pages/integrations/plex/#plex-trigger-overview","title":"Plex Trigger Overview","text":"<ol> <li>Opens the integrations settings.</li> <li>Reloads the integration.</li> <li>Triggers<ul> <li><code>Play</code> - Notify when a user starts playing media.</li> <li><code>Resume</code> - Notify when a user resumes playing media.</li> <li><code>Finished</code> - Notify when a user finishes playing media.</li> <li><code>Rating</code> - Notify when a user rates a movie/show.</li> <li><code>New Item</code> - Notify when a new item is added to plex (requires push notifications enabled in Plex - Server -&gt; General).</li> <li><code>Sessions</code> - Get notifications about streaming sessions and minimal server information.</li> <li><code>Devices</code> - Notify when a new device is added.</li> <li><code>Backup</code> - Notify when a backup was completed.</li> <li><code>Corruption</code> - Notify when database corruption is detected.</li> </ul> </li> <li>Discord Channels<ul> <li>Channel(s) to use for sending plex notifications.</li> </ul> </li> </ol>"},{"location":"pages/integrations/plex/#integration-settings-menu","title":"Integration Settings Menu","text":"<p>Click the cog icon to open the integration settings for Plex.</p> <p></p> <ol> <li><code>Basic Instructions</code> - Gives you basic guidelines on how to setup this integration in the UI.</li> <li><code>Triggers</code> - Adjust which webhooks will send notifications to you.</li> <li><code>Integration Settings</code> - Allows the user to further configure the integration.</li> <li><code>Extra Settings</code> - Adjust the extra settings for this integration.</li> <li><code>Client Settings</code> - Allows the user to set the scanning interval.</li> <li><code>Custom Icon</code> - Assign another icon to notifications from this integration. (Subscriber Feature)</li> <li><code>Content Lines</code> - Add a message to the top of notifications for wearable/toast purposes.</li> <li><code>Screenshots</code> - Shows the expected output once all correctly configured.</li> <li><code>Save</code> - Saves all your Configured settings and closes the Integration Settings Menu.</li> </ol>"},{"location":"pages/integrations/plex/#triggers","title":"Triggers","text":"<ol> <li>Notification triggers.</li> <li>Notification fields - Select various fields to be displayed in the notification.</li> <li>Notification colors.</li> </ol>"},{"location":"pages/integrations/plex/#integration-settings","title":"Integration Settings","text":"<p>Here you can adjust the settings for this integration.</p>"},{"location":"pages/integrations/plex/#userdevice","title":"User/Device","text":"<ol> <li>Table of all users and devices. Uncheck the notify box to not receive notifications from the specific user/device.</li> <li>Keyword for having the bot display what is currently streaming on your server.</li> </ol>"},{"location":"pages/integrations/plex/#session-management","title":"Session Management","text":"<ol> <li><code>Scope</code> - Kill all sessions from a given user/device (Maybe a user shared their login with someone else).</li> <li><code>Rules</code> - Kill the session after rules have been met.</li> <li><code>Action</code> - Notify when sessions are automatically killed.</li> </ol>"},{"location":"pages/integrations/plex/#library-trash","title":"Library Trash","text":"<p>Note: You may see the following error when tab is loading: <code>Error fetching plex library list.</code> Ensure the client settings are saved and try again.</p> <ol> <li><code>Trigger</code> - Keyword to trigger a cleanup outside the set frequency and time</li> <li><code>Library</code> - Check which libraries you want the automated trash cleanup</li> <li><code>Trash Settings</code> - The time and frequency of the automated cleanup<ul> <li><code>Frequency</code> - How frequently this should try to clear the trash.</li> <li><code>Time</code> - What time of day this should try to clear the trash.</li> <li><code>Max</code> - Do not empty if trash items is more than this number (in case of a drive failure for example).</li> <li><code>Copy</code> - Copy applied settings to all libraries. Note: This only appears on the first listed library.</li> </ul> </li> <li><code>Times</code> - The times for the library</li> </ol>"},{"location":"pages/integrations/plex/#extra-settings","title":"Extra Settings","text":"<p>Additional settings such as automatically unmonitor an episode or movie once a user has watched it. You are able to select multiple users by holding down ctrl and highlighting the names. </p>"},{"location":"pages/integrations/plex/#client-settings","title":"Client Settings","text":"<ol> <li><code>Account Map</code> - This will map user emails in your notifications to a user friendly name. </li> <li><code>Plex and Tautulli Account Map</code> - Examples of mapped accounts.</li> <li><code>Track Play/Resume sessions</code> - Check this if you want to get Play/Resume notifications but do not have a Plex Pass.</li> <li><code>Finished Movie</code> - This is a percentage setting for when to send a finished playing movie notification, 0 to disable, 70 min and 95-98 suggested.</li> <li><code>Finished Episode</code> - This is a percentage setting for when to send a finished playing episode notification, 0 to disable, 70 min and 95-98 suggested.</li> <li><code>Include Activity</code> - This is a used to send speed, transcode, container, etc information in plex notifications.</li> <li><code>Activity Delay</code> - This is how long to wait after media is started before getting the session, at least 10-12 seconds is needed.</li> <li><code>Cooldown</code> - Minimum time between notifications to ensure duplicates are not sent (such as media.play and playback.started)</li> <li><code>Interval</code> - This is how often to send a notification for the Plex Sessions trigger, nothing sends if there is no media playing or paused. </li> </ol>"},{"location":"pages/integrations/plex/#custom-icon","title":"Custom Icon","text":"<p>Assign another icon to notifications from this integration (Subscriber Feature) </p>"},{"location":"pages/integrations/plex/#content-lines","title":"Content Lines","text":"<p>Content lines are small previews of the full notification for toast/push notifications. Great for wearables. </p>"},{"location":"pages/integrations/plex/#instructions","title":"Instructions","text":"<p>This integration requires the Notifiarr client to be running locally. You can get it from Github. After installing, you need to setup plex in the UI. An example is</p> <p></p> <ol> <li>The name for Plex comes from Plex and cannot be changed here. There is no automatic way to add a service check to Plex. If you want service checks, add one for it in Service Checks.</li> <li><code>http://</code> or <code>https://</code> URL for the application instance. If your application has a Base URL, include it. Providing an https:// URL reveals a checkbox. Checking this box enables SSL certificate validation; invalid certificates generate an error.</li> <li>Your Plex Token you may find directions for locating your Plex token at this Plex Article.</li> <li>This controls the maximum duration a request to this application may elapse. Selecting No Timeout can be dangerous. Selecting Disabled completely disables the instance.</li> </ol>"},{"location":"pages/integrations/plex/#webhook","title":"Webhook","text":"<p>Info</p> <p>Plex Webhooks from Plex to the Client require Plexpass</p> <p>In Plex, add a webhook that points to <code>http://localhost:port/plex?token=plex-token-here</code></p> <ul> <li>Replace <code>localhost:port</code> with the <code>ip:port</code> to the Notifiarr client</li> <li>Replace <code>plex-token-here</code> with the token for Plex so the Notifiarr client allows the incoming connection</li> </ul> <p></p>"},{"location":"pages/integrations/prowlarr/","title":"Prowlarr","text":""},{"location":"pages/integrations/prowlarr/#prowlarr","title":"Prowlarr","text":"<p>Info</p> <p>This integration is for setting up discord notifications for Prowlarr</p>"},{"location":"pages/integrations/prowlarr/#trigger-options","title":"Trigger options","text":"<ul> <li><code>Updates</code> - Notification for prowlarr updates available</li> <li><code>Health</code> - Notification for health errors</li> <li><code>Health Restored</code> - Notification for health status restored to normal</li> <li><code>Grab</code> - Notification for grabs</li> <li><code>Backup</code> - Notification for when backups occur</li> <li><code>Corrupt</code> - Notification for corrupted database</li> </ul>"},{"location":"pages/integrations/prowlarr/#instructions","title":"Instructions","text":"<ul> <li>Click the cog icon to open the settings</li> </ul> <ol> <li>Instructions on how to setup the notifiarr connect in prowlarr</li> <li>If you already have the client setup and configured use the <code>Add Notifiarr Connect</code> to automatically add the connect to prowlarr.</li> </ol> <p>Info</p> <p>We can see the connect has been added via Prowlarr \u2192 Settings \u2192 Notifications \u2192 Connections, You should also have received a test notification.</p> Prowlarr Connect Test Notification"},{"location":"pages/integrations/prowlarr/#configuration","title":"Configuration","text":"<ol> <li>click the <code>Customize</code> toggle to open the trigger settings.</li> <li> <p>Choose the color of your notification</p> </li> <li> <p>here are all the available <code>Notification Fields</code> under the <code>Grab</code> trigger as you can see there is a lot of customization for your specific needs </p> </li> </ol> <p></p>"},{"location":"pages/integrations/prowlarr/#examples","title":"Examples","text":"Prowlarr Grab Prowlarr Corruption"},{"location":"pages/integrations/qbitmanage/","title":"Qbit Manage","text":""},{"location":"pages/integrations/qbitmanage/#qbit-manage","title":"Qbit Manage","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/radarr/","title":"Radarr","text":""},{"location":"pages/integrations/radarr/#radarr","title":"Radarr","text":"<p>Info</p> <p>This integration allows for notifications from Radarr using its built in Connection for Notifiarr. In Radarr click Settings \u2192 Connect \u2192 + \u2192 Notifiarr</p>"},{"location":"pages/integrations/radarr/#current-versions","title":"Current Versions","text":""},{"location":"pages/integrations/radarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/radarr/#triggers","title":"Triggers","text":"<ul> <li><code>Movie Added</code> - Receive a notification when media is added to Radarr</li> <li><code>Grab</code> - Receive a notification when media is initially grabbed (RSS or manual)</li> <li><code>Download</code> - Receive a notification when media new is successfully imported</li> <li><code>Upgrade</code> - Receive a notification when upgraded media is successfully imported</li> <li><code>Deleted</code> - Be notified when media is deleted</li> <li><code>Update</code> - Receive a notification when the application updates</li> <li><code>Backup</code> - Receive a notification when a backup occurs</li> <li><code>Corrupt</code> - Monitor backups for corruption and size loss</li> <li><code>Failed</code> - Custom notification type based on previous grabs. If the system detects a grab for the same media with the same quality or better before the previous one was imported then it will set the previous one as failed</li> <li><code>Health</code> - Receive a notification when the application reports an issue</li> </ul>"},{"location":"pages/integrations/radarr/#channel","title":"Channel","text":"<ul> <li>Radarr Channel picker for each trigger</li> </ul>"},{"location":"pages/integrations/radarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Radarr.</p> <p></p> <ol> <li>Basic instructions on how to add Notifiarr to Radarr</li> <li>If you have already setup the client and configured the connection you can use this too automatically add the connect</li> <li>all available triggers</li> <li>Trigger specific color selector in this example trigger <code>updates</code> uses the color black</li> <li>Use this to be notified if your database is corrupted</li> <li>Get notified of health status</li> <li>Set a daily overview of radarr and a set time of day</li> <li>Send notifications with selected ratings (considered 'adult') to another channel</li> <li>Use this too remove <code>forced</code> instances.</li> </ol>"},{"location":"pages/integrations/radarr/#notification-content","title":"Notification Content","text":"<ol> <li>Use the <code>customize</code> toggle too drop down all available notification fields in this example we use <code>movie added</code></li> <li>Select if you want too know how the movie was added</li> </ol>"},{"location":"pages/integrations/radarr/#examples","title":"Examples","text":"grabbed example update example"},{"location":"pages/integrations/radarr/#errors","title":"Errors","text":""},{"location":"pages/integrations/radarr/#400-bad-request","title":"400 Bad Request","text":"<p>Check and ensure you have a Grab or Download channel configured for Radarr</p>"},{"location":"pages/integrations/radarr/#401-unauthorized","title":"401 Unauthorized","text":"<p>Your APIKey is incorrect</p>"},{"location":"pages/integrations/readarr/","title":"Readarr","text":""},{"location":"pages/integrations/readarr/#readarr","title":"Readarr","text":"<p>Info</p> <p>This integration allows for notifications from Readarr using its built in Connection for Notifiarr. In Readarr click Settings \u2192 Connect \u2192 + \u2192 Notifiarr</p>"},{"location":"pages/integrations/readarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/readarr/#triggers","title":"Triggers","text":"<ul> <li><code>Grab</code> - Receive a notification when media is initially grabbed (RSS or manual)</li> <li><code>Download</code> - Receive a notification when media new is successfully imported</li> <li><code>Update</code> - Receive a notification when the application updates</li> <li><code>Upgrade</code> - Receive a notification when upgraded media is successfully imported</li> <li><code>Health</code> - Receive a notification when the application reports an issue</li> <li><code>Backup</code> - Receive a notification when a backup occurs</li> <li><code>Corrupt</code> - Monitor backups for corruption and size loss</li> <li><code>Deleted</code> - Be notified when media is deleted</li> </ul>"},{"location":"pages/integrations/readarr/#channel","title":"Channel","text":"<ul> <li>Readarr shares the *arr channel unless Granular Setup is used, clicking the link on the site will move to the channel setup location.</li> </ul>"},{"location":"pages/integrations/readarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Readarr.</p>"},{"location":"pages/integrations/readarr/#instructions","title":"Instructions","text":"<ol> <li>How to enable notifications from within Readarr</li> <li>Automatically add the connect if the client is setup</li> </ol>"},{"location":"pages/integrations/readarr/#integration-instructions","title":"Integration Instructions","text":"<ol> <li>Use the <code>Customize</code> toggle too drop down</li> <li>Set the color of the notification</li> <li>All available <code>notification fields</code> in this case we used the <code>grab</code> trigger</li> </ol>"},{"location":"pages/integrations/readarr/#errors","title":"Errors","text":""},{"location":"pages/integrations/readarr/#400-bad-request","title":"400 Bad Request","text":"<p>Check and ensure you have a Grab or Download channel configured for Readarr</p>"},{"location":"pages/integrations/readarr/#401-unauthorized","title":"401 Unauthorized","text":"<p>Your APIKey is incorrect</p>"},{"location":"pages/integrations/reciperr/","title":"Reciperr","text":""},{"location":"pages/integrations/reciperr/#reciperr","title":"Reciperr","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/reddit/","title":"Reddit","text":""},{"location":"pages/integrations/reddit/#reddit","title":"Reddit","text":"<p>Info</p> <p>This integration allows for notifications from subreddits you choose to watch</p>"},{"location":"pages/integrations/reddit/#monitoring-overview","title":"Monitoring overview","text":"<p>This will list all subreddits you are monitoring.</p>"},{"location":"pages/integrations/reddit/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for the Reddit integration.</p> <p></p> <ol> <li><code>Select Channel</code> - Pick a channel for the subreddit notification to go to.</li> <li><code>Subreddit Config</code> - Either enter in the subreddit or custom domain. After which you can include or exclude key words using Regex.</li> <li><code>Add Reddit Monitoring</code> - Add the subreddit to your account to monitor.</li> <li><code>Update/Delete</code> - Save or remove the modified subreddit from being monitored.</li> </ol>"},{"location":"pages/integrations/releaseParser/","title":"Release Parser","text":""},{"location":"pages/integrations/releaseParser/#release-parser","title":"Release Parser","text":"<p>Info</p> <p>This integration allows for users to parse a release name in the same method Radarr and Sonarr do to see how the name will be treated.</p>"},{"location":"pages/integrations/releaseParser/#trigger-options","title":"Trigger options","text":"<ul> <li>Select the channel to monitor for releases to be checked</li> </ul>"},{"location":"pages/integrations/releaseParser/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for the Release parser.</p>"},{"location":"pages/integrations/releaseParser/#instructions","title":"Instructions","text":"<ol> <li>basic instructions</li> <li>Pick the keywords that the bot will watch for</li> </ol>"},{"location":"pages/integrations/rssWatcher/","title":"RSS Watcher","text":""},{"location":"pages/integrations/rssWatcher/#rss-watcher","title":"RSS Watcher","text":""},{"location":"pages/integrations/rssWatcher/#integration-card","title":"Integration Card","text":"<ol> <li>Configuration</li> <li>Channel picker for the feeds</li> </ol>"},{"location":"pages/integrations/rssWatcher/#channel-picker","title":"Channel Picker","text":"<ol> <li>List of channels <code>Dropdown menu</code></li> <li>Test bot channel permissions</li> <li>Copy Channel to all</li> </ol>"},{"location":"pages/integrations/rssWatcher/#configuration","title":"Configuration","text":"<ol> <li>Page to configure the RSS Watcher.</li> <li>Custom Icon <code>Subscriber Feature</code></li> <li>Example screenshots of what you can expect the notification to look like.</li> <li>List of preset RSS feeds you can toggle on to get notifications from</li> <li>Name of custom feed</li> <li>URL for the RSS feed you wanna add</li> <li>regex filter of things to post</li> </ol>"},{"location":"pages/integrations/simonSays/","title":"Simon Says","text":""},{"location":"pages/integrations/simonSays/#simon-says","title":"Simon Says","text":"<p>DOCUMENTATION COMING SOON </p>"},{"location":"pages/integrations/snapshots/","title":"Snapshots","text":""},{"location":"pages/integrations/snapshots/#snapshot","title":"Snapshot","text":"<ol> <li>Reloads the integration.</li> <li>Opens the integrations settings.</li> <li>A list of locations which have the Notifiarr client installed.</li> <li>Opens up the Discord channel selection menu.</li> </ol>"},{"location":"pages/integrations/snapshots/#integration-settings-menu","title":"Integration Settings Menu","text":"<p>Click the cog icon to open the integration settings for the Snapshot integration.</p> <p></p> <ol> <li><code>Basic Instructions</code> - Gives you basic guidelines on how to setup this integration.</li> <li><code>Integration Settings</code> - Allows the user to further configure the integration.</li> <li><code>Extra Settings</code> - Adjust the extra settings for this integration.</li> <li><code>Client Settings</code> - Allows the user to set what should be reported in the snapshot and select which client to use</li> <li><code>Custom Icon</code> - Assign another icon to notifications from this integration. (Subscriber Feature)</li> <li><code>Screenshots</code> - Shows the expected output once all correctly configured.</li> <li><code>Save</code> - Saves all your Configured settings and closes the Integration Settings Menu.</li> </ol>"},{"location":"pages/integrations/snapshots/#integration-settings","title":"Integration Settings","text":"<p>Before all the configuration options are available you must \"Pick a client\" from the drop-down list. This will typically be the hostname you have for your locally installed Notifiarr client.</p> <p></p> <p>These are all the configurable options available to the user.</p> <p></p> <ol> <li><code>Pick a client</code> - Select the local Notifiarr client you wish to configure for alerting.</li> <li><code>Trigger</code> - What the Snapshot integration will alert on. The following Trigger options are available.</li> </ol> <p></p> <ol> <li><code>Comparator</code> - Allows the user to configure alerts using one of the following, =, &lt;=, &gt;=, contains OR does not contain.</li> <li><code>Value</code> - What value shall be used to trigger the alert.</li> <li><code>@mention</code> - Pick a user or role and Discord will ping you if there is an alert.</li> <li><code>Add or Delete</code> - Here you can delete any existing alerts you may have or you can add a new alert.</li> <li>Select this if you only want notifications when an alert is triggered. If left unchecked, you will receive continuous notifications as specified in the interval selection time (e.g. every 30min). This is found under client settings and discussed below.</li> </ol>"},{"location":"pages/integrations/snapshots/#triggers-and-allowed-values","title":"Triggers and Allowed Values","text":"<p>The triggers used by the snapshot integration have the following allowed values.</p> <ol> <li><code>Raid</code> - Using the Comparator \"contains\" with a Value of \"_\" will alert of a failure.</li> <li><code>MegaCLI</code> - Using the Comparator \"contains\" with a Value of \"degraded\".</li> <li><code>Load</code> - Value can be a decimal or whole number.</li> <li><code>Users</code> - Value can be a whole Number.</li> <li><code>Drive Age (Days)</code> - Value can be a number in days.</li> <li><code>Drive Temp</code> - Value can be a decimal or whole number.</li> <li><code>Drive SMART</code> - Using the Comparator \"contains\" with a Value of either \"fail\" OR \"pass\"</li> <li><code>Storage (Free GB)</code> - Value can be a whole number or decimal followed by G for Gigabyte or T for Terabyte. e.g. 500G or 0.5T</li> <li><code>Quota (Free GB)</code> - Value can be a whole number or decimal followed by G for Gigabyte or T for Terabyte. e.g. 500G or 0.5T</li> <li><code>CPU Temp</code> - Value can be a decimal or whole number.</li> <li><code>CPU Load</code> - Value can be a decimal or whole number.</li> <li><code>RAM Load</code> - Value can be a decimal or whole number.</li> </ol>"},{"location":"pages/integrations/snapshots/#extra-settings","title":"Extra Settings","text":"<p>Allows the user to update existing messages and change between Fahrenheit and Celsius.</p> <p></p>"},{"location":"pages/integrations/snapshots/#client-settings","title":"Client Settings","text":"<p>Here are all the different settings for your client. These selections will determine what notifications will be monitored and reported on.</p> <p></p>"},{"location":"pages/integrations/snapshots/#custom-icon","title":"Custom Icon","text":"<p>If you are AWESOME and are one of our Sub's then you will see this option and can upload your own custom icon.</p> <p></p>"},{"location":"pages/integrations/sonarr/","title":"Sonarr","text":""},{"location":"pages/integrations/sonarr/#sonarr","title":"Sonarr","text":"<p>Info</p> <p>This integration allows for notifications from Sonarr using the connect for Webhooks. In Sonarr click Settings \u2192 Connect \u2192 + \u2192 Webhook.</p>"},{"location":"pages/integrations/sonarr/#current-versions","title":"Current Versions","text":""},{"location":"pages/integrations/sonarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/sonarr/#1-triggers","title":"1. Triggers","text":"<ul> <li><code>Grab</code> - Receive a notification when media is initially grabbed (RSS or manual)</li> <li><code>Download</code> - Receive a notification when media new is successfully imported</li> <li><code>Upgrade</code> - Receive a notification when upgraded media is successfully imported</li> <li><code>Deleted</code> - Be notified when media is deleted</li> <li><code>Update</code> - Receive a notification when the application updates</li> <li><code>Backup</code> - Receive a notification when a backup occurs</li> <li><code>Corrupt</code> - Monitor backups for corruption and size loss</li> <li><code>Failed</code> - Custom notification type based on previous grabs. If the system detects a grab for the same media with the same quality or better before the previous one was imported then it will set the previous one as failed</li> <li><code>Health</code> - Receive a notification when the application reports an issue</li> </ul>"},{"location":"pages/integrations/sonarr/#2-channels","title":"2. Channels","text":"<ul> <li>Sonarr channel picker for each trigger</li> </ul>"},{"location":"pages/integrations/sonarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Sonarr.</p>"},{"location":"pages/integrations/sonarr/#instructions","title":"Instructions","text":"<ol> <li>In Sonarr navigate to Connect =&gt; Add New (Plus Button) =&gt; Webhook</li> <li>Enter the webhook URL in the URL field Enter a name for the Notification in Sonarr <code>Notifiarr</code> is suggested, but use what you like Enable the notification triggers you wish to have sent from Sonarr to the Notifiarr Site Hit test - you should receive a notification on discord with the test message from Sonarr Save</li> </ol>"},{"location":"pages/integrations/sonarr/#integration-instructions","title":"Integration instructions","text":"<ol> <li>Notification color selector</li> <li>all <code>notification fields</code> available under <code>grabbbed</code> trigger</li> <li>Notification for corrupted database</li> <li>Sends an overview once a day of your Sonarr history at your specified time</li> <li>Send notifications with selected ratings (considered 'adult') to another channel</li> <li>Options to remove <code>forced</code> from instances/indexer name</li> </ol>"},{"location":"pages/integrations/sonarr/#examples","title":"Examples","text":"grabbed example update example"},{"location":"pages/integrations/sonarr/#errors","title":"Errors","text":""},{"location":"pages/integrations/sonarr/#400-bad-request","title":"400 Bad Request","text":"<ul> <li>Check and ensure you have a Grab or Download channel configured for Sonarr (Test notifications try to use Grab, then Download to send, you can disable after the test if you want)</li> <li>Ensure the webhook URL is accurate</li> </ul>"},{"location":"pages/integrations/sonarr/#401-unauthorized","title":"401 Unauthorized","text":"<p>Your APIKey is incorrect</p>"},{"location":"pages/integrations/starrproxy/","title":"Starr Proxy","text":""},{"location":"pages/integrations/starrproxy/#starr-proxy","title":"Starr Proxy","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/synology/","title":"Synology","text":""},{"location":"pages/integrations/synology/#synology","title":"Synology","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/trash/","title":"TRaSH","text":""},{"location":"pages/integrations/trash/#trash","title":"TRaSH","text":"<p>TRaSH</p> <p>This integration allows you to setup and sync TRaSH guides with Radarr and Sonarr. Keep in mind this requires the Notifiarr client.</p> <p>patrons/subscribers</p> <p>Patron Feature - Accessible to Patrons and Subscribers only</p> <p>Note</p> <p>If you have questions about what the formats, profiles, scores, etc do then please use the TRaSH discord server for help or check their guide. This wiki is for setting up and getting things in sync.</p>"},{"location":"pages/integrations/trash/#features","title":"Features","text":"Feature Patron Subscriber GUI \u2705 \u2705 Multiple instances \u2705 \u2705 Formats Sync \u2705 \u2705 Customize format scores \u2705 \u2705 Apply score multiplier \u2705 \u2705 Mass update scores \u2705 \u2705 Mass delete formats \u2705 \u2705 Notifications \u2705 \u2705 Profiles Sync \u2705 \u2705 Customize profile settings \u2705 \u2705 Clone profiles \u2705 \u2705 Notifications \u2705 \u2705 Quality definitions Sync \u2705 \u2705 Multiple preset quality groups \u2705 \u2705 Notifications \u2705 \u2705 File naming Sync \u2705 \u2705 Multiple preset naming conventions \u2705 \u2705 Notifications \u2705 \u2705 Extras Access to community sync-- Upload your own formats for public/private use \u2705 \u2705 Instant sync when TRaSH updates \u2705 Jump to top of the querue \u2705 Trigger a sync from Discord \u2705"},{"location":"pages/integrations/trash/#client-setup","title":"Client Setup","text":"<ul> <li>TRaSH Integration requires the notifiarr client to be running locally, configured and working (i.e. communicating with) on the Notifiarr site, and the Starr Apps configured.</li> <li>Add Starr Apps to the Client in the <code>Starr Apps</code> Tab of the Local Client</li> <li>Note that <code>Time Out</code> for the Starr Apps cannot be set to <code>Disabled</code> for the app to be enabled</li> <li>Note that a <code>Name</code> value is required for the Starr Apps you wish to sync</li> </ul>"},{"location":"pages/integrations/trash/#integration-card","title":"Integration Card","text":"<ol> <li><code>CFs/Scores</code> - The amount of CF's and scores you have synced.</li> <li><code>Channel</code> - Which channel to send TRaSH update notifications to (when TRaSH updates them, removes them, when you sync them or unsync them)</li> </ol>"},{"location":"pages/integrations/trash/#getting-started","title":"Getting Started","text":"<p>Click the cog icon\u00a0in the card header to open the configuration options for TRaSH. To get started, you will need to go to Help \u2192 How-to.</p> <p></p>"},{"location":"pages/integrations/trash/#client-settings","title":"Client Settings","text":"<p>here you can change the interval for your profile's sync.</p> <p></p>"},{"location":"pages/integrations/trash/#notifications","title":"Notifications","text":"<p>Here we can individually select what we would want to be notified of. For this example we selected all available triggers.</p> <p></p>"},{"location":"pages/integrations/trash/#profiles","title":"Profiles","text":"<p>here we can manage existing profiles or add new profiles/link predefined TRaSH profiles. For this guide we are going to add the TRaSH HD Bluray + WEB profile</p> <p></p> <p>Info</p> <p>After selecting the profile as shown above you will be directed to the profile settings.</p> <p></p> <ol> <li><code>Sync</code> - Enable this to sync your profile.</li> <li><code>Starr instance profile</code> - Either create a new profile or select one of the TRaSH profiles available.</li> <li><code>Profile name</code> - Here you can set your profile name This needs to be unique.</li> </ol> <p>Note</p> <p>If you plan to use TRaSH as default you can stop here and save your settings. Below we will got into customizing the profile, quality, and CF's.</p> <p>Warning</p> <p>MAKE SURE TO SAVE YOUR PROFILE SYNC, THIS IS DIFFERENT FROM SAVE CLIENT SETTINGS</p>"},{"location":"pages/integrations/trash/#profile-customization","title":"Profile Customization","text":"<p>Info</p> <p>Check-box means you want to sync TRaSH values and cannot change them in your ARR's as they will revert back after each sync is made. Uncheck any that you want to customize, And do so inside of your ARR's.</p> <p></p> <ol> <li><code>Language</code> - If you want to sync your preferred language, **Disable this if you plan to use something other then the TRaSH default.</li> <li><code>Upgrades allowed</code> - Enable this if you plan to allow upgrades in your profile.</li> <li><code>Minimum score</code> - Enable this to set the minimum download score to 0.</li> <li><code>Minimum upgrade score</code> - enable this to set the minimum score increase to allow a upgrade.</li> <li><code>Cutoff score</code> - Enable this to set the cutoff score. default set 10000</li> </ol>"},{"location":"pages/integrations/trash/#quality-settings","title":"Quality Settings","text":"<p>Warning</p> <p>If you plan on changing the qualities in the profile, you will need to enable the allow custom quality order/groupings, if this is not enabled any changes made to the quality grouping will be reverted after each sync.</p> <p></p> <ol> <li><code>Cutoff quality</code> - Cutoff quality is the quality that you want your starr instance to stop upgrading at. <code>Bluray-1080p</code></li> <li><code>Qualities</code> - You can choose to either match the TRaSH quality groups, or you can set this to allow custom set groups. For example we want to use the TRaSH <code>HD Bluray + WEB</code> profile but we don't want to include <code>720p</code>.</li> </ol>"},{"location":"pages/integrations/trash/#custom-formats-cf","title":"Custom Formats \"CF\"","text":"<ol> <li><code>Add</code> - You can choose to either automatically add new formats, add missing formats, or add none.</li> <li> <p><code>Remove</code> - You can choose to remove custom scores on each sync, or if you want to set your own scores you would want to <code>allow custom scores from formats assigned to this profile</code>. If your planning to set scores different then what TRaSH has then you would want to set this to <code>allow</code>.</p> </li> <li> <p><code>Groups</code> - This is where you can select each group that you want in your profile sync, along with the available CF's within that group.</p> </li> </ol>"},{"location":"pages/integrations/trash/#formats","title":"Formats","text":"<p>Info</p> <p>Here you will find all of the available TRaSH guide formats. You can find more info on these at TRaSH Guides</p> <p></p> <ol> <li><code>Sync TRaSH CF names</code> - If you want to sync the names set for the TRaSH CFs.</li> <li><code>Interactive flowchart</code> - Useful interactive flow charts for TRaSH profiles.</li> </ol>"},{"location":"pages/integrations/trash/#scores","title":"Scores","text":"<p>Here you can setup custom scores to your liking, and choose to sync them.</p> <p></p> <ol> <li><code>Filter</code> - Filter between witch profile you're editing/looking at.</li> <li><code>Multiplier</code> - (multiplier * TRaSH = your score)</li> <li><code>Starr score/Custom</code> - Here you can set personal scores while still keeping your CF's in sync.</li> <li><code>Sync</code> - Check-box to enable sync.</li> </ol>"},{"location":"pages/integrations/trash/#quality","title":"Quality","text":"<p>Here you can edit quality names within a specific group and choose to sync them to your starr instance.</p> <p></p> <ol> <li><code>Definition group</code>- Here you can choose the starr profile, that you plan to edit or change.</li> <li><code>Rename Field</code> - This is where you can customize the name of a quality.</li> <li><code>Sync</code> - Check-box to enable sync.</li> </ol>"},{"location":"pages/integrations/trash/#naming","title":"Naming","text":"<p>Here you can choose a default TRaSH naming scheme for your media. There are recommended presets for most applications used today.</p> <p></p>"},{"location":"pages/integrations/trash/#delete-formats","title":"Delete Formats","text":"<ol> <li><code>Fix Map</code> - This will open the mapping tool options.</li> <li><code>Enable sync</code> - This will re-enable all the CF toggles, this is useful if you want to change the selected CF's.</li> <li><code>Enable sync + scores</code> - This will re-enable all the CF toggles, and scores. This is useful if you want to change CF's and scores.</li> <li><code>Unlink starr</code> - This will unlink your starr id's from the map. This is useful if your moving your starr install to a different server or if your changing databases.</li> <li><code>Relink starr</code> - This will attempt to re-link your starr instance id's and CF's to the map.</li> <li><code>Delete map</code> - This will delete all of your sync settings. Useful for starting fresh.</li> <li><code>Delete Selected CFs</code> - This will delete all of the selected CF's in your profile.</li> <li><code>Delete Selected CFs &amp; Map</code> - This will delete all of your CF's and the profile mapping.</li> <li><code>Fresh Start CFs</code> - This will delete all the formats but leave the map so a sync would put everything back that is in sync. This is useful to clean things up without losing your sync settings.</li> <li><code>Fresh Start All</code> - This would delete all CF's/scores/etc. Only do this if you want to nuke everything and start over.</li> </ol>"},{"location":"pages/integrations/unpackerr/","title":"Unpackerr","text":""},{"location":"pages/integrations/unpackerr/#unpackerr","title":"Unpackerr","text":"<p>Info</p> <p>This integration provides Unpackerr notifications and reactions.</p> <p>You may choose to have either a reaction placed on existing Starr notifications, or receive a stand alone message for Unpackerr notifications, or both. Selecting the Reactions box enables or disables the Reaction emoji.</p> <p>As a premium feature you may elect to have Unpackerr notifications automatically add Custom Formats to your Starr apps. These custom formats downgrade the priority on the release group that gave you a packed download. That means in time your Starr apps will choose to download fewer and fewer packed items.</p>"},{"location":"pages/integrations/unpackerr/#reaction-example","title":"Reaction example","text":""},{"location":"pages/integrations/unpackerr/#notification-example","title":"Notification Example","text":""},{"location":"pages/integrations/uptimekuma/","title":"Uptime-Kuma","text":""},{"location":"pages/integrations/uptimekuma/#uptime-kuma","title":"Uptime-Kuma","text":"<p>Note</p> <p>setup notifications for Uptime Kuma</p>"},{"location":"pages/integrations/uptimekuma/#trigger-options","title":"Trigger Options","text":"<ul> <li><code>issues</code> - be notified of any issues</li> <li><code>restored</code> - be notified when sites are back up</li> </ul>"},{"location":"pages/integrations/uptimekuma/#instructions","title":"Instructions","text":"<p>Info</p> <p>Add the webhook too your Uptime Kuma via Uptime-Kuma \u2192 Settings \u2192 Notifications \u2192 Setup Notifications</p> <p></p>"},{"location":"pages/integrations/uptimekuma/#configuration","title":"Configuration","text":"<ol> <li>click the <code>Customize</code> toggle to open the trigger settings.</li> <li>Choose the color of your notification.</li> </ol>"},{"location":"pages/integrations/uptimekuma/#examples","title":"Examples","text":"uptime-Kuma UP Uptime-Kuma DOWN"},{"location":"pages/integrations/watchtower/","title":"Watchtower","text":""},{"location":"pages/integrations/watchtower/#watchtower","title":"Watchtower","text":"<p>COMING SOON </p>"},{"location":"pages/integrations/websitestatus/","title":"Website Status","text":""},{"location":"pages/integrations/websitestatus/#website-status","title":"Website Status","text":"<p>Info</p> <p>This integration allows for notifications based on website status.</p>"},{"location":"pages/integrations/websitestatus/#trigger-options","title":"Trigger options","text":"<ol> <li>Toggle on/off for each website being monitored</li> <li>List of websites being monitored (Click the information icon for some simple stats)</li> <li>Uptime percentage since monitoring started</li> <li>Channel to post notifications to</li> </ol>"},{"location":"pages/integrations/websitestatus/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for website monitoring.</p> <p></p> <ol> <li>Colors for notifications based on status</li> <li>Select pre-defined indexters to monitor</li> <li>Update the selected indexer</li> <li>toggle active state on/off</li> <li>URL of the desired website</li> <li>Delete toggle \"browser popup to confirm action\"</li> <li>reset all integration settings</li> </ol>"},{"location":"pages/integrations/whisparr/","title":"Whisparr","text":""},{"location":"pages/integrations/whisparr/#whisparr","title":"Whisparr","text":"<p>Info</p> <p>This integration is for setting up discord notifications for Whisparr</p> <p>Whisparr</p> <p>NSFW content will not be shown</p>"},{"location":"pages/integrations/whisparr/#trigger-options","title":"Trigger options","text":"<ul> <li><code>Grab</code> - Notifications for grabs that occur</li> <li><code>Imports</code> - Notifications for when media is imported</li> <li><code>Upgrade</code> - Notifications for media upgrades</li> <li><code>Added</code> - Notifications for new media added</li> <li><code>Deleted</code> - Notifications for when media is deleted</li> <li><code>Updates</code> - Notifications for system updates</li> <li><code>Health Check</code> Notifications for health checks</li> <li><code>Health Restored</code> - Notifications for health restored to normal</li> </ul>"},{"location":"pages/integrations/whisparr/#instructions","title":"Instructions","text":"<ul> <li>Click the cog icon to open the settings</li> </ul> <ol> <li>Instructions on how to setup the notifiarr connect in prowlarr</li> </ol> <p>Info</p> <p>Add the Connect using its built in Connection for Notifiarr. In Whisparr click Settings \u2192 Connect \u2192 + \u2192 Notifiarr, once done correctly you will receive a test notification </p> Whisparr Connect Test Notification"},{"location":"pages/integrations/whisparr/#configuration","title":"Configuration","text":"<ol> <li>click the <code>Customize</code> toggle to open the trigger settings.</li> <li> <p>Choose the color of your notification.</p> </li> <li> <p>here are all the available <code>Notification Fields</code> under the <code>Grab</code> trigger as you can see there is a lot of customization for your specific needs </p> </li> </ol> <p></p>"},{"location":"pages/integrations/whisparr/#examples","title":"Examples","text":"Whisparr Imported Whisparr Grabbed"},{"location":"pages/quickstart/quickStart/","title":"Quick Start","text":""},{"location":"pages/quickstart/quickStart/#quick-start","title":"Quick Start","text":"<p>Almost everything needed is available in different parts of the wiki. This will point to each one to get you up and running.</p>"},{"location":"pages/quickstart/quickStart/#assumptions","title":"Assumptions","text":"<ul> <li>You already have an account setup on notifiarr.com with a valid apikey to use in the client but if you dont, stop here and go make one.</li> <li>You have setup the notifiarr client if you plan to use it. To know if you will need it or not you can view the faq for information on if it is required</li> </ul>"},{"location":"pages/quickstart/quickStart/#client-connection","title":"Client Connection","text":"<p>Once the client is setup locally and you can see it internally (example: <code>localhost:5454</code>) and externally (example: <code>http://&lt;your-external-ip&gt;:5454</code> or <code>https://notifiarr.&lt;your-domain&gt;.com</code>).</p>"},{"location":"pages/quickstart/quickStart/#integrations","title":"Integrations","text":"<p>First thing, turn on a couple that you want to use (or all of them at once that you want to use if you want but less is more while learning). Once you have them turned on the page will reload and you'll see a card for each one. If you can't figure out how to turn things on etc, each integration has a wiki page for it (well most do). Click the <code>Wiki</code> link in the integration card to get more information about that specific one.</p>"},{"location":"pages/translations/contribute/","title":"Contribute","text":""},{"location":"pages/translations/contribute/#translations","title":"Translations","text":"<p>Notifiarr Translations are handled on the Notifiarr Weblate</p> <p>If you wish to translate Notifiarr you'll need to:</p> <ol> <li>Sign In to Weblate.</li> <li>Notify Notifiarr Staff on Discord so your role can be applied</li> </ol> <p>Notifiarr Translations only impact Notifications and not the site itself.</p>"},{"location":"pages/website/clientConfig/","title":"Client setup","text":""},{"location":"pages/website/clientConfig/#clients-setup","title":"Clients Setup","text":"<p>The client is used to do all local communication between the site and your system. This allows all urls, apikeys, etc to stay local and requires apikey validation between the site and the client before any actions can be taken.</p> <p>You may run more than 1 client, and it is recommended if you have more than 1 system to monitor.</p> <p>Depending on your layout (Grid or List) you will see:</p> <p> </p> <p>When you open the client settings you will see:</p> <p></p> <ol> <li>Client list: Each client you have configured will show up as a tab so its settings can be modified</li> <li>This section is information about the local client and its host environment</li> <li>This is the automatically configured <code>Tunnel URL</code> to the client so the site can communicate with the locally installed client</li> <li>This is the connection status, if it isn't green then the site can not reach the client. See Errors below.</li> <li>Use this client for timers that are not part of a specific integration (non client integrated timers, daily overview posts for example)</li> <li>Client triggers: If the URL is provided, you can trigger the client to run any of these actions by clicking the cloud icon</li> <li>Save button: Once done, click this and it will update all your settings. If a URL is provided it will trigger the client to fetch the new settings right then. If no URL is provided then you can restart the client manually to pull the changed settings or wait 5 minutes for the client poller to request any changed settings and update</li> <li>If you have a duplicate client showup (change the user, hostname changed, etc) you can merge the new client with the old one so all the settings copy over and the old one is removed</li> <li>If you no longer have the client installed on a specific hostname, you can remove it</li> </ol>"},{"location":"pages/website/clientConfig/#commands","title":"Commands","text":"<p>Subscribers Only</p> <p>This is a subscriber feature, you can add them in the client and run them from the client without being a subscriber but no automation will be available from the site.</p>"},{"location":"pages/website/clientConfig/#client","title":"Client","text":"<p>First thing is to add a command in the local client. Commands are basically custom scripts you want to trigger. Read below to understand how they work and then add them to the client.</p> <p></p> <ol> <li>Open the Commands section in the local client UI</li> <li>Name of the command</li> </ol> <p>Click the (?) icons for more information on each box</p>"},{"location":"pages/website/clientConfig/#website","title":"Website","text":"<p>At the bottom of the client configuration is a <code>Commands</code> section</p> <p></p> <ol> <li>Click the <code>+</code> to expand the command settings</li> </ol> <p></p> <ol> <li>This table will allow running any client configured commands by clicking the cloud icon</li> <li>This will allow adding commands to be automatically triggered based on options (image and info below)</li> <li>This table is a list of automated commands</li> </ol> <p></p> <ol> <li>Pick which command (must be added to the client already) to configure automation for</li> <li>What type of command</li> <li>Witch channel</li> <li>Role</li> </ol>"},{"location":"pages/website/clientConfig/#command-example","title":"Command Example","text":"<p>The network integration is enabled and Plex is being monitored so when Plex goes down a notification is sent to Discord. With that in mind we want Plex to automatically restart its self at that point so a command is used.</p> <p>plexRestart.ps1</p> <pre><code>taskkill /IM \"Plex Media Server.exe\" /F\nStart-Process -FilePath \"C:\\Program Files (x86)\\Plex\\Plex Media Server\\Plex Media Server.exe\"\n</code></pre> <p>This script is on the computer and the command to run <code>plexRestart.ps1</code> is added in the client. With that done, we can now set it up to trigger this command when the network notification comes in that it is down. As seen above there is also a keyword configured with <code>!plexRestart</code> so if we want to restart it on demand (maybe it is slow or acting up) we can do that as well.</p>"},{"location":"pages/website/clientConfig/#errors","title":"Errors","text":"<ul> <li>If the icon does not turn green, you can see the error and details in the Console via the Browser's DevTools (F12 in most browsers). Some common issues are listed below.</li> <li>App in the client is taking too long to respond causing timeouts. Disable all apps and re-enable 1x1 to identify the culprit</li> </ul>"},{"location":"pages/website/clientConfig/#duplicate-clients","title":"Duplicate Clients","text":"<ul> <li>This typically occurs in Docker or containerized environments when a hostname is not configured every time the container is restarted.</li> <li>For other installations this would occur if the unique attributes of your host system and installation change.</li> </ul>"},{"location":"pages/website/clientConfig/#resolving-duplicate-clients","title":"Resolving Duplicate Clients","text":"<ol> <li>Configure/Set a hostname for the client if applicable or resolve the changing attributes</li> <li>Restart the client</li> <li>On the Website in Client Configuration, Delete all client entries between the first and last client</li> <li>On the Website in Client Configuration, Merge the remaining two client entries</li> </ol>"},{"location":"pages/website/integrationsSetup/","title":"Integrations setup","text":""},{"location":"pages/website/integrationsSetup/#main-setup","title":"Main Setup","text":"<ol> <li>Open the integrations page</li> <li>Click the cog wheel (Card view). All available integrations have to be enabled before they can be used.</li> </ol> <ol> <li>Once you open the <code>Integration Configuration</code> you only need to toggle on/off what you want to use.</li> </ol>"},{"location":"pages/website/integrationsSetup/#reactions-setup","title":"Reactions Setup","text":"<ul> <li> <p>You can use any emoji you prefer for reactions, however, if you would like to use the existing set of emoji provided by Notifiarr, visit notifiarr-reactions and save the .zip file.</p> </li> <li> <p>After extracting the contents of the zip file, you can choose which emoji you would like to use by uploading them to your Discord server.</p> </li> <li> <p>For instructions on uploading emoji to your server, please visit this article from Discord: discord-custom-emoji</p> </li> <li> <p>Once you've uploaded the emoji you want to use, you will need to find the emoji's ID for your server.  To do this:</p> </li> <li> <p>Go to any channel on your server and type <code>\\:emoji_name:</code> (replace <code>emoji_name</code> with the actual name/alias you are using for the emoji when you uploaded it to your server) then press Enter.</p> </li> <li> <p>You will see a message in your chat that looks like <code>&lt;:emoji_name:1069872535814496896&gt;</code>. In this example, <code>emoji_name</code> represents the name/alias of the emoji, and the string of numbers after the colon is the emoji ID.</p> </li> <li> <p>Copy this value, without the brackets or leading colon (in this example, you would copy <code>emoji_name:1069872535814496896</code>) and paste the results in the Discord settings field that corresponds to the reaction you are using the emoji for.</p> </li> </ul>"},{"location":"pages/website/integrationsSetup/#discord-server-missing-from-dropdown","title":"Discord Server Missing from Dropdown","text":"<ul> <li>This should only be an issue if you linked your Discord account to Notifiarr before creating the server.</li> <li>If you created the server after you already authorized your account, give it 5 minutes and re-authorize so it re-fetches the server list.</li> </ul>"},{"location":"pages/website/mediaRequests/","title":"Media requests","text":""},{"location":"pages/website/mediaRequests/#history","title":"History","text":"<ol> <li>History tab will show you all your request history from the bot</li> <li>Radarr collections (<code>Subscriber</code> feature, details below)</li> <li>Total requests per *arr app</li> <li>Details about each request made</li> <li>Action buttons for things that are pending if approval is used (This can also be done with the bot)</li> </ol>"},{"location":"pages/website/mediaRequests/#collections-monitoring-gaps","title":"Collections Monitoring (Gaps)","text":"<ol> <li>Turn monitoring on/off per instance</li> <li>Sync happens automatically every 12 hours, refresh icon will do an instant sync</li> <li>Filter the table of collections</li> </ol> <ol> <li>Manual checkbox, something you are going to add now</li> <li>Monitor checkbox, something you want to automatically have monitored so when new movies are added to the collection, they are automatically added to your library</li> <li>Exclude checkbox, something you do not want to monitor during automation</li> <li>TMDb collection name and link to the collection</li> <li>List of movies in the collection and if you have them or not</li> <li>Percentage of the collection that is completed</li> <li>A check before the movie means the movie is in Radarr's list exclusion and will not be added even if automatically monitoring the collection</li> <li>Manual settings if you want to add missing movies from collections now</li> <li>Monitor settings for how automation will be handled</li> </ol>"},{"location":"pages/website/metrics/","title":"Metrics","text":""},{"location":"pages/website/metrics/#metrics","title":"Metrics","text":"<ol> <li>The top 5 users based on total notifications sent</li> <li>The top 5 users per integration based on the total notifications sent for that integration</li> </ol>"},{"location":"pages/website/notificationHistory/","title":"Notification history","text":""},{"location":"pages/website/notificationHistory/#notification-history","title":"Notification History","text":"<ol> <li>Statistics for all your messages that log history in the last 30 days</li> <li>All of your notification history details that log in the last 30 days</li> <li>External links &amp; you can use this icon to blacklist a series from Sonarr notifications</li> </ol>"},{"location":"pages/website/transcodeHistory/","title":"Transcode history","text":""},{"location":"pages/website/transcodeHistory/#transcode-history","title":"Transcode History","text":"<p>Transcode History is a history of all Plex Streams Notifiarr received from your Plex Server.</p> <p>It is required that you have a Notifiarr Profile retention of 1 or more days to see this data. This information is gathered from the following Notifiarr Plex Notifications:</p> <ul> <li>Play</li> <li>Resume</li> <li>Session</li> </ul>"},{"location":"pages/website/transcodeHistory/#graphs","title":"Graphs","text":"<ol> <li>The amount of transcodes overall in the last 30 days</li> <li>Video transcodes</li> <li>Audio Transcodes</li> <li>Transcode by device</li> </ol>"},{"location":"pages/website/transcodeHistory/#details","title":"Details","text":"<p>This is a detailed table of each transcode. It will show what was transcoded (audio, video or both), the user and device.</p>"},{"location":"pages/website/translations/","title":"Translations","text":""},{"location":"pages/website/translations/#translations","title":"Translations","text":"<p>Notifiarr Translations are handled on the Notifiarr Weblate</p> <p>If you wish to translate Notifiarr you'll need to:</p> <ol> <li>Sign In to Weblate.</li> <li>Notify Notifiarr Staff on Discord so your role can be applied</li> </ol> <p>Notifiarr Translations only impact Notifications and not the site itself.</p>"},{"location":"pages/website/trending/","title":"Trending","text":""},{"location":"pages/website/trending/#trending","title":"Trending","text":"<ol> <li>Most grabbed among all users with Sonarr enabled in the last 30 days</li> <li> <p>Most grabbed among all users with Radarr enabled in the last 30 days</p> </li> <li> <p>Same idea if you scroll down for those with Plex enabled</p> </li> </ol> <p></p> <ol> <li>Add this as a list to *arr with a Steven Lu list</li> </ol>"}]}