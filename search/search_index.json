{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"Client: ![GitHub commit activity](https://img.shields.io/github/commit-activity/t/notifiarr/notifiarr?label=Commits&amp;style=for-the-badge&amp;color=526cfe) ![GitHub commit activity (branch)](https://img.shields.io/github/commit-activity/t/notifiarr/notifiarr/main?label=Stable (:latest)&amp;style=for-the-badge&amp;color=526cfe) ![GitHub commit activity (branch)](https://img.shields.io/github/commit-activity/t/notifiarr/notifiarr/unstable?label=Unstable (:unstable)&amp;style=for-the-badge&amp;color=526cfe) ![GitHub last commit (branch)](https://img.shields.io/github/last-commit/notifiarr/notifiarr/unstable?label=Last (:unstable)&amp;style=for-the-badge&amp;color=526cfe) ![GitHub contributors](https://img.shields.io/github/contributors/notifiarr/notifiarr?label=Contributors&amp;style=for-the-badge&amp;color=526cfe) ![GitHub issues](https://img.shields.io/github/issues/Notifiarr/notifiarr?&amp;logo=github&amp;style=for-the-badge&amp;color=526cfe) ![GitHub issues](https://img.shields.io/github/issues-closed/Notifiarr/notifiarr?&amp;logo=github&amp;style=for-the-badge&amp;color=526cfe) ![GitHub issues](https://img.shields.io/github/issues-pr/Notifiarr/notifiarr?&amp;logo=github&amp;style=for-the-badge&amp;color=526cfe) ![GitHub issues](https://img.shields.io/github/issues-pr-closed/Notifiarr/notifiarr?&amp;logo=github&amp;style=for-the-badge&amp;color=526cfe) [![GitHub license](https://img.shields.io/github/license/Notifiarr/notifiarr?&amp;logo=github&amp;style=for-the-badge&amp;color=526cfe)](https://github.com/Notifiarr/notifiarr/blob/main/LICENSE)  Site: ![GitHub issues](https://img.shields.io/github/issues/Notifiarr/website?&amp;logo=github&amp;style=for-the-badge&amp;color=526cfe) ![GitHub issues](https://img.shields.io/github/issues-closed/Notifiarr/website?&amp;logo=github&amp;style=for-the-badge&amp;color=526cfe)  Support: [![Discord](https://img.shields.io/discord/764440599066574859?label=Discord&amp;style=for-the-badge&amp;color=7F00FF)](https://notifiarr.com/discord)  ![Logo](assets/logo.png)"},{"location":"#notifiarr","title":"Notifiarr","text":"<p>You just found one of the coolest tools on the Internet for a homelab enthusiast. We do notifications. We do them right. We've been doing then for years and we'll keep doing them for years to come. Notifiarr provides native custom integrations with dozens, maybe hundreds of applications and websites. That means these applications or websites can send data to Notifiarr, and we'll format a message according to your configuration then send it to your chat server.</p> <p>What sets us apart from direct integrations are the options we provide to format your messages. We also maintain and provide, for your conveince, a local agent you may run on any server or network you wish to monitor. The agent is fully configurable to collect network and system data so you can get health reports from your servers.</p> <p>Everything is configurable, even how much data we keep on our servers. You get to decide how long your transaction log files live for, or if your transactions even get logged at all.</p>"},{"location":"#support","title":"Support","text":"<p>Over on discord we have a big community, if you need assistance you can ask there by opening a support thread in the <code>#support</code> channel. </p> <p>Info</p> <p>For Patron access - Link your GitHub from thr Profile Page on the Notifiarr Website</p>"},{"location":"#from-the-author","title":"From the author","text":"<p>I built Notifiarr in late 2019 for myself, and it was used by only myself until August of 2020 when I opened it up for others to use. My goal has always been to have a single location for common notification needs, so I am not jumping around 20 apps to do things. Captain joined the crew in December 2020, and the two of us run the servers and write the code for the client and website.</p>"},{"location":"#integrations","title":"Integrations","text":"<p>see integrations</p>"},{"location":"#additional-features","title":"Additional Features","text":"<ul> <li>Fully configurable on what triggers to get notifications for. Each integration and many triggers in them can go to their own channels.</li> <li>Layout configuration for some notifications</li> <li>Content configuration for most notifications (color, content, etc)</li> <li>Media Requests Bot - Discord Bot for all 4 *Arr apps with:</li> <li>Media Requests</li> <li>User Permissions</li> <li>Approvals</li> <li>Sonarr Profiles</li> <li>Default Options</li> <li>Series Following</li> <li>Discover features</li> <li>Multi-Instance Support</li> <li>Minimal Access - No *Arr apikeys or anything of the sort is used or saved on the site. All requests to the client are verified with your Notifiarr apikey and thrown out if they don't match up</li> <li>TRaSH Custom Format Sync *Patron Feature* - Automated continuous add/sync for the custom formats TRaSH has made to use with Radarr</li> <li>Radarr Collections - A fully automated way to monitor all your Radarr collections with auto add new items to your library as they are put into the collection on TMDb for any monitored collections, etc.</li> </ul>"},{"location":"pages/client/cloudflare/","title":"Cloudflare config","text":""},{"location":"pages/client/cloudflare/#notifiarr-client-cloudflare-configuration","title":"Notifiarr Client - Cloudflare Configuration","text":"<p>Danger</p> <p>None of this is required or necessary. **We recommend NOT exposing your</p> <p>Notifiarr client to the Internet at all. In other words, don't do any of this.** But you can if you want to access your local Notifiarr Client from the internet</p> <p>Many users use Cloudflare's \"Cloudflare Tunnel\" feature or additional Cloudflare security features to provide / protect external access to their Notifiarr Client box.  Specific configuration required for Cloudflare's various options are detailed below.</p>"},{"location":"pages/client/cloudflare/#cloudflare-tunnel","title":"Cloudflare Tunnel","text":"<p>Info</p> <p>This assumes that you already have a Cloudflare Tunnel set up on your system. If you want to get started with Cloudflare Tunnels follow this YouTube guide first: Cloudflare Tunnel: Creating Tunnels via GUI - Bypass CG-NAT by IBRACORP</p> <ol> <li>Login to your Cloudflare teams account at dash.teams.Cloudflare.com</li> <li> <p>Click Tunnels and then configure next to the Cloudflare Tunnel you would like to use </p> </li> <li> <p>In your Tunnel section click on Public Hostname and add a new hostname by clicking on Add a public hostname</p> </li> </ol> <p></p> <ol> <li> <p>Fill in the public hostname information</p> </li> <li> <p><code>Subdomain</code>: Notifiarr (or whatever else you want it to be)</p> </li> <li><code>Domain</code>: choose one of your domains</li> <li><code>Service</code>: HTTP + Your Local IP Address for Notifiarr</li> </ol> <p></p> <p>Save your host name settings, that's it! Your client is now exposed to the internet! </p>"},{"location":"pages/client/configuration/","title":"Config","text":""},{"location":"pages/client/configuration/#web-gui","title":"Web GUI","text":"<p>Open the conf file, set your Notifiarr API Key and restart the client. Point your browser to the client. This can be something like:</p> <ul> <li><code>http://localhost:5454</code></li> <li><code>http://notifiarr</code></li> <li><code>http://192.168.1.10:5454</code></li> </ul> <p>Use the username (default:admin) and apikey you setup in the conf file to login to the app. Now you can configure and setup the client via the UI including changing your password.</p>"},{"location":"pages/client/configuration/#docker-users","title":"Docker Users","text":"<p>When a new docker image is deployed with an empty /config folder mounted, the app will do two things:</p> <ul> <li>If the API Key is not configured or invalid: Create a new ui_password and print it into the log file.</li> <li>Write a brand new config file with this password already saved</li> </ul>"},{"location":"pages/client/configuration/#conf-file","title":".conf File","text":"<ul> <li>You can use env variables, the conf file, or the UI</li> <li>Must provide the \"All\" API key from your Profile page on notifiarr.com</li> <li>The Notifiarr application uses the API key for bi-directional authorization between the Site and the Client.</li> </ul> <p>Unraid Users</p> <p>You must configure the Notifiarr API Key in the Unraid Template/ Container Settings. If you wish to use Plex then you'll also need to set the Plex Token and Plex URL in the template as well. The other integrations can be defined in notifiarr.conf</p> <p>Docker Users</p> <p>Note that Docker Environmental Variables - and thus the Unraid Template - override the Config file.</p>"},{"location":"pages/client/configuration/#compressed-conf-file","title":"Compressed Conf File","text":"<ul> <li>After accessing Notifiarr Client's Webui, upon saving to prevent user caused issues from editing the conf file, the conf file is compressed and will look like gibberish</li> <li>In the rare case the UI is not accessible and the conf file must be edited, you will need to decompress the file with <code>bzcat</code> prior to making your edits</li> </ul> <pre><code>bzcat /path/to/notifiarr.conf &gt; /output/path/to/notifiarr_decomp.conf\n</code></pre>"},{"location":"pages/client/configuration/#log-files","title":"Log Files","text":"<p>You can set a log file in the config for apt/deb linux installs. You should do that. Otherwise, find your logs here:</p> <ul> <li>Linux: <code>/var/log/notifiarr</code></li> <li>Log paths for linux apt/deb installations are hardcoded</li> <li>FreeBSD: <code>/var/log/syslog</code> (w/ default syslog)</li> <li>Homebrew: <code>/usr/local/var/log/app.log</code></li> <li>macOS: <code>~/.notifiarr/notifiarr.log</code></li> <li>Windows: <code>&lt;home folder&gt;/.notifiarr/notifiarr.log</code></li> </ul> <p>In the Client UI log settings can be found under <code>Logging</code> in Settings =&gt; Configuration. Logs can be viewed in the UI under Insights =&gt; Logs.</p>"},{"location":"pages/client/configuration/#detailed-debugging","title":"Detailed Debugging","text":"<p>In the Client UI log settings can be found under <code>Logging</code> in Settings =&gt; Configuration.</p> <ul> <li>Enable <code>Debug Logging</code></li> </ul> <p>Logs can be viewed in the UI under Insights =&gt; Logs.</p>"},{"location":"pages/client/configuration/#clearing-logs","title":"Clearing Logs","text":"<ul> <li> <p>To <code>clear</code> logs to make troubleshooting easier - stop the client and rename/remove the log file, the restart the client.</p> </li> <li> <p>If you have not previously enabled debug logs you do not need to clear anything.</p> </li> </ul>"},{"location":"pages/client/configuration/#hostname","title":"Hostname","text":"<p>It is important that a static hostname is set so the site can keep track of multiple clients for the settings. Some examples of how to do that:</p> <ul> <li>Docker Run users add <code>-h notifiarr</code> to your docker run command</li> <li>Docker Compose users add <code>hostname: notifiarr</code> to your yaml</li> <li>Unraid users add <code>-h notifiarr</code> to Extra Parameters</li> <li>TrueNAS and Kubernetes hostnames will be automatically pulled based on the pod name since they dont offer static hostnames </li> </ul> <p>Note</p> <p>Failure to set a hostname will result in duplicate clients that will need to be resolved once a hostname is set</p>"},{"location":"pages/client/configuration/#wsl2-users","title":"WSL2 users","text":"<ul> <li>Add a volume to your Notifiarr container (This is used for a unique uuid for each client instance)</li> </ul> <pre><code>/etc/machine-id:/etc/machine-id\n</code></pre>"},{"location":"pages/client/configuration/#env-variables","title":"ENV Variables","text":"<p>Config File and Docker Environmental Variables are listed below</p> <ul> <li>Any variable not provided takes the default.</li> <li>Environmental Variables take precedent over config file settings</li> <li>Must provide an API key from notifiarr.com.</li> <li>The Notifiarr application uses the API key for bi-directional authorization.</li> <li>You may provide multiple Sonarr, Radarr or Readarr instances using <code>DN_SONARR_1_URL</code>, <code>DN_SONARR_2_URL</code>, etc or by duplicating the starr block in the conf file. Note the header of <code>[[radarr]]</code>, <code>[[sonarr]]</code>, <code>[[readarr]]</code>, etc. is required.</li> </ul>"},{"location":"pages/client/configuration/#client","title":"Client","text":"Config Name Variable Name Default / Note api_key <code>DN_API_KEY</code> Required / API Key from Notifiarr.com auto_update <code>DN_AUTO_UPDATE</code> <code>off</code> / Set to <code>daily</code> to turn on automatic updates (windows only) bind_addr <code>DN_BIND_ADDR</code> <code>0.0.0.0:5454</code> / The IP and port to listen on quiet <code>DN_QUIET</code> <code>false</code> / Turns off output. Set a log_file if this is true ui_password <code>DN_UI_PASSWORD</code> None by default. Set a username:password &amp; change the password to encrypt it urlbase <code>DN_URLBASE</code> default: <code>/</code> Change the web root with this setting upstreams <code>DN_UPSTREAMS_0</code> List of upstream networks that can set X-Forwarded-For ssl_key_file <code>DN_SSL_KEY_FILE</code> Providing SSL files turns on the SSL listener ssl_cert_file <code>DN_SSL_CERT_FILE</code> Providing SSL files turns on the SSL listener log_file <code>DN_LOG_FILE</code> None by default. Optionally provide a file path to save app logs http_log <code>DN_HTTP_LOG</code> None by default. Provide a file path to save HTTP request logs log_file_mb <code>DN_LOG_FILE_MB</code> <code>100</code> / Max size of log files in megabytes log_files <code>DN_LOG_FILES</code> <code>10</code> / Log files to keep after rotating. <code>0</code> disables rotation file_mode <code>DN_FILE_MODE</code> <code>\"0600\"</code> / Unix octal filemode for new log files timeout <code>DN_TIMEOUT</code> <code>60s</code> / Global API Timeouts (all apps default) <p>All applications below (starr, downloaders, Tautulli, Plex) have a <code>timeout</code> setting. If the configuration for an application is missing the timeout, the global timeout (above) is used.</p>"},{"location":"pages/client/configuration/#secret-settings","title":"Secret Settings","text":"<p>Recommend not messing with these unless instructed to do so.</p> Config Name Variable Name Default / Note extra_keys <code>DN_EXTRA_KEYS_0</code> <code>[]</code> (empty list) / Add keys to allow API requests from places besides notifiarr.com mode <code>DN_MODE</code> <code>production</code> / Change application mode: <code>development</code> or <code>production</code> debug <code>DN_DEBUG</code> <code>false</code> / Adds payloads and other stuff to the log output; very verbose/noisy debug_log <code>DN_DEBUG_LOG</code> <code>\"\"</code> / Set a file system path to write debug logs to a dedicated file max_body <code>DN_MAX_BODY</code> Unlimited, <code>0</code> / Maximum debug-log body size (integer) for payloads to and from notifiarr.com <code>TMPDIR</code> <code>%TMP%</code> on Windows. Varies depending on system; must be writable if using Backup Corruption Check <p>Note: You may disable the GUI (menu item) on Windows by setting the env variable <code>USEGUI</code> to <code>false</code>.</p>"},{"location":"pages/client/configuration/#mysql-snapshots","title":"MySQL Snapshots","text":"<p>You may add mysql credentials to your notifiarr configuration to snapshot mysql service health. This feature snapshots <code>SHOW PROCESSLIST</code> and <code>SHOW STATUS</code> data.</p> <p>Access to a database is not required. Example Grant:</p> <pre><code>GRANT PROCESS ON *.* to 'notifiarr'@'localhost'\n</code></pre> Config Name Variable Name Note snapshot.mysql.name <code>DN_SNAPSHOT_MYSQL_NAME</code> Setting a name enables service checks of MySQL snapshot.mysql.host <code>DN_SNAPSHOT_MYSQL_HOST</code> Something like: <code>localhost:3306</code> snapshot.mysql.user <code>DN_SNAPSHOT_MYSQL_USER</code> Username in the GRANT statement snapshot.mysql.pass <code>DN_SNAPSHOT_MYSQL_PASS</code> Password for the user in the GRANT statement"},{"location":"pages/client/configuration/#lidarr","title":"Lidarr","text":"Config Name Variable Name Note lidarr.name <code>DN_LIDARR_0_NAME</code> No Default. Setting a name enables service checks lidarr.url <code>DN_LIDARR_0_URL</code> No Default. Something like: <code>http://lidarr:8686</code> lidarr.api_key <code>DN_LIDARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr lidarr.username <code>DN_LIDARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled lidarr.password <code>DN_LIDARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled lidarr.http_user <code>DN_LIDARR_0_HTTP_USER</code> Provide username if Lidarr uses basic auth (uncommon) and BCC enabled lidarr.http_pass <code>DN_LIDARR_0_HTTP_PASS</code> Provide password if Lidarr uses basic auth (uncommon) and BCC enabled lidarr.max_body <code>DN_LIDARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on <ul> <li>BCC = Backup Corruption Check</li> </ul>"},{"location":"pages/client/configuration/#prowlarr","title":"Prowlarr","text":"Config Name Variable Name Note prowlarr.name <code>DN_PROWLARR_0_NAME</code> No Default. Setting a name enables service checks prowlarr.url <code>DN_PROWLARR_0_URL</code> No Default. Something like: <code>http://prowlarr:9696</code> prowlarr.api_key <code>DN_PROWLARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr prowlarr.username <code>DN_PROWLARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled prowlarr.password <code>DN_PROWLARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled prowlarr.http_user <code>DN_PROWLARR_0_HTTP_USER</code> Provide username if Prowlarr uses basic auth (uncommon) and BCC enabled prowlarr.http_pass <code>DN_PROWLARR_0_HTTP_PASS</code> Provide password if Prowlarr uses basic auth (uncommon) and BCC enabled prowlarr.max_body <code>DN_PROWLARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on"},{"location":"pages/client/configuration/#radarr","title":"Radarr","text":"Config Name Variable Name Note radarr.name <code>DN_RADARR_0_NAME</code> No Default. Setting a name enables service checks. radarr.url <code>DN_RADARR_0_URL</code> No Default. Something like: <code>http://localhost:7878</code> radarr.api_key <code>DN_RADARR_0_API_KEY</code> No Default. Provide URL and API key if you use Radarr radarr.username <code>DN_RADARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled radarr.password <code>DN_RADARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled radarr.http_user <code>DN_RADARR_0_HTTP_USER</code> Provide username if Radarr uses basic auth (uncommon) and BCC enabled radarr.http_pass <code>DN_RADARR_0_HTTP_PASS</code> Provide password if Radarr uses basic auth (uncommon) and BCC enabled radarr.max_body <code>DN_RADARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on."},{"location":"pages/client/configuration/#readarr","title":"Readarr","text":"Config Name Variable Name Note readarr.name <code>DN_READARR_0_NAME</code> No Default. Setting a name enables service checks readarr.url <code>DN_READARR_0_URL</code> No Default. Something like: <code>http://localhost:8787</code> readarr.api_key <code>DN_READARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr readarr.username <code>DN_READARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled readarr.password <code>DN_READARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled readarr.http_user <code>DN_READARR_0_HTTP_USER</code> Provide username if Readarr uses basic auth (uncommon) and BCC enabled readarr.http_pass <code>DN_READARR_0_HTTP_PASS</code> Provide password if Readarr uses basic auth (uncommon) and BCC enabled readarr.max_body <code>DN_READARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on."},{"location":"pages/client/configuration/#sonarr","title":"Sonarr","text":"Config Name Variable Name Note sonarr.name <code>DN_SONARR_0_NAME</code> No Default. Setting a name enables service checks sonarr.url <code>DN_SONARR_0_URL</code> No Default. Something like: <code>http://localhost:8989</code> sonarr.api_key <code>DN_SONARR_0_API_KEY</code> No Default. Provide URL and API key if you use Sonarr sonarr.username <code>DN_SONARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled sonarr.password <code>DN_SONARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled sonarr.http_user <code>DN_SONARR_0_HTTP_USER</code> Provide username if Sonarr uses basic auth (uncommon) and BCC enabled sonarr.http_pass <code>DN_SONARR_0_HTTP_PASS</code> Provide password if Sonarr uses basic auth (uncommon) and BCC enabled sonarr.max_body <code>DN_SONARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on."},{"location":"pages/client/configuration/#downloaders","title":"Downloaders","text":"<p>You can add supported downloaders so they show up on the dashboard integration. You may easily add service checks to these downloaders by adding a name. Any number of downloaders of any type may be configured.</p> <p>These all also have <code>interval</code> and <code>timeout</code> represented as a Go Duration. Examples: <code>1m</code>, <code>1m30s</code>, <code>3m15s</code>, <code>1h5m</code>. Valid units are<code>s</code>,<code>m</code>, and<code>h</code>. Combining units is additive.</p>"},{"location":"pages/client/configuration/#qbittorrent","title":"QbitTorrent","text":"Config Name Variable Name Note qbit.name <code>DN_QBIT_0_NAME</code> No Default. Setting a name enables service checks qbit.url <code>DN_QBIT_0_URL</code> No Default. Something like: <code>http://localhost:8080</code> qbit.user <code>DN_QBIT_0_USER</code> No Default. Provide URL, user and pass if you use Qbit qbit.pass <code>DN_QBIT_0_PASS</code> No Default. Provide URL, user and pass if you use Qbit qbit.http_user <code>DN_QBIT_0_HTTP_USER</code> Provide this username if Qbit is behind basic auth (uncommon) qbit.http_pass <code>DN_QBIT_0_HTTP_PASS</code> Provide this password if Qbit is behind basic auth (uncommon)"},{"location":"pages/client/configuration/#rtorrent","title":"rTorrent","text":"Config Name Variable Name Note rtorrent.name <code>DN_RTORRENT_0_NAME</code> No Default. Setting a name enables service checks rtorrent.url <code>DN_RTORRENT_0_URL</code> No Default. Something like: <code>http://localhost:5000</code> rtorrent.user <code>DN_RTORRENT_0_USER</code> No Default. Provide URL, user and pass if you use rTorrent rtorrent.pass <code>DN_RTORRENT_0_PASS</code> No Default. Provide URL, user and pass if you use rTorrent"},{"location":"pages/client/configuration/#sabnzbd","title":"SABnzbd","text":"Config Name Variable Name Note sabnzbd.name <code>DN_SABNZBD_0_NAME</code> No Default. Setting a name enables service checks sabnzbd.url <code>DN_SABNZBD_0_URL</code> No Default. Something like: <code>http://localhost:8080/sabnzbd</code> sabnzbd.api_key <code>DN_SABNZBD_0_API_KEY</code> No Default. Provide URL and API key if you use SABnzbd"},{"location":"pages/client/configuration/#deluge","title":"Deluge","text":"Config Name Variable Name Note deluge.name <code>DN_DELUGE_0_NAME</code> No Default. Setting a name enables service checks deluge.url <code>DN_DELUGE_0_URL</code> No Default. Something like: <code>http://localhost:8080</code> deluge.password <code>DN_DELUGE_0_PASSWORD</code> No Default. Provide URL and password key if you use Deluge deluge.http_user <code>DN_DELUGE_0_HTTP_USER</code> Provide this username if Deluge is behind basic auth (uncommon) deluge.http_pass <code>DN_DELUGE_0_HTTP_PASS</code> Provide this password if Deluge is behind basic auth (uncommon)"},{"location":"pages/client/configuration/#nzbget","title":"NZBGet","text":"Config Name Variable Name Note nzbget.name <code>DN_NZBGET_0_NAME</code> No Default. Setting a name enables service checks nzbget.url <code>DN_NZBGET_0_URL</code> No Default. Something like: <code>http://localhost:6789</code> nzbget.user <code>DN_NZBGET_0_USER</code> No Default. Provide URL username and password if you use NZBGet nzbget.pass <code>DN_NZBGET_0_PASS</code> No Default. Provide URL username and password if you use NZBGet"},{"location":"pages/client/configuration/#plex","title":"Plex","text":"<p>This application can also send Plex sessions to Notifiarr so you can receive notifications when users interact with your server. This has three different features:</p> <ul> <li>Notify all sessions on a longer interval (30+ minutes).</li> <li>Notify on session nearing completion (percent complete).</li> <li>Notify on session change (Plex Webhook) ie. pause/resume.</li> </ul> <p>You must provide Plex Token for this to work. You may also need to add a webhook to Plex so it sends notices to this application.</p> <ul> <li>In Plex Media Server, add this URL to webhooks:</li> <li><code>http://localhost:5454/plex?token=plex-token-here</code></li> <li>Replace <code>localhost</code> with the IP or host of the notifiarr application.</li> <li>Replace <code>plex-token-here</code> with your plex token.</li> <li>The Notifiarr application uses the Plex token to authorize incoming webhooks.</li> </ul> Config Name Variable Name Note plex.url <code>DN_PLEX_URL</code> <code>http://localhost:32400</code> / local URL to your plex server plex.token <code>DN_PLEX_TOKEN</code> Required. Must provide Plex Token for this to work."},{"location":"pages/client/configuration/#tautulli","title":"Tautulli","text":"<p>Only 1 Tautulli instance may be configured per client. Providing Tautulli allows Notifiarr to use the \"Friendly Name\" for your Plex users and it allows you to easily enable a service check.</p> Config Name Variable Name Note tautulli.name <code>DN_TAUTULLI_NAME</code> No Default. Setting a name enables service checks of Tautulli tautulli.url <code>DN_TAUTULLI_URL</code> No Default. Something like: <code>http://localhost:8181</code> tautulli.api_key <code>DN_TAUTULLI_API_KEY</code> No Default. Provide URL and API key if you want name maps from Tautulli"},{"location":"pages/client/configuration/#service-checks","title":"Service Checks","text":"<p>The Notifiarr client can also check URLs for health. If you set names on your Starr apps they will be automatically checked and reports sent to Notifiarr. If you provide a log file for service checks, those logs will no longer write to the app log nor to console stdout.</p> Config Name Variable Name Note services.log_file <code>DN_SERVICES_LOG_FILE</code> If a file path is provided, service check logs write there services.interval <code>DN_SERVICES_INTERVAL</code> <code>10m</code>, How often to send service states to Notifiarr; minimum: <code>5m</code> services.parallel <code>DN_SERVICES_PARALLEL</code> <code>1</code>, How many services can be checked at once; 1 is plenty <p>You can also create ad-hoc service checks for things like Bazarr.</p> Config Name Variable Name Note service.name <code>DN_SERVICE_0_NAME</code> Services must have a unique name service.type <code>DN_SERVICE_0_TYPE</code> Type must be one of <code>http</code>, <code>tcp</code>, <code>process</code> service.check <code>DN_SERVICE_0_CHECK</code> The <code>URL</code>, or <code>host/ip:port</code> to check service.expect <code>DN_SERVICE_0_EXPECT</code> <code>200</code>, For HTTP, the return code to expect service.timeout <code>DN_SERVICE_0_TIMEOUT</code> <code>15s</code>, How long to wait for service response service.interval <code>DN_SERVICE_0_INTERVAL</code> <code>5m</code>, How often to check the service <p>When <code>type</code> is set to <code>process</code>, the <code>expect</code> parameter becomes a special variable. You may set it to <code>restart</code> to send a notification when the process restarts. You may set it to <code>running</code> to alert if the process is found running (negative check). You may set it to <code>count:min:max</code>. ie <code>count:1:2</code> means alert if process count is below 1 or above 2. You may combine these with commas. ie <code>restart,count:1:3</code>.</p> <p>By default <code>check</code> is the value to find in the process list. It uses a simple string match. Unless you wrap the value in slashes, then it becomes a regex. ie. use this <code>expect = \"/^/usr/bin/smtpd$/\"</code> to match an exact string.</p> <p>Run <code>notifiarr --ps</code> to view the process list from Notifiarr's point of view.</p>"},{"location":"pages/client/gui/","title":"GUI","text":""},{"location":"pages/client/gui/#notifiarr-client-ui","title":"Notifiarr Client UI","text":"<p>The Client UI is the preferred and recommended method of modifying the Notifiarr configuration file. Its GUI provides an easy and intuitive interface for all users to configure Applications for use with Notifiarr.</p>"},{"location":"pages/client/gui/#enabling-the-client-ui","title":"Enabling the Client UI","text":"<p>Once the Notifiarr client is installed, follow the instructions to set the UI Username/Password as described under Client -&gt; Setup -&gt; Web UI</p> <p>Once the above is done, point your browser to the client and you will be taken to the login screen. Login with your specified Username (default: admin) and configured Password.</p> <p>For initial runs:</p> <ul> <li>If the API Key is configured and valid your password is the APIKey</li> <li>If the API Key is invalid and if there is no existing config the password will be printed in the logs on first run.</li> </ul> <p></p>"},{"location":"pages/client/gui/#forgotten-passwords","title":"Forgotten Passwords","text":""},{"location":"pages/client/gui/#locate-the-password-in-config-file-prior-to-ui-access","title":"Locate the Password in config file prior to UI Access","text":"<p>Execute the below command to print the unecrypted first-start password. This only works for brand new installations.</p> <pre><code># Fix the path yourself:\ngrep ui_password  /path/to/notifiarr/notifiarr.conf\n\n# Unraid usually:\ngrep ui_password  /mnt/user/appdata/Notifiarr/notifiarr.conf\n</code></pre>"},{"location":"pages/client/gui/#liunx-freebsd","title":"Liunx / FreeBSD","text":"<ol> <li>Run this command which resets the password then restarts the applicatoin</li> </ol> <pre><code># Reset password.\nnotifiarr --reset\n# Restart client (linux).\nsystemctl restart notifiarr\n</code></pre>"},{"location":"pages/client/gui/#windows","title":"Windows","text":"<ol> <li>Run this command, and then restart the application</li> </ol> <pre><code>notifiarr.exe --reset\n</code></pre>"},{"location":"pages/client/gui/#docker","title":"Docker","text":"<p>*Also applies to Unraid*</p> <ol> <li>Run these two commands in your host system's terminal (console) while the Notifiarr container is running.    If your container is named <code>notifiarr</code> then replace <code>Notifiarr</code> with the lowercase version.</li> </ol> <pre><code>docker exec Notifiarr /notifiarr --reset\ndocker kill --signal=HUP Notifiarr\n</code></pre> <pre><code># Example output with new password:\n[INFO] 2023/09/08 09:32:11 New 'admin' user password: four38=Draw\n[INFO] 2023/09/08 09:32:11 Writing Config File: /config/notifiarr.conf\n</code></pre> <ol> <li>If you still can't login, restart the container.</li> </ol>"},{"location":"pages/client/gui/#client-ui-homepage","title":"Client UI Homepage","text":"<p>Once logged in you will be taken to the Homepage. From here you are free to navigate the Client and have the power to Modify, Update, Trigger Applications/Integrations and much, much more.</p> <p></p> <ol> <li><code>Notifiarr Client</code> - Clicking this at any stage will take you back to the Homescreen.</li> <li><code>Admin</code> - Provides the user the option to view their profile and to log out of the Client UI.</li> <li><code>Settings</code> - This area allows the user to customize all the available Applications and integrations.</li> <li><code>Insights</code> - This area provides the user analytics and information on how certain integrations are performing as well as the ability to view logs from the Notifiarr Client.</li> <li><code>Restart</code> - Reloads the application configuration and restarts the Client UI.</li> <li><code>Shutdown</code> - This will shut down your local client and will require you to manually start it back up again.</li> <li>A line of text with your username and advising that your API key is valid.</li> </ol>"},{"location":"pages/client/gui/#admin","title":"Admin","text":"<ol> <li><code>Profile</code> - In here you can change your username and password.</li> </ol> <ol> <li><code>Logout</code> - Log out of your Client Homepage.</li> </ol>"},{"location":"pages/client/gui/#settings","title":"Settings","text":"<p>The following sections will be discussed in more detail.</p> <p></p>"},{"location":"pages/client/gui/#configuration","title":"Configuration","text":"<p>Under the configuration menue you can further setup your Notifiarr Client within the following sections.</p> <p>Warning</p> <p>Note that some values may be locked as they are trumped by Enviormental Variables.  Unraid requires the use of the API Key and Plex Settings as enviormental variables.</p> <p>Variables being overwritten with an enviormental variable will look like this. </p>"},{"location":"pages/client/gui/#general","title":"General","text":"<p>The General section is more catered to the ingress and egress options/functionality of the Notifiarr client.</p> <p>Info</p> <p>In most cases the default value will be fine and should only be modified if required.</p> <p></p> <ol> <li><code>Setting Column</code> - Contains the settings you are modifying.</li> <li><code>Current Value Column</code> - Shows the current value of the setting</li> <li><code>New Value Column</code> - Shows the new value for the setting that is being changed.</li> <li><code>API Key</code> - API key from your Notifiarr.com account, required for security validation.</li> </ol> <p>Warning</p> <p>This API must be an All key!</p> <ol> <li><code>Extra Keys</code> - This application uses the Notifiarr.com API key (set above) for incoming authentication. It's not safe to give that key to any other website, person, or third party service. This is because that key is also used for authentication to the Notifiarr.com API. If you want third parties to authenticate to this application's API, you should create custom keys for each integration. As of March 8, 2022, there are no existing integrations, so this is for future use. You can use this section to add extra API keys. Whatever you want. Separate them with newlines or spaces.</li> <li><code>Bind Address</code> - This is the IP and port the app will listen on. 0.0.0.0 means all IPs, and you should use that in almost all cases! Change the port if the default 5454 does not work for you.</li> <li><code>URL Base</code> - This application serves HTTP on / by default. You can change that by typing in something else here.</li> <li><code>Upstreams</code> - If Notifiarr client is behind a reverse proxy (swag, nginx, etc), then you should add that proxy IP here. You can also specify full networks. This controls which IP is written to the web server log file (requestor or x-forwarded-for header). It also allows the x-webauth-user header for proxy authentication. Separate with spaces or new lines.</li> <li><code>Host ID</code> - The Host ID parameter is used to uniquely identify this client installation. Changing this value is discouraged; it should be found automatically. Do not copy this value to another Notifiarr client insallation.</li> <li><code>Parallel Threads</code> - Disabling this setting will make the application use fewer go routines (threads) when gathering data from configured applications. Spreads out CPU usage and lowers memory footprint.</li> <li><code>Retries</code> - Sometimes connections to Notifiarr.com fail. This controls how many times each request will be attempted in case of failures.</li> <li><code>Timeout</code> - This is the timeout for API requests to Notifiarr.com.</li> </ol>"},{"location":"pages/client/gui/#ssl","title":"SSL","text":"<p>The SSL section handles the SSL Certificates and where they are kept so that the Client may use it.</p> <p></p> <ol> <li><code>Cert Key File Path</code> - This is the path to the SSL certificate key file. This is a secret! See Certificate File help for more info.</li> <li><code>Cert File Path</code> - This application can serve HTTPS. Enable that by specifying a certificate file path and key file path. The certificate file should have the full CA chain included.</li> </ol>"},{"location":"pages/client/gui/#services","title":"Services","text":"<p>The Services section is used specifically to adjust the Service checking of all your Apps.</p> <p>Info</p> <p>In most cases the default value will be fine and should only be modified if required.</p> <p></p> <ol> <li><code>Run Checks</code> - Disable or enable monitoring all network and services checks right here.</li> <li><code>Parallel Checks</code> - Normally running service checks 1 at a time is fine, but if you have more than 30 or 40, you may want to increase this. This controls how many checks may run at once.</li> <li><code>Update Interval</code> - How often to send service check results to Notifiarr.com.</li> <li><code>Service Checks</code> - This is a shortcut to the Service Checks settings page.</li> </ol>"},{"location":"pages/client/gui/#logging","title":"Logging","text":"<p>The Logging section, as the name suggests, is centred around the Notifiarr Client logs and has various settings the user can change.</p> <p>Info</p> <p>In most cases the default value will be fine and should only be modified if required.</p> <p></p> <ol> <li><code>Debug Logging</code> - Enabling debug logging causes a lot more data to write to the log. Includes payloads to and from Notifiarr.com and starr apps. Use Max Body settings to control payloads sizes.</li> <li><code>Quiet Logging</code> - Enabling Quiet makes the app not print anything to stdout. This is useful when a log file is enabled and you don't want logs spewing into a start-up daemon too.</li> <li><code>APP Log File</code> - Setting a log file path here will make the application write logs to this path. Highly recommended!</li> <li><code>HTTP Log File</code> - Setting a log file path here will make the application write the HTTP logs to a dedicated file. The file format is in apachelog. Highly recommended.</li> <li><code>Services Log File</code> - Setting a log file path here will make the application write service check results to a dedicated file. Recommended if you have a lot of services.</li> <li><code>Debug Log File</code> - Setting a log file path here will make the application write debug messages to a dedicated log file. Otherwise debug messages write to the main application log.</li> <li><code>Log File Unix Mode</code> - This is the unix file mode used when writing new log files. Recommended values in order of openness: 0600, 0640, 0644</li> <li><code>Max Body Size</code> - When debug is enabled, this setting limits the amount of payload data written to the log, to or from Notifiarr.com.</li> <li><code>Log File Size (MB)</code> - When rotation is enabled (setting Max Log File Count higher than 1), this setting controls how large a file must be to trigger rotation.</li> <li><code>Log File Count</code> - When this setting is 0 or 1, log file rotation is disabled. Setting this to a higher value will rotate all log files, and keep this many of each on disk. Controls all log files.</li> </ol>"},{"location":"pages/client/gui/#starr-apps","title":"Starr Apps","text":"<p>Starr Apps</p> <p>* Completely disable an instance by setting the Timeout to Disabled. * Disable service checks by settings Interval to Disabled. * Use local URLs! Timeouts happen all the time when using a proxied URL * TRaSH Sync currently requires the Starr Apps to be synced to be named.</p> <p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#download-apps","title":"Download Apps","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#media-apps","title":"Media Apps","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#snapshot-apps","title":"Snapshot Apps","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#file-watcher","title":"File Watcher","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#commands","title":"Commands","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#service-checks","title":"Service Checks","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#insights","title":"Insights","text":""},{"location":"pages/client/gui/#triggers","title":"Triggers","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#integrations","title":"Integrations","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#monitoring","title":"Monitoring","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#metrics","title":"Metrics","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#log-files","title":"Log Files","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#config-files","title":"Config Files","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/gui/#system","title":"System","text":"<p>TBA - Refer to the (?) Icons for more information</p>"},{"location":"pages/client/install/","title":"Install","text":""},{"location":"pages/client/install/#linux","title":"Linux","text":"<p>Linux repository hosting provided by </p> <p>This works on any system with <code>apt</code> or <code>yum</code>. If your system does not use APT or YUM, download a binary from the Releases page and install it.</p> <p>Important</p> <p>On Linux, Notifiarr runs as <code>user:group</code> of <code>notifiarr:notifiarr</code>.</p> <ol> <li> <p>Install the Go Lift package repo and Notifiarr with this command:</p> <pre><code>curl -s https://golift.io/repo.sh | sudo bash -s - notifiarr\n</code></pre> </li> <li> <p>After install, edit the config, set your apikey, and restart the service:</p> <pre><code>sudo nano /etc/notifiarr/notifiarr.conf\nsudo systemctl restart notifiarr\n</code></pre> </li> </ol> <p>Info</p> <p>See Configuration Instructions Here</p>"},{"location":"pages/client/install/#arch-linux","title":"Arch Linux","text":"<ul> <li>This one is special; hope you know what you're doing.</li> <li>Build a package with <code>makepkg</code> using the <code>aur</code> source</li> </ul> <p>Info</p> <p>See Configuration Instructions Here</p>"},{"location":"pages/client/install/#freebsd","title":"FreeBSD","text":"<ol> <li>Download a <code>txz</code> package from the Releases page.</li> <li>Install it, edit config, start it.</li> <li>On FreeBSD, Notifiarr runs as <code>user:group</code> of <code>notifiarr:notifiarr</code>.</li> </ol> <p>Example of the above in shell form:</p> <pre><code>wget -qO- https://raw.githubusercontent.com/Notifiarr/notifiarr/main/userscripts/install.sh | sudo bash\nvi /usr/local/etc/notifiarr/notifiarr.conf\nservice notifiarr start\n</code></pre> <p>Info</p> <p>See Configuration Instructions Here</p>"},{"location":"pages/client/install/#truenas-scale","title":"TrueNAS Scale","text":"<p>TrueNAS</p> <p>Please be aware none of us (Devs, Suppprt, etc.) use this but hopefully for those who do this is helpful.</p> <ul> <li>Consider moving away from TrueNAS Scale, and more specifically you must move away from TrueCharts for Notifiarr as Notifiarr v0.7.1 is broken / unsupported and TrueCharts will not upgrade the chart.</li> <li>The next TrueNAS Scale OS release will no longer support TrueCharts after their next OS release in 3 months (~10/2024)</li> <li>For additional information:<ul> <li>Please see some commentary and screenshots on the Notifiarr Discord</li> <li>Refer to TrueNAS Forums as to why TrueCharts Team are no longer updating their apps</li> <li>Be weary of asking for TrueCharts support in the TrueNAS Discord. Per Reddit: Users have been banned</li> </ul> </li> <li>No current TrueNAS Scale users have been able to to write documentation for Notifiarr.<ul> <li>Heavy's Guide is depreciated and will eventually be removed. It may stop working or be out of date at any time.</li> </ul> </li> </ul>"},{"location":"pages/client/install/#macos","title":"macOS","text":""},{"location":"pages/client/install/#macos-app","title":"macOS App","text":"<p>Note</p> <p>This is the recommend installation method for macOS.</p> <ol> <li>Download the signed <code>dmg</code> file from the Releases page.</li> <li>When you open it for the first time it will create a config file and log file:<ol> <li><code>~/.notifiarr/notifiarr.conf</code></li> <li><code>~/.notifiarr/notifiarr.log</code></li> </ol> </li> <li>Edit the config file and reload or restart the app from the menu bar.</li> </ol> <p>Info</p> <p>See Configuration Instructions Here</p>"},{"location":"pages/client/install/#homebrew","title":"Homebrew","text":"<p>Homebrew users</p> <p>Homebrew is not recommend, and may be discontinued in the future.</p> <ol> <li>Install Notifiarr</li> <li>Edit config file at <code>/usr/local/etc/notifiarr/notifiarr.conf</code></li> <li>Start it.</li> </ol> <p>The above in shell form:</p> <pre><code>brew install golift/mugs/notifiarr\nvi /usr/local/etc/notifiarr/notifiarr.conf\nbrew services start notifiarr\n</code></pre>"},{"location":"pages/client/install/#windows","title":"Windows","text":"<p>Info</p> <p>Suggested location and structure based on expierence with permissions</p>"},{"location":"pages/client/install/#desired-outcome","title":"Desired Outcome","text":"<ul> <li><code>C:\\ProgramData\\notifiarr\\notifiarr.amd64.exe</code> - The Application</li> <li><code>C:\\ProgramData\\notifiarr\\notifiarr.conf</code> - The config file. Should only be used to configure the apikey and enable the webui.</li> <li><code>C:\\ProgramData\\notifiarr\\logs</code> - Folder for log files</li> </ul>"},{"location":"pages/client/install/#create-the-folders","title":"Create the folders","text":"<ol> <li>Open C:\\ProgramData and create a folder <code>notifiarr</code></li> <li>Create a new folder named <code>logs</code>, so you now have <code>C:\\ProgramData\\notifiarr\\logs</code><ul> <li>When you add the log paths in the client UI (later steps), make sure you point them to a file such as:</li> <li><code>C:\\ProgramData\\notifiarr\\logs\\app.log</code></li> <li><code>C:\\ProgramData\\notifiarr\\logs\\debug.log</code></li> <li><code>C:\\ProgramData\\notifiarr\\logs\\http.log</code></li> </ul> </li> </ol>"},{"location":"pages/client/install/#if-this-is-a-new-install","title":"If this is a new install","text":"<ol> <li>Download <code>notifiarr.amd64.exe.zip</code> from the Releases page</li> <li>Save it in <code>C:\\ProgramData\\notifiarr</code></li> <li>Open the folder that was created from extracting and copy the <code>.exe</code> + example <code>.conf</code> files up one directory so it is located at:<ul> <li><code>C:\\ProgramData\\notifiarr\\notifiarr.amd64.exe</code></li> <li><code>C:\\ProgramData\\notifiarr\\notifiarr.conf.example</code></li> </ul> </li> <li>You can now delete the <code>.zip</code> file that was downloaded and the folder that was extracted</li> <li>Rename <code>notifiarr.conf.example</code> to <code>notifiarr.conf</code></li> </ol>"},{"location":"pages/client/install/#if-this-is-an-existing-install-being-fixed","title":"If this is an existing install being \"fixed\"","text":"<ol> <li>Stop the client</li> <li>Copy the existing <code>.exe</code> to <code>C:\\ProgramData\\notifiarr\\notifiarr.amd64.exe</code></li> <li>Copy the existing conf file to <code>C:\\ProgramData\\notifiarr\\notifiarr.conf</code></li> <li>If the <code>C:\\users\\&lt;your home folder&gt;\\.notifiarr</code> folder exists, delete it</li> </ol>"},{"location":"pages/client/install/#new-and-existing-installs","title":"New and existing installs","text":"<ul> <li> <p>At this point, the structure should look like the Desired Outcome mentioned above.</p> </li> <li> <p>Right click on the <code>.exe</code> and create a shortcut</p> <ul> <li>Windows 11 users:<ul> <li>Right click on the shortcut and pick properties</li> </ul> </li> <li>Change the target path to <code>C:\\Windows\\System32\\conhost.exe C:\\ProgramData\\notifiarr\\notifiarr.amd64.exe</code> which will minimize the console to the tray when it is ran</li> </ul> </li> <li>Windows logo key + R, type <code>shell:startup</code>, then select OK. This opens the Startup folder.</li> <li>Copy and paste the newly created shortcut from its current location to the opened Startup folder.</li> <li>Double click on the shortcut and the client is now running</li> <li>If this is the first time you have ran it:<ul> <li>Option A: Look at the notifiarr.log (or app.log) and you will see a the credentials in the log</li> <li>Option B: Right click on the notifiarr icon and pick Logs -&gt; View and get the login credentials from there</li> <li>Option C: Open the notifiarr.conf and look at the top for <code>ui_password</code> to get the credentials</li> </ul> </li> </ul> <p>Info</p> <p>See Configuration Instructions Here</p>"},{"location":"pages/client/install/#synology","title":"Synology","text":"<ol> <li>Run the below command while ssh'd in to the NAS. It will run the Syno Install Script located on the Notifiarr Repository</li> </ol> <pre><code>curl -sSL https://raw.githubusercontent.com/Notifiarr/notifiarr/main/userscripts/install-synology.sh | sudo bash\n</code></pre> <p>Info</p> <p>See Configuration Instructions Here</p>"},{"location":"pages/client/install/#docker","title":"Docker","text":"<p>This project builds automatically in Docker Cloud and creates ready-to-use multi-architecture images. The <code>latest</code> tag is always a tagged release in GitHub.</p>"},{"location":"pages/client/install/#compose","title":"Compose","text":"<p>A sample docker compose file may be found in the Github repo here.</p> <p>Unraid Users</p> <p>You must configure a Notifiarr API Key in the Unraid Template. If you wish to use Plex then you'll also need to set the Plex Token and Plex URL in the template as well.</p> <p>Docker Users</p> <p>Note that Docker Environmental Variables - and thus the Unraid Template - override the Config file.</p>"},{"location":"pages/client/install/#docker-config-file","title":"Docker Config File","text":"<ol> <li>Copy the example config file from Notifiarr Client repo.</li> <li>Then grab the image from docker hub and run it.</li> <li>You must enable <code>privileged</code> to use <code>smartctl</code> (<code>monitor_drives</code>) and/or <code>MegaCli</code> (<code>monitor_raid</code>).</li> <li>Map the <code>/var/run/utmp</code> volume if you want to count users.</li> <li>Mount any volumes you want to report storage space for. Where does not matter, \"where\" is the \"name\". e.g. <code>/mnt/nas/data:/synonas</code></li> </ol> <p>Warning</p> <p>You MUST set a static hostname Each client is identified by hostname.</p> <pre><code>docker pull golift/notifiarr\ndocker run --name notifiarr -h notifiarr --restart unless-stopped --privileged -p 5454:5454 -v /path/to/notifiarrconfig/:/config -v /var/run/utmp:/var/run/utmp -v /etc/machine-id:/etc/machine-id golift/notifiarr\ndocker logs notifiarr\n</code></pre>"},{"location":"pages/client/install/#docker-environment-variables","title":"Docker Environment Variables","text":"<p>See below for more information about which environment variables are available.</p> <pre><code>docker pull golift/notifiarr\ndocker run --hostname $(hostname) -d --privileged \\\n  -v /var/run/utmp:/var/run/utmp \\\n  -e \"DN_API_KEY=abcdef-12345-bcfead-43312-bbbaaa-123\" \\\n  -e \"DN_SONARR_0_URL=http://localhost:8989\" \\\n  -e \"DN_SONARR_0_API_KEY=kjsdkasjdaksdj\" \\\n  golift/notifiarr\ndocker logs &lt;container id from docker run&gt;\n</code></pre>"},{"location":"pages/client/install/#home-assistant-os","title":"Home Assistant OS","text":"<p>Home Assistant OS Users</p> <p>Please be aware none of us (Devs, Support, etc.) use this but hopefully for those who do this is helpful.</p> <p>Home Assistant Addon, the person to ask for help is <code>@ZanY</code> on the Notifiarr discord (if they are no longer a member, try their Github)</p>"},{"location":"pages/client/install/#proxmox","title":"Proxmox","text":"<p>Proxmox Users</p> <p>Please be aware none of us (Devs, Support, etc.) use this but hopefully for those who do this is helpful.</p> <ul> <li>Proxmox Helper script provided by the community</li> </ul>"},{"location":"pages/client/install/#ultracc-seedbox","title":"UltraCC Seedbox","text":"<p>UltraCC Seedbox Users</p> <p>Please be aware none of us (Devs, Support, etc.) use this but hopefully for those who do this is helpful.</p> <ol> <li>SSH into your Ultra Seedbox</li> <li>On your landing directory type <code>mkdir notifiarr</code></li> <li>Type <code>cd notifiarr</code></li> <li>On Github find the latest release asset labelled notifiarr.amd64.linux.gz, right  click on that and click copy link.</li> <li>Back on your terminal type <code>wget '&lt;paste link&gt;'</code></li> <li>Type <code>gzip -d notifiarr.*</code></li> <li>Type <code>mv notifiarr.* notifiarr</code></li> <li>Type <code>chmod +x notifiarr</code></li> <li>In the notifiarr folder create notifiarr.conf from this: Github page</li> <li>Type <code>cd /home/$USER/.config/systemd/user</code></li> <li>Type <code>nano notifiarr.service</code></li> <li>Paste the below</li> </ol> <pre><code># Systemd service unit for notifiarr.\n\n[Unit]\nDescription=notifiarr - Official chat integration client for Notifiarr.com\n\n[Service]\nExecStart=/home/$USER/notifiarr/notifiarr \\$DAEMON_OPTS\nRestart=always\nRestartSec=10\nType=simple\nWorkingDirectory=/home/$USER/notifiarr\nEnvironment=DN_LOG_FILE/home/$USER/notifiarr/app.log\nEnvironment=DN_HTTP_LOG=/home/$USER/notifiarr/http.log\nEnvironment=DN_DEBUG_LOG=/home/$USR/notifiarr/debug.log\nEnvironment=DN_SERVICES_LOG_FILE=/home/$USER/notifiarr/services.log\nEnvironment=DN_QUIET=true\n\n[Install]\nWantedBy=default.target\n</code></pre> <ol> <li>Type <code>systemctl --user enable notifiarr</code></li> <li>Type <code>systemctl --user start notifiarr</code></li> <li>Type <code>systemctl --user status notifiarr</code> to check if there are any errors.</li> <li>On your browser go to http://[ultraseedbox url]:5454</li> <li>Log into your Notifarr client and change the base url to /notifiarr and save changes</li> <li>Go back to your ssh console</li> <li>Type <code>cd /home/$USER/.apps/nginx/proxy.d</code></li> <li>Type <code>nano notifiarr.conf</code></li> <li>Paste the below</li> </ol> <pre><code>location /notifiarr {\n    # &lt;put proxy auth directives here&gt; Optional:\n    # proxy_set_header X-WebAuth-User $auth_user;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    set $notifiarr http://127.0.0.1:5454;\n    proxy_pass $notifiarr$request_uri;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $http_connection;\n    proxy_set_header Host $host;\n}\n# Notifiarr Client\nlocation /notifiarr/api {\ndeny all; # remove this line if you really want to expose the API.\n    proxy_set_header X-Forwarded-For $remote_addr;\n    set $notifiarr http://127.0.0.1:5454;\n    proxy_pass $notifiarr$request_uri;\n}\n</code></pre> <ol> <li>Type <code>systemctl --user restart nginx</code></li> <li>Now you should be able to browse to https://[ultraseedbox url]/notifiarr</li> </ol>"},{"location":"pages/client/reverseProxy/","title":"Reverse proxy","text":""},{"location":"pages/client/reverseProxy/#client-reverse-proxy-configuration","title":"Client Reverse Proxy Configuration","text":"<p>Reverse Proxy Users</p> <p>None of this is required or necessary. We recommend NOT exposing your Notifiarr client to the Internet at all. In other words, don't do any of this. But you can if you want to access your local Notifiarr Client from the internet</p> <p>While you can certainly poke a hole your firewall and send the traffic directly to this app, it is recommended that you put it behind a reverse proxy if you're going to expose it. It's pretty easy.</p> <ul> <li>You'll want to tune the <code>upstreams</code> and <code>urlbase</code> client settings for your environment<ul> <li>If your reverse proxy IP is <code>192.168.3.45</code> then set <code>upstreams</code> in the Profile page of the local Notifiarr Client to <code>192.168.3.45/32</code></li> </ul> </li> <li>The <code>urlbase</code> on the local Notifiarr Client configuration page can be left at <code>/</code>, but change it if you serve this app from a subfolder like <code>/notifiarr</code></li> </ul>"},{"location":"pages/client/reverseProxy/#cloudflare-users","title":"Cloudflare Users","text":"<p>Cloudflare Firewall / ZeroTrust users - See this wiki entry to ensure Notifiarr is allowed through Cloudflare</p>"},{"location":"pages/client/reverseProxy/#nginx-subfolder-example","title":"NGINX Subfolder Example","text":"<ul> <li>We'll assume you want to serve the client from <code>/notifiarr</code> and it's running on <code>127.0.0.1</code></li> <li>Here's a sample nginx config to do that:</li> </ul> <pre><code># Notifiarr Client\nlocation /notifiarr/api {\n    deny all; # remove this line if you really want to expose the API.\n    proxy_set_header X-Forwarded-For $remote_addr;\n    set $notifiarr http://127.0.0.1:5454;\n    proxy_pass $notifiarr$request_uri;\n    auth_request off;\n}\n\nlocation /notifiarr {\n    # &lt;put proxy auth directives here&gt; Optional:\n    # proxy_set_header X-WebAuth-User $auth_user;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    set $notifiarr http://127.0.0.1:5454;\n    proxy_pass $notifiarr$request_uri;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $http_connection;\n    proxy_set_header Host $host;\n}\n</code></pre> <p>Make sure the Nginx <code>location</code> path matches the <code>URL base</code> Notifiarr setting. That's all there is to it.</p>"},{"location":"pages/client/reverseProxy/#reverse-proxy-authentication","title":"Reverse Proxy Authentication","text":"<p>Info</p> <p>If using Authelia or Organizr ensure they are passing the username header</p> <p>There is working a SWAG example (with authelia, organizr, ldap) at the bottom of this page.</p> <p>For example in NGINX: if <code>auth_user</code> is the variable your authentication app is passing (and it probably isn't) then your would need:</p> <pre><code>proxy_set_header X-WebAuth-User $auth_user;\n</code></pre>"},{"location":"pages/client/reverseProxy/#traefik","title":"Traefik","text":"<ul> <li>If you are using Traefik, you must utilize a plugin to map the appropriate auth header.</li> <li>The below Traefik yaml created a middleware called <code>webauthheader</code> which maps Authelia's <code>Remote-User</code> header to Notifiarr's expected <code>X-WebAuth-User</code> header. You must then attach the <code>webauthheader</code> middleware to the Notifiarr client in Traefik.</li> <li>Ensure you have configured the <code>/api</code> and <code>/plex</code> endpoints to bypass authentication.</li> </ul> <pre><code>http:\n  middlewares:\n    webauthheader:\n      plugin:\n        htransformation:\n          Rules:\n            - Name: 'Auth header rename'\n              Header: 'Remote-User'\n              Value: 'X-WebAuth-User'\n              Type: 'Rename'\n</code></pre>"},{"location":"pages/client/reverseProxy/#nginx-subdomain-example","title":"NGINX Subdomain Example","text":"<ul> <li>We'll assume you're running LSIO's SWAG docker container</li> <li>Non-SWAG users will need to update the file - including the <code>includes</code> as applicable</li> </ul> <pre><code>## Version 2023/02/09\n## TRaSH drop in for LSIO SWAG\n## Originally from https://gist.github.com/TRaSH-/037235b0440b38c8964a2cbb64179cf3\n## LSIO SWAG https://github.com/linuxserver/docker-swag\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n\n    server_name notifiarr.*;\n\n    include /config/nginx/ssl.conf;\n    include /config/nginx/proxy.conf;\n    include /config/nginx/resolver.conf;\n\n    client_max_body_size 0;\n\n    # enable for ldap auth, fill in ldap details in ldap.conf\n    #include /config/nginx/ldap.conf;\n\n    # enable for Authelia\n    #include /config/nginx/authelia-server.conf;\n\n    set $upstream_app notifiarr;\n    set $upstream_port 5454;\n    set $upstream_proto http;\n\n    location / {\n        # enable the next two lines for http auth\n        #auth_basic \"Restricted\";\n        #auth_basic_user_file /config/nginx/.htpasswd;\n\n        # enable the next two lines for organizr auth\n        #include /config/nginx/orgauth.conf;\n        #auth_request /organizr-auth/0;\n\n        # enable the next two lines for ldap auth\n        #auth_request /auth;\n        #error_page 401 =200 /ldaplogin;\n\n        # enable for Authelia\n        #include /config/nginx/authelia-location.conf;\n\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_set_header X-WebAuth-User $auth_user;\n        proxy_pass $upstream_proto://$upstream_app:$upstream_port;\n    }\n\n    # API path must not be protected by auth, authelia, ldap, etc.\n    location ~ (/notifiarr)?/api {\n        deny all; # remove this line if you really want to expose the API.\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_pass $upstream_proto://$upstream_app:$upstream_port;\n    }\n}\n</code></pre>"},{"location":"pages/client/reverseProxy/#nginx-proxy-manager","title":"Nginx Proxy Manager","text":"<ul> <li>You will need a registered domain name with ddns services</li> <li>Add a subdomain thru aliases on your domain/ddns provider and point it to your external ip</li> <li>Add a proxy host in NPM</li> </ul>"},{"location":"pages/client/reverseProxy/#details-tab","title":"Details Tab","text":"<ol> <li>Domain names: subdomain you just created</li> <li>Scheme: <code>http</code></li> <li>Forwarded Hostname/IP: Your Internal LAN IP hosting Notifiarr E.g. <code>192.168.1.2</code></li> <li>Forward Port : The port Notifiarr is running on, default: <code>5454</code></li> <li>Check <code>Block common exploits</code></li> </ol>"},{"location":"pages/client/reverseProxy/#ssl-tab","title":"SSL Tab","text":"<ol> <li>Choose a certificate ( or make a fresh one pointing to your freshly made subdomain )</li> <li>Check <code>Force SSL and HTTP/2 Support</code></li> <li>Save</li> </ol> <p>You will need to use  Notifiarr Login/Password setup, not the webauth method with the above NPM configuration. See Client UI for more details</p>"},{"location":"pages/client/setup/","title":"Setup","text":""},{"location":"pages/client/setup/#setup","title":"Setup","text":""},{"location":"pages/client/setup/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Find help on Discord: Notifiarr (preferred) or Go Lift (if you like Go).</li> </ul>"},{"location":"pages/client/setup/#tmp-not-found","title":"Tmp not found","text":"<p>Corruption checks require a temp folder to write the db file. This may be a couple hundred megabytes or more. Set the <code>TMPDIR</code> environment variable to a writable path, or mount <code>/tmp</code> to resolve the error.</p>"},{"location":"pages/client/setup/#resolving-duplicate-clients","title":"Resolving Duplicate Clients","text":"<ul> <li>If you have duplicate clients on the website and are setting a hostname after the fact, see these instructions for resolving the duplicates after setting a hostname.</li> </ul>"},{"location":"pages/client/setup/#notifiarr-website","title":"Notifiarr Website","text":"<p>There are non-integration related settings and triggers are configured on the Notifiarr site in the <code>Notifiarr Client Configuration</code> popup (button is located at the top of the setup page. You can get some insight about that on the wiki as well. Integration specific timers and settings are found in the Client Configuration of each Integration that uses the Client.</p>"},{"location":"pages/client/setup/#web-ui","title":"Web UI","text":"<ol> <li> <p>Open the conf file, set your Notifiarr API Key and restart the client.</p> <pre><code>## This API key must be copied \nfrom your notifiarr.com account.\napi_key = \"api-key-from-notifiarr.com\"\n</code></pre> </li> <li> <p>Point your browser to the client (default port: <code>5454</code>). This can be something like:</p> <ul> <li><code>http://localhost:5454</code></li> <li><code>http://192.168.1.10:5454</code></li> </ul> </li> <li> <p>Use the username (default: <code>admin</code>) and the api mey you setup in the conf file to login to the app. Now you can configure and setup the client via the UI including changing your password.</p> </li> </ol>"},{"location":"pages/client/setup/#docker-users","title":"Docker Users","text":"<p>When a new docker image is deployed and an empty /config folder is mounted the app will do two things:</p> <ul> <li>If the API Key is not configured via an enviormental variable or invalid: Create a new ui_password and print it into the log file.</li> <li>Write a brand new config file with this password already saved</li> </ul>"},{"location":"pages/client/setup/#conf-file","title":".conf File","text":"<ul> <li>You can use env variables, the conf file, or the UI.</li> <li>The UI is recommended which requires a one time setting</li> <li>Must provide the \"All\" API key from your Profile page on notifiarr.com</li> <li>The Notifiarr application uses the API key for bi-directional authorization between the Site and the Client.</li> </ul> <p>Warning</p> <p>Unraid Users You must configure the Notifiarr API Key in the Unraid Template/ Container Settings. If you wish to use Plex then you'll also need to set the Plex Token and Plex URL in the template as well. The other integrations can be defined in notifiarr.conf</p> <p>Info</p> <p>Docker Users Note that Docker Environmental Variables - and thus the Unraid Template - override the Config file.</p>"},{"location":"pages/client/setup/#compressed-conf-file","title":"Compressed Conf File","text":"<ul> <li>After accessing Notifiarr Client's Webui, upon saving to prevent user caused issues from editing the conf file, the conf file is compressed and will look like gibberish</li> <li>In the rare case the UI is not accessible and the conf file must be edited, you will need to decompress the file with <code>bzcat</code> prior to making your edits</li> </ul> <pre><code>bzcat /path/to/notifiarr.conf &gt; /output/path/to/notifiarr_decomp.conf\n</code></pre>"},{"location":"pages/client/setup/#log-files","title":"Log Files","text":"<p>You can set a log file in the config for apt/deb linux installs. You should do that. Otherwise, find your logs here:</p> <ul> <li>Linux: <code>/var/log/notifiarr</code></li> <li>Log paths for linux apt/deb installations are hardcoded</li> <li>FreeBSD: <code>/var/log/syslog</code> (w/ default syslog)</li> <li>Homebrew: <code>/usr/local/var/log/app.log</code></li> <li>macOS: <code>~/.notifiarr/notifiarr.log</code></li> <li>Windows: <code>&lt;home folder&gt;/.notifiarr/notifiarr.log</code></li> </ul> <p>In the Client UI log settings can be found under <code>Logging</code> in Settings =&gt; Configuration. Logs can be viewed in the UI under Insights =&gt; Logs.</p>"},{"location":"pages/client/setup/#detailed-debugging","title":"Detailed Debugging","text":"<p>In the Client UI log settings can be found under <code>Logging</code> in Settings =&gt; Configuration.</p> <ul> <li>Enable <code>Debug Logging</code></li> </ul> <p>Logs can be viewed in the UI under Insights =&gt; Logs.</p>"},{"location":"pages/client/setup/#clearing-logs","title":"Clearing Logs","text":"<ul> <li> <p>To <code>clear</code> logs to make troubleshooting easier - stop the client and rename/remove the log file, the restart the client.</p> </li> <li> <p>If you have not previously enabled debug logs you do not need to clear anything.</p> </li> </ul>"},{"location":"pages/client/setup/#hostname","title":"Hostname","text":"<p>It is important that a static hostname is set so the site can keep track of multiple clients for the settings. Some examples of how to do that:</p> <ul> <li>Docker Run users add <code>-h notifiarr</code> to your docker run command</li> <li>Docker Compose users add <code>hostname: notifiarr</code> to your yaml</li> <li>Unraid users add <code>-h notifiarr</code> to Extra Parameters</li> <li>TrueNAS and Kubernetes hostnames will be automatically pulled based on the pod name since they dont offer static hostnames </li> </ul> <p>Failure to set a hostname will result in duplicate clients that will need to be resolved once a hostname is set.</p>"},{"location":"pages/client/setup/#wsl2-users","title":"WSL2 users","text":"<ul> <li>Add a volume to your Notifiarr container (This is used for a unique uuid for each client instance)</li> </ul> <pre><code>/etc/machine-id:/etc/machine-id\n</code></pre>"},{"location":"pages/client/setup/#env-variables","title":"ENV Variables","text":"<p>Config File and Docker Environmental Variables are listed below</p> <ul> <li>Any variable not provided takes the default.</li> <li>Environmental Variables take precedent over config file settings</li> <li>Must provide an API key from notifiarr.com.</li> <li>The Notifiarr application uses the API key for bi-directional authorization.</li> <li>You may provide multiple Sonarr, Radarr or Readarr instances using <code>DN_SONARR_1_URL</code>, <code>DN_SONARR_2_URL</code>, etc or by duplicating the starr block in the conf file. Note the header of <code>[[radarr]]</code>, <code>[[sonarr]]</code>, <code>[[readarr]]</code>, etc. is required.</li> </ul>"},{"location":"pages/client/setup/#client","title":"Client","text":"Config Name Variable Name Default / Note api_key <code>DN_API_KEY</code> Required / API Key from Notifiarr.com auto_update <code>DN_AUTO_UPDATE</code> <code>off</code> / Set to <code>daily</code> to turn on automatic updates (windows only) bind_addr <code>DN_BIND_ADDR</code> <code>0.0.0.0:5454</code> / The IP and port to listen on quiet <code>DN_QUIET</code> <code>false</code> / Turns off output. Set a log_file if this is true ui_password <code>DN_UI_PASSWORD</code> None by default. Set a username:password &amp; change the password to encrypt it urlbase <code>DN_URLBASE</code> default: <code>/</code> Change the web root with this setting upstreams <code>DN_UPSTREAMS_0</code> List of upstream networks that can set X-Forwarded-For ssl_key_file <code>DN_SSL_KEY_FILE</code> Providing SSL files turns on the SSL listener ssl_cert_file <code>DN_SSL_CERT_FILE</code> Providing SSL files turns on the SSL listener log_file <code>DN_LOG_FILE</code> None by default. Optionally provide a file path to save app logs http_log <code>DN_HTTP_LOG</code> None by default. Provide a file path to save HTTP request logs log_file_mb <code>DN_LOG_FILE_MB</code> <code>100</code> / Max size of log files in megabytes log_files <code>DN_LOG_FILES</code> <code>10</code> / Log files to keep after rotating. <code>0</code> disables rotation file_mode <code>DN_FILE_MODE</code> <code>\"0600\"</code> / Unix octal filemode for new log files timeout <code>DN_TIMEOUT</code> <code>60s</code> / Global API Timeouts (all apps default) <p>All applications below (starr, downloaders, Tautulli, Plex) have a <code>timeout</code> setting. If the configuration for an application is missing the timeout, the global timeout (above) is used.</p>"},{"location":"pages/client/setup/#secret-settings","title":"Secret Settings","text":"<p>Recommend not messing with these unless instructed to do so.</p> Config Name Variable Name Default / Note extra_keys <code>DN_EXTRA_KEYS_0</code> <code>[]</code> (empty list) / Add keys to allow API requests from places besides notifiarr.com mode <code>DN_MODE</code> <code>production</code> / Change application mode: <code>development</code> or <code>production</code> debug <code>DN_DEBUG</code> <code>false</code> / Adds payloads and other stuff to the log output; very verbose/noisy debug_log <code>DN_DEBUG_LOG</code> <code>\"\"</code> / Set a file system path to write debug logs to a dedicated file max_body <code>DN_MAX_BODY</code> Unlimited, <code>0</code> / Maximum debug-log body size (integer) for payloads to and from notifiarr.com <code>TMPDIR</code> <code>%TMP%</code> on Windows. Varies depending on system; must be writable if using Backup Corruption Check <p>Note</p> <p>You may disable the GUI (menu item) on Windows by setting the env variable <code>USEGUI</code> to <code>false</code>._</p>"},{"location":"pages/client/setup/#mysql-snapshots","title":"MySQL Snapshots","text":"<p>You may add mysql credentials to your notifiarr configuration to snapshot mysql service health. This feature snapshots <code>SHOW PROCESSLIST</code> and <code>SHOW STATUS</code> data.</p> <p>Access to a database is not required. Example Grant:</p> <pre><code>GRANT PROCESS ON *.* to 'notifiarr'@'localhost'\n</code></pre> Config Name Variable Name Note snapshot.mysql.name <code>DN_SNAPSHOT_MYSQL_NAME</code> Setting a name enables service checks of MySQL snapshot.mysql.host <code>DN_SNAPSHOT_MYSQL_HOST</code> Something like: <code>localhost:3306</code> snapshot.mysql.user <code>DN_SNAPSHOT_MYSQL_USER</code> Username in the GRANT statement snapshot.mysql.pass <code>DN_SNAPSHOT_MYSQL_PASS</code> Password for the user in the GRANT statement"},{"location":"pages/client/setup/#lidarr","title":"Lidarr","text":"Config Name Variable Name Note lidarr.name <code>DN_LIDARR_0_NAME</code> No Default. Setting a name enables service checks lidarr.url <code>DN_LIDARR_0_URL</code> No Default. Something like: <code>http://lidarr:8686</code> lidarr.api_key <code>DN_LIDARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr lidarr.username <code>DN_LIDARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled lidarr.password <code>DN_LIDARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled lidarr.http_user <code>DN_LIDARR_0_HTTP_USER</code> Provide username if Lidarr uses basic auth (uncommon) and BCC enabled lidarr.http_pass <code>DN_LIDARR_0_HTTP_PASS</code> Provide password if Lidarr uses basic auth (uncommon) and BCC enabled lidarr.max_body <code>DN_LIDARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on <ul> <li>BCC = Backup Corruption Check</li> </ul>"},{"location":"pages/client/setup/#prowlarr","title":"Prowlarr","text":"Config Name Variable Name Note prowlarr.name <code>DN_PROWLARR_0_NAME</code> No Default. Setting a name enables service checks prowlarr.url <code>DN_PROWLARR_0_URL</code> No Default. Something like: <code>http://prowlarr:9696</code> prowlarr.api_key <code>DN_PROWLARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr prowlarr.username <code>DN_PROWLARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled prowlarr.password <code>DN_PROWLARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled prowlarr.http_user <code>DN_PROWLARR_0_HTTP_USER</code> Provide username if Prowlarr uses basic auth (uncommon) and BCC enabled prowlarr.http_pass <code>DN_PROWLARR_0_HTTP_PASS</code> Provide password if Prowlarr uses basic auth (uncommon) and BCC enabled prowlarr.max_body <code>DN_PROWLARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on"},{"location":"pages/client/setup/#radarr","title":"Radarr","text":"Config Name Variable Name Note radarr.name <code>DN_RADARR_0_NAME</code> No Default. Setting a name enables service checks. radarr.url <code>DN_RADARR_0_URL</code> No Default. Something like: <code>http://localhost:7878</code> radarr.api_key <code>DN_RADARR_0_API_KEY</code> No Default. Provide URL and API key if you use Radarr radarr.username <code>DN_RADARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled radarr.password <code>DN_RADARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled radarr.http_user <code>DN_RADARR_0_HTTP_USER</code> Provide username if Radarr uses basic auth (uncommon) and BCC enabled radarr.http_pass <code>DN_RADARR_0_HTTP_PASS</code> Provide password if Radarr uses basic auth (uncommon) and BCC enabled radarr.max_body <code>DN_RADARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on."},{"location":"pages/client/setup/#readarr","title":"Readarr","text":"Config Name Variable Name Note readarr.name <code>DN_READARR_0_NAME</code> No Default. Setting a name enables service checks readarr.url <code>DN_READARR_0_URL</code> No Default. Something like: <code>http://localhost:8787</code> readarr.api_key <code>DN_READARR_0_API_KEY</code> No Default. Provide URL and API key if you use Readarr readarr.username <code>DN_READARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled readarr.password <code>DN_READARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled readarr.http_user <code>DN_READARR_0_HTTP_USER</code> Provide username if Readarr uses basic auth (uncommon) and BCC enabled readarr.http_pass <code>DN_READARR_0_HTTP_PASS</code> Provide password if Readarr uses basic auth (uncommon) and BCC enabled readarr.max_body <code>DN_READARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on."},{"location":"pages/client/setup/#sonarr","title":"Sonarr","text":"Config Name Variable Name Note sonarr.name <code>DN_SONARR_0_NAME</code> No Default. Setting a name enables service checks sonarr.url <code>DN_SONARR_0_URL</code> No Default. Something like: <code>http://localhost:8989</code> sonarr.api_key <code>DN_SONARR_0_API_KEY</code> No Default. Provide URL and API key if you use Sonarr sonarr.username <code>DN_SONARR_0_USERNAME</code> Provide username if using backup corruption check and auth is enabled sonarr.password <code>DN_SONARR_0_PASSWORD</code> Provide password if using backup corruption check and auth is enabled sonarr.http_user <code>DN_SONARR_0_HTTP_USER</code> Provide username if Sonarr uses basic auth (uncommon) and BCC enabled sonarr.http_pass <code>DN_SONARR_0_HTTP_PASS</code> Provide password if Sonarr uses basic auth (uncommon) and BCC enabled sonarr.max_body <code>DN_SONARR_0_MAX_BODY</code> <code>0</code> (off) / How much of the response body is logged when debug is on."},{"location":"pages/client/setup/#downloaders","title":"Downloaders","text":"<p>You can add supported downloaders so they show up on the dashboard integration. You may easily add service checks to these downloaders by adding a name. Any number of downloaders of any type may be configured.</p> <p>These all also have <code>interval</code> and <code>timeout</code> represented as a Go Duration. Examples: <code>1m</code>, <code>1m30s</code>, <code>3m15s</code>, <code>1h5m</code>. Valid units are<code>s</code>,<code>m</code>, and<code>h</code>. Combining units is additive.</p>"},{"location":"pages/client/setup/#qbittorrent","title":"QbitTorrent","text":"Config Name Variable Name Note qbit.name <code>DN_QBIT_0_NAME</code> No Default. Setting a name enables service checks qbit.url <code>DN_QBIT_0_URL</code> No Default. Something like: <code>http://localhost:8080</code> qbit.user <code>DN_QBIT_0_USER</code> No Default. Provide URL, user and pass if you use Qbit qbit.pass <code>DN_QBIT_0_PASS</code> No Default. Provide URL, user and pass if you use Qbit qbit.http_user <code>DN_QBIT_0_HTTP_USER</code> Provide this username if Qbit is behind basic auth (uncommon) qbit.http_pass <code>DN_QBIT_0_HTTP_PASS</code> Provide this password if Qbit is behind basic auth (uncommon)"},{"location":"pages/client/setup/#rtorrent","title":"rTorrent","text":"Config Name Variable Name Note rtorrent.name <code>DN_RTORRENT_0_NAME</code> No Default. Setting a name enables service checks rtorrent.url <code>DN_RTORRENT_0_URL</code> No Default. Something like: <code>http://localhost:5000</code> rtorrent.user <code>DN_RTORRENT_0_USER</code> No Default. Provide URL, user and pass if you use rTorrent rtorrent.pass <code>DN_RTORRENT_0_PASS</code> No Default. Provide URL, user and pass if you use rTorrent"},{"location":"pages/client/setup/#sabnzbd","title":"SABnzbd","text":"Config Name Variable Name Note sabnzbd.name <code>DN_SABNZBD_0_NAME</code> No Default. Setting a name enables service checks sabnzbd.url <code>DN_SABNZBD_0_URL</code> No Default. Something like: <code>http://localhost:8080/sabnzbd</code> sabnzbd.api_key <code>DN_SABNZBD_0_API_KEY</code> No Default. Provide URL and API key if you use SABnzbd"},{"location":"pages/client/setup/#deluge","title":"Deluge","text":"Config Name Variable Name Note deluge.name <code>DN_DELUGE_0_NAME</code> No Default. Setting a name enables service checks deluge.url <code>DN_DELUGE_0_URL</code> No Default. Something like: <code>http://localhost:8080</code> deluge.password <code>DN_DELUGE_0_PASSWORD</code> No Default. Provide URL and password key if you use Deluge deluge.http_user <code>DN_DELUGE_0_HTTP_USER</code> Provide this username if Deluge is behind basic auth (uncommon) deluge.http_pass <code>DN_DELUGE_0_HTTP_PASS</code> Provide this password if Deluge is behind basic auth (uncommon)"},{"location":"pages/client/setup/#nzbget","title":"NZBGet","text":"Config Name Variable Name Note nzbget.name <code>DN_NZBGET_0_NAME</code> No Default. Setting a name enables service checks nzbget.url <code>DN_NZBGET_0_URL</code> No Default. Something like: <code>http://localhost:6789</code> nzbget.user <code>DN_NZBGET_0_USER</code> No Default. Provide URL username and password if you use NZBGet nzbget.pass <code>DN_NZBGET_0_PASS</code> No Default. Provide URL username and password if you use NZBGet"},{"location":"pages/client/setup/#plex","title":"Plex","text":"<p>This application can also send Plex sessions to Notifiarr so you can receive notifications when users interact with your server. This has three different features:</p> <ul> <li>Notify all sessions on a longer interval (30+ minutes).</li> <li>Notify on session nearing completion (percent complete).</li> <li>Notify on session change (Plex Webhook) ie. pause/resume.</li> </ul> <p>You must provide Plex Token for this to work. You may also need to add a webhook to Plex so it sends notices to this application.</p> <ul> <li>In Plex Media Server, add this URL to webhooks:</li> <li><code>http://localhost:5454/plex?token=plex-token-here</code></li> <li>Replace <code>localhost</code> with the IP or host of the notifiarr application.</li> <li>Replace <code>plex-token-here</code> with your plex token.</li> <li>The Notifiarr application uses the Plex token to authorize incoming webhooks.</li> </ul> Config Name Variable Name Note plex.url <code>DN_PLEX_URL</code> <code>http://localhost:32400</code> / local URL to your plex server plex.token <code>DN_PLEX_TOKEN</code> Required. Must provide Plex Token for this to work."},{"location":"pages/client/setup/#tautulli","title":"Tautulli","text":"<p>Only 1 Tautulli instance may be configured per client. Providing Tautulli allows Notifiarr to use the \"Friendly Name\" for your Plex users and it allows you to easily enable a service check.</p> Config Name Variable Name Note tautulli.name <code>DN_TAUTULLI_NAME</code> No Default. Setting a name enables service checks of Tautulli tautulli.url <code>DN_TAUTULLI_URL</code> No Default. Something like: <code>http://localhost:8181</code> tautulli.api_key <code>DN_TAUTULLI_API_KEY</code> No Default. Provide URL and API key if you want name maps from Tautulli"},{"location":"pages/client/setup/#service-checks","title":"Service Checks","text":"<p>The Notifiarr client can also check URLs for health. If you set names on your Starr apps they will be automatically checked and reports sent to Notifiarr. If you provide a log file for service checks, those logs will no longer write to the app log nor to console stdout.</p> Config Name Variable Name Note services.log_file <code>DN_SERVICES_LOG_FILE</code> If a file path is provided, service check logs write there services.interval <code>DN_SERVICES_INTERVAL</code> <code>10m</code>, How often to send service states to Notifiarr; minimum: <code>5m</code> services.parallel <code>DN_SERVICES_PARALLEL</code> <code>1</code>, How many services can be checked at once; 1 is plenty <p>You can also create ad-hoc service checks for things like Bazarr.</p> Config Name Variable Name Note service.name <code>DN_SERVICE_0_NAME</code> Services must have a unique name service.type <code>DN_SERVICE_0_TYPE</code> Type must be one of <code>http</code>, <code>tcp</code>, <code>process</code> service.check <code>DN_SERVICE_0_CHECK</code> The <code>URL</code>, or <code>host/ip:port</code> to check service.expect <code>DN_SERVICE_0_EXPECT</code> <code>200</code>, For HTTP, the return code to expect service.timeout <code>DN_SERVICE_0_TIMEOUT</code> <code>15s</code>, How long to wait for service response service.interval <code>DN_SERVICE_0_INTERVAL</code> <code>5m</code>, How often to check the service <p>When <code>type</code> is set to <code>process</code>, the <code>expect</code> parameter becomes a special variable. You may set it to <code>restart</code> to send a notification when the process restarts. You may set it to <code>running</code> to alert if the process is found running (negative check). You may set it to <code>count:min:max</code>. ie <code>count:1:2</code> means alert if process count is below 1 or above 2. You may combine these with commas. ie <code>restart,count:1:3</code>.</p> <p>By default <code>check</code> is the value to find in the process list. It uses a simple string match. Unless you wrap the value in slashes, then it becomes a regex. ie. use this <code>expect = \"/^/usr/bin/smtpd$/\"</code> to match an exact string.</p> <p>Run <code>notifiarr --ps</code> to view the process list from Notifiarr's point of view.</p>"},{"location":"pages/client/setup/#docker-compose","title":"Docker Compose","text":"<p>Info</p> <p>See the Installation Page</p>"},{"location":"pages/client/setup/#snapshot-dependencies","title":"Snapshot Dependencies","text":"<p>This application can take a snapshot of your system at an interval and send you a notification. Snapshot means system health like cpu, memory, disk, raid, users, etc. Other data available in the snapshot: mysql health, <code>iotop</code>, <code>iostat</code> and <code>top</code> data. Some of this may only be available on Linux, but other platforms have similar abilities.</p> <p>If you monitor drive health you must have smartmontools (<code>smartctl</code>) installed. If you use smartctl on Linux, you must enable sudo. Add the sudoers entry below to <code>/etc/sudoers</code> and fix the path to <code>smartctl</code> if yours differs. If you monitor raid and use MegaCli (LSI card), add the appropriate sudoers entry for that too.</p> <p>To monitor application disk I/O you may install <code>iotop</code> and add the sudoers entry for it, shown below. This feature is enabled on the website.</p>"},{"location":"pages/client/setup/#snapshot-sudoers","title":"Snapshot Sudoers","text":"<p>The following sudoers entries are used by various snapshot features. Add them if you use the respective feature. You can usually just put the following content into <code>/etc/sudoers</code> or <code>/etc/sudoers.d/00-notifiarr</code>. Make sure the 00-notifiarr file has the proper permissions needed <code>chmod 400 /etc/sudoers.d/00-notifiarr</code>.</p> <pre><code># Allows drive health monitoring on macOS, Linux/Docker and FreeBSD.\nnotifiarr ALL=(root) NOPASSWD:/usr/sbin/smartctl *\n\n# Allows disk utilization monitoring on Linux (non-Docker).\nnotifiarr ALL=(root) NOPASSWD:/usr/sbin/iotop *\n\n# Allows monitoring megaraid volumes on macOS, Linux/Docker and FreeBSD.\n# Rarely needed, and you'll know if you need this.\nnotifiarr ALL=(root) NOPASSWD:/usr/sbin/MegaCli64 -LDInfo -Lall -aALL\n</code></pre>"},{"location":"pages/client/setup/#snapshot-packages","title":"Snapshot Packages","text":""},{"location":"pages/client/setup/#windows","title":"Windows","text":"<p><code>smartmontools</code> - get it here https://sourceforge.net/projects/smartmontools/</p>"},{"location":"pages/client/setup/#linux","title":"Linux","text":"<ul> <li>Debian/Ubuntu: <code>apt install smartmontools</code></li> <li>RedHat/CentOS: <code>yum install smartmontools</code></li> <li>Docker:    It's already in the container. Lucky you! Just run the container in <code>--privileged</code> mode.</li> <li>Synology: <code>opkg install smartmontools</code>, but first get Entware:</li> <li>Entware (synology):  https://github.com/Entware/Entware-ng/wiki/Install-on-Synology-NAS</li> <li>Entware Package List:  https://github.com/Entware/Entware-ng/wiki/Install-on-Synology-NAS</li> </ul>"},{"location":"pages/client/setup/#setup-index","title":"Setup Index","text":"<ul> <li>Setup</li> <li>Troubleshooting</li> <li>Resolving Duplicate Clients</li> <li>Tmp Not Found</li> <li>Notifiarr Website</li> <li>Web UI</li> <li>.conf File</li> <li>Log Files</li> <li>Detailed Debugging</li> <li>Clearing Logs</li> <li>Hostname</li> <li>WSL2 users</li> <li>ENV Variables</li> <li>Client</li> <li>Secret Settings</li> <li>System Snapshot</li> <li>Snapshot Sudoers</li> <li>Snapshot Packages</li> <li>MySQL Snapshots</li> <li>Lidarr</li> <li>Prowlarr</li> <li>Radarr</li> <li>Readarr</li> <li>Sonarr</li> <li>Downloaders</li> <li>QbitTorrent</li> <li>rTorrent</li> <li>SABnzbd</li> <li>Deluge</li> <li>NZBGet</li> <li>Plex</li> <li>Tautulli</li> <li>Service Checks</li> <li>Docker Compose</li> </ul>"},{"location":"pages/discordbot/custombot/","title":"Custom Bot","text":"<p>Info</p> <p>Let the Staff know that you want to run your own bot instead of the Notifiarr bot so we can enable it for your account. Keep in mind this is a Sub feature.</p>"},{"location":"pages/discordbot/custombot/#discord","title":"Discord","text":""},{"location":"pages/discordbot/custombot/#dev-portal","title":"Dev portal","text":"<p>There are tons of tutorials online about creating a Discord bot, it is super simple. After you have created your bot and you are on the page where you copy your bot token, make sure you check the intents</p>"},{"location":"pages/discordbot/custombot/#privileged-gateway-intents","title":"Privileged Gateway Intents","text":"<ul> <li>PRESENCE INTENT</li> <li>SERVER MEMBERS INTENT</li> <li>MESSAGE CONTENT INTENT</li> </ul> <p>After you have created the bot, invite it to your server. It will show offline for now and that is fine &amp; expected.</p>"},{"location":"pages/discordbot/custombot/#your-server","title":"Your Server","text":"<p>Now that you have added the bot to your server you need to get the bots id. Right click on the bot and select the bottom option \"Copy User ID\"</p>"},{"location":"pages/discordbot/custombot/#notifiarr-website","title":"Notifiarr Website","text":"<p>After the Admins have enabled it you simply need to go to your profile and in the Notification section is a place for the Bot Token and Bot Id. Add those pieces of information and click save so the site will create a container for your bot.</p> <p>Since you already added the bot to your server above, once you hit save it should only take a few seconds for the bot to show online in your server.</p>"},{"location":"pages/discordbot/permissions/","title":"Permissions","text":"<p>Getting permissions correct for your setup can be a struggle depending on how you have your Discord server setup. If you want to run a simple test to see if you have permission issues, set the Notifiarr role to have <code>Admin</code> permission and see whether it solves your issue. If everything works, this means you simply need to adjust permissions for the the Notifiarr role and you don't need to give it full admin permissions. </p> <p>To update the integration's permissions, click on your server name at the top and pick <code>Server Settings &gt; Roles</code>. Click on the <code>Notifiarr</code> role and then pick <code>Permissions</code>.</p>"},{"location":"pages/discordbot/permissions/#required-permissions","title":"Required Permissions","text":"<ol> <li><code>View Channels</code><ul> <li>The bot needs this role to generate a channel list so you can assign which notifications go to which channels on your server. If the channel is a private channel, you may also need to adjust channel specific permissions.</li> </ul> </li> <li><code>Send Messages and Create Posts</code><ul> <li>This one is obvious, without it the bot role can not add messages to channels</li> </ul> </li> <li><code>Embed Links</code><ul> <li>Many notifications have links (such as TMDb, TVDb, IMDb, Website links, etc.)</li> </ul> </li> <li><code>Add Reactions</code><ul> <li>*arr and Plex notifications add reactions to notifications to signify things such as the indexer, manual or rss grab, imported, failed, unpacked, subtitles, etc.</li> </ul> </li> <li><code>Mention @everyone, @here and All Roles</code><ul> <li>Needed if you have alerts setup with Snapshots or Media Request integrations so the proper user/role can be @mentioned</li> </ul> </li> <li><code>Manage Messages</code><ul> <li>This is used for the Media Request integration so the bot can remove all the back and forth posts when adding new things to leave a clean channel history</li> </ul> </li> <li><code>Read Message History</code><ul> <li>This is used for the Media Request integration so the bot can get the user interactions and is also used to place reactions on existing messages</li> </ul> </li> </ol>"},{"location":"pages/discordbot/permissions/#optional-permissions","title":"Optional Permissions","text":"<ol> <li><code>Use External Emojis</code><ul> <li>Only required if the reactions you use are from another server</li> </ul> </li> <li><code>Manage Channels</code><ul> <li>Only required with the Channel stats integration</li> </ul> </li> <li><code>Connect</code><ul> <li>Only required with the Channel stats integration</li> </ul> </li> </ol> <p>If you manage your channels with individual permissions plus bot permissions, you will need to adjust them accordingly so the bot can do its job. </p> <ul> <li> <p>If permissions are misconfigured, then the Notifiarr site will auto-disable the integration after 25 Discord API errors. </p> </li> <li> <p>If you are using reactions and get API errors, the site will auto-remove the reaction. </p> </li> <li> <p>If you are using the bot and have cleanup history enabled and get API errors, the site will auto disable it.</p> </li> </ul> <p>You will know when the site does this with a big red notice on top of the setup page that explains the error that Discord reported and what action was taken. All you have to do is fix the issue and re-enable what the site disabled from that point.</p>"},{"location":"pages/faq/faq/","title":"Faq","text":""},{"location":"pages/faq/faq/#faq","title":"FAQ","text":""},{"location":"pages/faq/faq/#why-is-a-discord-server-needed","title":"Why is a Discord Server needed?","text":"<ul> <li>You need to have a discord server to invite the bot to so the notifications have a place to go.</li> </ul>"},{"location":"pages/faq/faq/#what-is-notifiarrs-website-ip-address","title":"What is Notifiarr's (website) IP Address","text":"<ul> <li>Some more security conscious users restrict incoming traffic to only certain IP addresses.</li> <li>The Notifiarr Website's IP address is rather \"sticky\" and rarely changes. However, you can always find the current IP address by getting the IP of the domain listed below.</li> </ul> <pre><code>ping origin-proxy.notifiarr.com\n</code></pre>"},{"location":"pages/faq/faq/#q-is-the-notifiarr-client-required","title":"Q. Is the Notifiarr client required?","text":"<ul> <li>The client is only required for certain integrations/features. If you open the <code>Manage Integrations</code> on the site, it will display in the bottom right corner as well which need the client.</li> </ul>"},{"location":"pages/faq/faq/#integrations","title":"Integrations","text":"<ul> <li>Channel Stats</li> <li>Dashboard</li> <li>MDBList (Adding lists &amp; movies to Radarr, Adding shows to Sonarr)</li> <li>Media Requests</li> <li>Network</li> <li>Plex</li> <li>Lidarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>Prowlarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>Radarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>Readarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>Reciperr (Adding lists &amp; movies to Radarr)</li> <li>Snapshot</li> <li>Sonarr (Backup, Corruption &amp; Stuck Queue notifications)</li> <li>TRaSH Custom Format &amp; Profile Sync (Patron)</li> <li>Client Commands</li> <li>Discord triggering, automation, and advanced features (Sub)</li> </ul>"},{"location":"pages/faq/faq/#features","title":"Features","text":"<ul> <li>Radarr Collections</li> <li>Automatic unmonitoring of movies/episodes after finish</li> <li>Automatic refresh of TBA episodes</li> <li>Automatic plex session killing per user/device based on rules</li> <li>Stuck queue item notifications</li> <li>Starr backup/corruption check notifications</li> </ul>"},{"location":"pages/faq/faq/#q-how-do-i-monitor-the-queue-for-stuck-items","title":"Q. How do I monitor the queue for stuck items?","text":"<ul> <li> <p>Open the Client Settings on the site and expand the Starr section to set the notify times.</p> </li> <li> <p>It will notify once when it thinks it is stuck and then update the existing message every 5 minutes until it is imported so you can see the amount of time it is stuck and why. Messages go to the shared <code>Errors</code> channel.</p> </li> <li> <p>If you want the notifications to stop coming for a specific item, click the <code>Acknowledge</code> link in the notification. This is useful if something has a low amount of peers for example so it could take some time to complete it.</p> </li> </ul>"},{"location":"pages/faq/faq/#q-how-do-i-testtroubleshoot-plex","title":"Q. How do I test/troubleshoot Plex?","text":""},{"location":"pages/faq/faq/#locating-the-plex-token","title":"Locating the Plex Token","text":"<ul> <li>See this post in the Plex Forums</li> </ul> <p>Info</p> <p>The Plex Token is required for the Notifiarr Client to send commands to Plex</p>"},{"location":"pages/faq/faq/#connection","title":"Connection","text":"<ul> <li>You can run a curl command and make sure you get an <code>200 OK</code> response returned.</li> </ul> <pre><code>curl -I -H \"X-Plex-Token: &lt;token&gt;\" &lt;url&gt;/status/sessions\n</code></pre> <ul> <li><code>&lt;token&gt;</code> The plex token from your config (Unraid: ENV | All: UI) Ex: <code>ZQonMnitLFbFsuaLXT9Yj</code></li> <li> <p><code>&lt;url&gt;</code> The plex URL from your config (ENV or conf file). Ex: <code>http://localhost:32400</code></p> </li> <li> <p>Expected result: HTTP/1.1 200 OK</p> </li> <li> <p>Incorrect result: HTTP/1.1 401 Unauthorized</p> </li> <li> <p>Adjust the token and url until it is 200.</p> </li> <li>Update the Notifiarr Client's configuration with the correct url and token</li> <li>Restart the Notifiarr Client</li> </ul>"},{"location":"pages/faq/faq/#notifications-sessions","title":"Notifications &amp; Sessions","text":"<p>If session info is missing from notifications or the sessions notification is not working:</p> <ul> <li>Make sure you dont have duplicated clients in the Client Settings</li> <li>Make sure you have a client setup for Plex</li> <li>Make sure you have selected the Activity checkbox in the Plex section of the Client Settings</li> <li>Try to increase the Activity Delay in the Plex section of the Client Settings as this will give Plex more time to get the session available in the endpoint</li> <li>Note 1: The sessions notifications will only send when there is at least one item being played or paused</li> <li>Note 2: It doesn't matter what Tautulli shows or the Plex Dashboard shows, they both use the same sessions endpoint. If you where to look at them at the same time as the notification is sent (when it doesn't work) they would also not show the session yet. How long it takes Plex &amp; your (possibly low powered or over worked) server to make the session available in the endpoint is out of our control which is why we added the delay option</li> </ul>"},{"location":"pages/faq/faq/#q-what-are-the-user-level-differences","title":"Q. What are the user level differences","text":"<ul> <li>User: Anyone who makes an account for free</li> <li>Patron: Anyone who supports the project once</li> <li>Subscriber: Anyone who supports the project monthly</li> </ul> <p>Note</p> <p>Patron and Sub also have extra channels available on Discord with roles and colors</p>"},{"location":"pages/faq/faq/#limitations","title":"Limitations","text":"User Patron Subscriber Integration Setting 12,000 / day500 / hour 24,000 / day1,000 / hour Unlimited Core Notifications All but TRaSH Sync All All Core Integrations 7 days 14 days Unlimited Network Status retention (used for the network status page to show uptime and for detail links in notifications) 14 days 30 days Unlimited Plex Session retention (used for tracking transcodes by device, app, user, media type, etc and sessions notifications) 7 days 14 days Unlimited Website Status Incident retention (used for network status page to show uptime)"},{"location":"pages/integrations/authentik/","title":"Authentik","text":"<p>Info</p> <p>This integration is for setting up discord notifications for Authentik </p>"},{"location":"pages/integrations/authentik/#trigger-options","title":"Trigger options","text":"<ul> <li><code>Authorize apps</code> - when applications are authorized with the correct login credentials</li> <li><code>Model created</code> - when new models are created in the admin interface</li> <li><code>Model updated</code> - when models are updated/changed in the admin interface</li> <li><code>Login</code> - when successful logins occur</li> <li><code>Logout</code> - when logouts occur</li> </ul>"},{"location":"pages/integrations/authentik/#instructions","title":"Instructions","text":"<p>Authentik Notifications</p> <p>Detailed wiki for Authentik Notifications</p> <p></p> <ol> <li>Instructions on how too set webhook notifications in Authentik</li> <li>the webhook URL you will use in Authentik </li> </ol>"},{"location":"pages/integrations/authentik/#configuration","title":"Configuration","text":"<p>Click the cog icon too open the configuration settings</p> <p></p> <ol> <li>enabling each <code>trigger field</code>, and using the <code>customize toggle</code> too drop down the <code>notification fields</code> for each trigger</li> <li>choosing the color of the notification </li> </ol>"},{"location":"pages/integrations/authentik/#example-notifications","title":"Example Notifications","text":"<p>Here is an example with all <code>notifcation fields</code> enabled for the <code>Login</code> and <code>Authorize apps</code> triggers </p> <p></p>"},{"location":"pages/integrations/basicUsage/","title":"How To Setup Integrations","text":""},{"location":"pages/integrations/basicUsage/#how-to-setup-integrations","title":"How To Setup Integrations","text":"<p>Info</p> <p>All the integrations follow the same layout and logic so this means once you understand how one of them works you will be able to figure out how to setup any of them.</p>"},{"location":"pages/integrations/basicUsage/#explaing-integrations","title":"Explaing Integrations","text":"<p>Each integration is split up into sections and there is a sub menu on the right (unless using mobile) that will help you jump to specific sections.</p> <p></p> <ul> <li>Basic Instructions: Tell you the basics of how to get the integration to work</li> <li>Triggers: Allow you to turn on/off different notification types the integration has</li> <li>Integration/Extra Settings: Other things the integration can offer outside of the Triggers</li> <li>Client Settings: Any settings, timers, etc that the local client needs to work with this integration</li> <li>Custom Icon: A way to change the icon used for the integration on the site and notifications</li> <li>Content Lines: A way to get a small preview on mobile devices, wearables, computer toast notifications, etc</li> <li>Screenshots: What the integration notifications can look like</li> </ul>"},{"location":"pages/integrations/basicUsage/#instructions","title":"Instructions","text":"<ol> <li>This section is typically information on how to get things working in the 3rd party app</li> <li>This section is the apikey/url used in the 3rd party app. Many apps offer an optional apikey just for that 3rd party app that you can add in your profile</li> <li>This section is any extra notes about using the integration</li> </ol>"},{"location":"pages/integrations/basicUsage/#triggers","title":"Triggers","text":"<ol> <li> <p>Toggle the trigger on/off to receive notifications</p> </li> <li> <p>The button with the 3 lines on it allows you to customize the fields in the notification</p> </li> <li> <p>The name of the trigger, will usually relate to what the 3rd party app calls it</p> </li> <li> <p>The color of the notification</p> </li> <li> <p>Reset the color back to default</p> </li> <li> <p>Trigger ping settings which will allow picking a role that gets pinged everytime a notification is received for the selected trigger. (Pro tip: Press <code>Ctrl</code> when clicking to unselect the last item)</p> </li> <li> <p>The button with the grid box allows you to customize where each field in the notification goes with a drag/drop interface</p> </li> </ol>"},{"location":"pages/integrations/bazarr/","title":"Bazarr","text":"<p>Info</p> <p>This integration allows for notifications from Bazarr and will also add reactions to notifications if a subtitle was found for it and you are using reactions.</p>"},{"location":"pages/integrations/bazarr/#current-versions","title":"Current Versions","text":""},{"location":"pages/integrations/bazarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/bazarr/#triggers","title":"Triggers","text":"<ul> <li><code>Info</code> - Currently all notifications use this type</li> <li><code>Warning</code> - To date, Bazarr doesn't use this type</li> <li><code>Success</code> - To date, Bazarr doesn't use this type</li> <li><code>Failure</code> - To date, Bazarr doesn't use this type</li> </ul>"},{"location":"pages/integrations/bazarr/#channel","title":"Channel","text":"<ul> <li>Bazarr shares the *arr channel unless Granular Setup is used, clicking the link on the site will move to the channel setup location.</li> </ul>"},{"location":"pages/integrations/bazarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Bazarr.</p> <p></p> <ol> <li>Open integration specific instructions</li> <li>Choose the notification format</li> <li>Enable reactions for <code>*arr</code> notifications when a subtitle is found if the associated <code>*arr</code> notification can be found</li> </ol> <p>Reaction example:</p> <p></p>"},{"location":"pages/integrations/bazarr/#instructions","title":"Instructions","text":"<ol> <li>How to enable notifications from within Bazarr</li> <li>The URL to use in Bazarr</li> <li>Test the notification from Notifiarr to Discord</li> </ol> <p>Note</p> <p>This will ensure your server, channel and permissions are set properly in Discord.</p>"},{"location":"pages/integrations/betterstack/","title":"Better Stack","text":"<p>Info</p> <p>This integration allows for notifications from Better stack utilizing their webhook system</p>"},{"location":"pages/integrations/betterstack/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Started</code> - Sent when Better Uptime detects an issue with a site you are monitoring</li> <li><code>Ack</code> (Acknowledged) - Sent when you mark the issue as acknowledged through Better Uptime</li> <li><code>Resoled</code> - Sent when the site you are monitoring returns a successful response</li> </ul> </li> <li>Channel<ul> <li>Pick a channel from your server to send these notifications</li> </ul> </li> </ol>"},{"location":"pages/integrations/betterstack/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Better Uptime.</p> <p></p> <ol> <li>Notification colors for each trigger type</li> <li>Notification content options that you can turn on/off to show in the notifications</li> <li>Better Uptime team id that is used to link the Incident in the notification</li> </ol> <p>Note</p> <p>This integration sends a single notification for all triggers. After the first one is sent, the rest will update the existing notification in the chain.</p>"},{"location":"pages/integrations/dashboard/","title":"Dashboard","text":"<p>Info</p> <p>This integration allows for notifications to keep you updated with an overview of some commonly used apps.</p> <p>The frequency of dashboard updates is controlled by the Notifiarr Client Configuration for the Dashboard for the specified client. All other Dashboard settings are noted below and within the Dashboard Integration.</p>"},{"location":"pages/integrations/dashboard/#trigger-options","title":"Trigger options","text":"<ol> <li>List of apps that are posting updates</li> <li>Used to assign a discord channel to each of your apps to enable notifications</li> </ol>"},{"location":"pages/integrations/dashboard/#discord-channel-setup","title":"Discord Channel Setup","text":"<ol> <li>List of currently supported Apps</li> <li>Copies the first Discord channel to all channels below</li> <li>Discord channel drop-down selection list</li> <li>Discord bot permissions test. If the test passes the user will receive a notification from the bot in the specified channel. If no notification is received, please ensure you have assigned appropriate permissions to the Notifiarr bot.</li> <li>Displays all available Discord channels in the users Notifiarr instance</li> </ol>"},{"location":"pages/integrations/dashboard/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for the Dashboard integration and the following window will open.</p> <p></p> <ol> <li>Initial instructions on how to setup the Dashboard by using the Notifiarr UI.</li> <li>In this section you can define the active Apps and further configure them.</li> <li>Contains additional Settings and customizations</li> <li>Here you can set the update interval of the Dashboard</li> <li>Allows you to change the default icon (Subscriber feature).</li> <li>Some examples of the Dashboard output.</li> <li>The apps you want to get info from.</li> <li>How many of the newest items to see in the message (1-5).</li> <li>How many of the upcoming items to see in the message (1-10).</li> <li>How the Dashboard should display your completion ratio. Two options are available,</li> <li><code>In Database</code> - Compares your downloaded items against what the App considers a complete list.</li> <li><code>On Disk</code> - Compares your downloaded items to what you have on your disk.</li> <li>The order in which to post the dashboard notifications.</li> <li>Enables or disables the App from posting.</li> </ol>"},{"location":"pages/integrations/dashboard/#extra-settings","title":"Extra Settings","text":"<ol> <li>This will add the hostname to the notification title to know which machine it came from.</li> <li>How would you like your notifications to be displayed in Discord. Two options are available,</li> <li><code>Update Existing</code> - A single notification will be received and continually refreshed.</li> <li><code>New Messages</code> - A new message will be sent with each update.</li> <li>This will trigger a delete all and repost on the next update. Note: this is a fleeting check box and the check will disappear after the save button is clicked.</li> <li>If the Dashboard order has changed, use this to clear all current posts and repost in the new order. Note: this is a fleeting check box and the check will disappear after the save button is clicked.</li> </ol> <p>Warning</p> <p>When you change the active status or the order, the next update will trigger a delete all and repost everything automatically, so they are in the correct order based on what you have turned on.</p>"},{"location":"pages/integrations/dashboard/#examples","title":"Examples","text":"radarr example sonarr example"},{"location":"pages/integrations/discordApp/","title":"Discord App","text":"<p>COMING SOON</p>"},{"location":"pages/integrations/emby/","title":"Emby","text":"<p>Info</p> <p>This integration allows for notifications from the Emby media app</p>"},{"location":"pages/integrations/emby/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Play</code> - Receive a notification when media has started playing</li> <li><code>Stop</code> - Receive a notification when media has stopped playing</li> <li><code>Resume</code> - Receive a notification when media has resumed playing</li> <li><code>Update</code> - Receive a notification when Emby has a server update available</li> <li><code>Restart</code> - Receive a notification when Emby requires a restart</li> </ul> </li> <li>More Triggers<ul> <li>Open the configuration to enable/disable more triggers</li> </ul> </li> <li>Channel<ul> <li>Setup all the channels needed for each trigger</li> </ul> </li> </ol>"},{"location":"pages/integrations/emby/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Emby.</p> <p></p> <ol> <li>Enable triggers and pick colors for each trigger</li> </ol>"},{"location":"pages/integrations/emby/#instructions","title":"Instructions","text":"<ol> <li>This needs to be done in Emby to enable webhooks</li> </ol>"},{"location":"pages/integrations/github/","title":"Github","text":"<p>Info</p> <p>This integration allows for notifications from public Github repositories.</p>"},{"location":"pages/integrations/github/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li>List of all repositories with notifications enabled</li> </ul> </li> </ol>"},{"location":"pages/integrations/github/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Github.</p> <p> </p> <ol> <li>Add the organization URL. You have to be able to manage the selected Organization so you can add webhooks.</li> <li>Remove an existing organization, keep in mind this removes all repositories linked to it</li> <li>Add a discord server. The default server is available but this allows you to push notifications to other servers (example my personal discord (default) or Notifiarr discord).</li> <li>Remove a discord server.</li> <li>Pick a repository, they are pulled automatically based on the organizations added.</li> <li>Copy the <code>Server</code> or <code>Channel</code> selection to all triggers</li> <li>Available Github triggers</li> </ol>"},{"location":"pages/integrations/github/#instructions","title":"Instructions","text":"<p>Note</p> <p>This is how you add the webhook to Github and then how you add the organization in the Github integration</p>"},{"location":"pages/integrations/hotio/","title":"Hotio","text":"<p>Info</p> <p>This integration allows for notifications from Hotio.</p>"},{"location":"pages/integrations/hotio/#currently-supported","title":"Currently supported","text":"<ul> <li>Pullio</li> </ul>"},{"location":"pages/integrations/hotio/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Pullio</code> - Enable notifications from Pullio</li> </ul> </li> <li>Channel<ul> <li>Pick the channel on your server to send Pullio notifications to.</li> </ul> </li> </ol>"},{"location":"pages/integrations/hotio/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Hotio apps.</p> <p></p> <ol> <li>Pick the colors for the different Pullio update states</li> </ol>"},{"location":"pages/integrations/hotio/#instructions","title":"Instructions","text":"<p>The compose entry to enable Notifiarr with Pullio</p> <p>Note</p> <p>for images: If you do not specify an avatar image in the app compose one will be used from the site so you do not have to worry about image hosting sites.</p>"},{"location":"pages/integrations/jellyfin/","title":"Jellyfin","text":"<p>Info</p> <p>This integration allows for notifications from the Jellyfin media app</p>"},{"location":"pages/integrations/jellyfin/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Items</code> - Receive a notification when media is added</li> <li><code>Play</code> - Receive a notification when media has started playing</li> <li><code>Stop</code> - Receive a notification when media has stopped playing</li> <li><code>Plugin Install</code> - Receive a notification when a plugin has been installed</li> <li><code>Plugin Uninstall</code> - Receive a notification when a plugin has been removed</li> </ul> </li> <li>More Triggers<ul> <li>Open the configuration to enable/disable more triggers</li> </ul> </li> <li>Channel<ul> <li>Setup all the channels needed for each trigger</li> </ul> </li> </ol>"},{"location":"pages/integrations/jellyfin/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Jellyfin.</p> <p></p> <ol> <li>Enable triggers and pick colors for each trigger</li> <li>Expand the notification content settings via the customize button</li> </ol> <p></p> <ol> <li>Notification content options that you can turn on/off to show in the notifications</li> </ol>"},{"location":"pages/integrations/jellyfin/#notifiarr","title":"NOTIFIARR","text":"<ol> <li>This needs to be done in Jellyfin before webhooks can be used</li> <li>After the webhook plugin is installed, this is how you add the webhook for Notifiarr</li> </ol>"},{"location":"pages/integrations/jellyfin/#jellyfin","title":"JELLYFIN","text":"<p>To configure your Jellyfin server to work with Notifiarr, we will first have to configure a few things, such as our webhook and notification settings - the latter required to for new content notifications.</p> <p></p> <p>Install the Webhook Plugin</p> <p>To install the Webhook plugin, navigate to the Dashboard and into the Plugins section.  From here, scroll down until you find the Webhook Plugin.</p> <p>Click on the plugin and install the latest version.  Once installed, go ahead and restart your Jellyfin server for the plugin to be loaded.</p> <p></p> <p>Configure the Webhook Plugin</p> <p>Once you have restarted your Jellyfin server, navigate back to your Plugins menu and look for Webhook under the 'My Plugins' tab. Click on it to reveal its options. </p> <p>Write the URL of your Jellyfin server where it says SERVER URL and click on \"Add Generic Destination\" and scroll down to configure it.</p> <ul> <li>NAME</li> </ul> <p>Give the Webhook a name </p> <p>Info</p> <p>Example: Notifiarr</p> <p></p> <ul> <li>Webhook Url</li> </ul> <p>Note</p> <p>This is the URL of your webhook, which includes your API Key </p> <pre><code>https://notifiarr.com/api/v1/notification/jellyfin/YOUR_API_KEY\n</code></pre> <p></p> <ul> <li>Notification Type</li> </ul> <p>Enable all except:</p> <p></p><pre><code>Generic\nPlayback Progress\nTask Completed\nUser Data Saved\n</code></pre> <p></p> <ul> <li>Item Type</li> </ul> <p>Check \"Send All Properties (ignores template)\"</p> <p>Once the webhook has been configured, remember to click on  Save.</p> <p>Note</p> <p>If you are using the 'Item Added' notification, be sure to enable it in the notifications settings, otherwise it won't work.   Dashboard &gt; Notifications &gt; New content added  You can also change how often Jellyfin notifies you of new items by changing the intervals of the scheduled task.  Dashboard &gt; Scheduled Tasks &gt; Webhook Item Added Notifier</p> <p></p> <p>Debugging Webhooks</p> <p>Info</p> <p>If your webhook isn't working, start debugging by adding webhooks to your logging configuration.   Amend your Jellyfin's logging.json file to enable webhook debugging by adding <code>\"Jellyfin.Plugin.Webhook\": \"Debug\"</code></p> <p>Warning</p> <p>Remember to add a comma after <code>\"System\": \"Warning\"</code> to avoid formatting errors.</p> <pre><code>{\n    \"Serilog\": {\n        \"MinimumLevel\": {\n            \"Default\": \"Information\",\n            \"Override\": {\n                \"Microsoft\": \"Warning\",\n                \"System\": \"Warning\",\n+               \"Jellyfin.Plugin.Webhook\": \"Debug\"\n            }\n        }\n</code></pre>"},{"location":"pages/integrations/lidarr/","title":"Lidarr","text":"<p>Lidarr</p> <p>This integration allows for notifications from Lidarr using its built in Connection for Notifiarr. In Lidarr click Settings \u2192 Connect \u2192 + \u2192 Notifiarr</p>"},{"location":"pages/integrations/lidarr/#current-versions","title":"Current Versions","text":""},{"location":"pages/integrations/lidarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/lidarr/#triggers","title":"Triggers","text":"<ul> <li><code>Grab</code> - Receive a notification when media is initially grabbed (RSS or manual)</li> <li><code>Download</code> - Receive a notification when media new is successfully imported</li> <li><code>Update</code> - Receive a notification when the application updates</li> <li><code>Upgrade</code> - Receive a notification when upgraded media is successfully imported</li> <li><code>Failed</code> - Custom notification type based on previous grabs. If the system detects a grab for the same media with the same quality or better before the previous one was imported then it will set the previous one as failed</li> <li><code>Health</code> - Receive a notification when the application reports an issue</li> <li><code>Backup</code> - Receive a notification when a backup occurs </li> <li><code>Corrupt</code> - Monitor backups for corruption and size loss </li> <li><code>Deleted</code> - Be notified when media is deleted</li> </ul>"},{"location":"pages/integrations/lidarr/#channel","title":"Channel","text":"<ul> <li>Lidarr shares the *arr channel unless Granular Setup is used, clicking the link on the site will move to the channel setup location.</li> </ul>"},{"location":"pages/integrations/lidarr/#instructions","title":"Instructions","text":""},{"location":"pages/integrations/lidarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Lidarr.</p> <p></p> <ol> <li>set the notification color</li> <li>enable trigger in this example we used <code>album delete</code> and selected all available fields</li> </ol>"},{"location":"pages/integrations/lidarr/#example","title":"Example","text":"<p>here is a example if we enable all notification fields under the <code>grab</code> trigger</p> <p></p>"},{"location":"pages/integrations/lidarr/#errors","title":"Errors","text":""},{"location":"pages/integrations/lidarr/#400-bad-request","title":"400 Bad Request","text":"<p>Check and ensure you have a Grab or Download channel configured for Lidarr</p>"},{"location":"pages/integrations/lidarr/#401-unauthorized","title":"401 Unauthorized","text":"<p>Your APIKey is incorrect</p>"},{"location":"pages/integrations/logWatch/","title":"Log Watcher","text":""},{"location":"pages/integrations/logWatch/#log-watcher","title":"Log Watcher","text":"<p>aka File Watcher</p> <p>This allows the Notifiarr Client to watch (log) files for lines matching a regular expression. This is similar to tail -f file | grep string and allows you to send notifications when, for instance, a log file has a new line written that matches a regular expression.</p> <p>Coming Soon</p> <p>Info</p> <p>If creating a skip expression that contains <code>'</code> replace the apostrophe with <code>.?</code></p>"},{"location":"pages/integrations/logWatch/#regular-expressions-skip-expressions","title":"Regular Expressions &amp; Skip Expressions","text":"<p>Below are community suggested expressions</p> App Regular Expression Skip Expression Regular Explanation Skip Explanation Radarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v5.+\\])</code> <code>(?i)Movie with IMDBId|It will not be added|Invalid date found|Validation failed|An unhandled exception has occurred while executing the request.|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip movie add errors. Skip Indexer Feed invalid date Errors. Skip Errors   saying there was an Error Sonarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v4.+\\])</code> <code>(?i)Invalid date found|Validation failed|An unhandled exception has occurred while executing the request.|Unable to find exact quality|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip Indexer Feed invalid date Errors. Skip Errors saying there was an   Error. Skip unknown quality errors. Prowlarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v1.+\\])</code> <code>(?i)Validation failed|An unhandled exception has occurred while executing the request|(?:CinemaZ|PrivateHD)[.a-z0-9/=&amp;?: ]+404\\.NotFound|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip Errors saying there was an error. Skip Cinemaz/PrivateHD 404   (NotFound Errors) Readarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v1.+\\])</code> <code>(?i)Validation failed|An unhandled exception has occurred while executing the request.|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip Errors saying there was an error. Lidarr <code>(?i)(\\|warn\\||\\|error\\||^\\[v2.+\\])</code> <code>(?i)Validation failed|An unhandled exception has occurred while executing the request.|HttpClient error</code> Notify on all Warnings, Errors, and Stack Traces (Version Number) Skip Errors saying there was an error. PMM <code>(?i)(\\[ERROR\\])</code> <code>(?i)(Convert Error:|ID not found|TVDb Error: Name not found|Plex Error: No Items found in Plex|Trakt Error: No TVDb ID found for|TMDb Error: No Movie found for TMDb ID)</code> Notify on Errors Exclude common errors of unable to find/map ids or Plex searches returning no items."},{"location":"pages/integrations/mdblist/","title":"MDBList","text":""},{"location":"pages/integrations/mdblist/#what-is-mdblist","title":"What is MDBList","text":"<p>MDBList is a 3rd party service that allows you to curate lists of shows and movies from various sources and can be found here, this integration is meant to do three things:</p> <ol> <li> <p>Allow for the ability to add individual shows or movies to Radarr or Sonarr using the add button on the show item on the MDBList website</p> </li> <li> <p>Sync lists created on MDBList into Sonarr and Radarr automatically. (this is currently not functioning and provides an error \u201cThe list was not automatically added to Sonarr because it does not support generic lists. You'll have to add it as a Trakt list and authenticate inside of Sonarr.\" which has been reported)</p> </li> <li>Sync a list of IDs from your local collection to MDBList which can be used within the filtering of a list, to exclude, for example, all collected shows or movies.</li> </ol>"},{"location":"pages/integrations/mdblist/#prerequisites","title":"Prerequisites:","text":"<ol> <li>Notifier setup with and working with Discord, Sonarr, and Radarr integrations</li> <li>Account with MDBList</li> <li>API key created on the Notfier website and assigned for use with MDBList, this can be generated and found in your profile, under the API Keys section</li> <li>Notifier API key allocated to the MDList integration added to your profile under preferences\\Notifiarr on MDList and enable \u201cAutomatically add lists to Radarr (if configured in Notifiarr)\"</li> </ol>"},{"location":"pages/integrations/mdblist/#steps-to-configure-integration","title":"Steps to configure integration:","text":"<ol> <li>From within the notifier website add the MDBList integration</li> <li>Configure your discord channels</li> <li>Enable \"Movie Add\" and \"Show Add\" by enabling the toggles as shown below.</li> </ol> <p>We now need to configure some additional settings from within the integration, to tell Notifiarr what settings to use when adding a movie or show. </p> <p>Edit the MDBList integration, scroll down to the Extra settings modify the add movie and add show settings and save:</p> <ol> <li>Add Movie/Shows to Radarr/Sonarr = Enabled</li> <li>Select the instance for notifiarr to use</li> <li>Add as monitored</li> <li>Search on add</li> <li>Minimum Availability</li> <li>Root folder</li> </ol> <p>When setup how you like, select save. When you now find a show or movie on MDBList, you have the option to add to Radarr and Sonarr, the above enables that. You will find it is added to the instance and a search takes place imediately. </p> <p></p>"},{"location":"pages/integrations/mediaRequests/","title":"Media Requests","text":"<p>Info</p> <p>This integration allows for requesting media via Discord.</p>"},{"location":"pages/integrations/mediaRequests/#currently-supported-applications","title":"Currently Supported Applications","text":"<ul> <li>Lidarr &gt;= v1</li> <li>Radarr &gt;= v4</li> <li>Readarr &gt;= v1</li> <li>Sonarr &gt;= v4</li> </ul>"},{"location":"pages/integrations/mediaRequests/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/mediaRequests/#triggers","title":"Triggers","text":"<ul> <li><code>Lidarr</code><sup>1</sup> - Enable Lidarr requests for an instance</li> <li><code>Radarr</code><sup>1</sup> - Enable Radarr requests for an instance</li> <li><code>Readarr</code><sup>1</sup> - Enable Readarr requests for an instance</li> <li><code>Sonarr</code><sup>1</sup> - Enable Sonarr requests for an instance</li> </ul>"},{"location":"pages/integrations/mediaRequests/#channel","title":"Channel","text":"<ul> <li>Pick the channel on your server to monitor for requests and send optional approval messages.</li> </ul>"},{"location":"pages/integrations/mediaRequests/#configuration","title":"Configuration","text":""},{"location":"pages/integrations/mediaRequests/#global-configuration","title":"Global configuration","text":"<p>Click the cog icon to open the configuration options for *arr apps.</p> <p></p> <ol> <li>The client to use for Media Requests</li> <li>Default *arr apps, opening them allows for individual configuration. Details below + button adds another instance of an *arr app. This also needs configured in the Notifiarr client conf (or ENV if you use that) Details below</li> <li>User based granular options</li> <li>Cleanup will remove all the ping/pong messages when adding things, leaving only the final message.</li> <li>Default keywords that control the bot, change them however you want.</li> </ol>"},{"location":"pages/integrations/mediaRequests/#multiple-instances","title":"Multiple instances","text":"<ol> <li>Add another instance of an *arr app to be used for anything related to the Notifiarr client.</li> </ol>"},{"location":"pages/integrations/mediaRequests/#app-settings","title":"App settings","text":"<ol> <li>Keyword the bot looks for when adding something. add movie batman for example.</li> <li>Settings used when adding media to *arr.</li> </ol>"},{"location":"pages/integrations/mediaRequests/#user-settings","title":"User settings","text":"<ol> <li>Discord users that can be used to assign permissions to</li> <li>User details</li> <li>App settings for the user</li> </ol>"},{"location":"pages/integrations/mediaRequests/#instructions","title":"Instructions","text":"<p>A basic overview on how to use the integration. This may change from time to time on the site without updating the screenshot here.</p>"},{"location":"pages/integrations/mediaRequests/#discord-troubleshooting","title":"Discord Troubleshooting","text":"<ul> <li>Type <code>cancel</code> to end any existing or stuck requests</li> <li>Type <code>help</code> to ensure the bot has access to the channel and can response </li> </ul>"},{"location":"pages/integrations/network/","title":"Network","text":"<p>Info</p> <p>This integration allows for notifications from the local Notifiarr client app to monitor network machines or services.</p>"},{"location":"pages/integrations/network/#network-overview","title":"Network Overview","text":"<ol> <li>Reloads the integration.</li> <li>Opens the integrations settings.</li> <li>A list of everything you are monitoring with the Notifiarr client and show a green arrow if it is available or red arrow if it isn't.</li> <li>Opens up the Discord channel selection menu.</li> </ol>"},{"location":"pages/integrations/network/#integration-settings-menu","title":"Integration Settings Menu","text":"<p>Click the cog icon to open the integration settings for the Network integration.</p> <p></p> <ol> <li><code>Basic Instructions</code> - Gives you basic guidelines on how to setup this integration in the UI.</li> <li><code>Triggers</code> - Adjust which webhooks will send notifications to you.</li> <li><code>Integration Settings</code> - Allows the user to further configure the integration.</li> <li><code>Extra Settings</code> - Adjust the extra settings for this integration.</li> <li><code>Client Settings</code> - Allows the user to set the scanning interval.</li> <li><code>Custom Icon</code> - Assign another icon to notifications from this integration. (Subscriber Feature)</li> <li><code>Screenshots</code> - Shows the expected output once all correctly configured.</li> <li><code>Save</code> - Saves all your Configured settings and closes the Integration Settings Menu.</li> </ol>"},{"location":"pages/integrations/network/#basic-instructions","title":"Basic Instructions","text":"<p>Detailed instructions are shown in the Client UI section of the wiki.</p> <p></p> <ol> <li><code>Service Checks</code> - Allows the user to configure the destination service and type of check to be done.</li> <li><code>+</code> - Adds additional line items.</li> </ol>"},{"location":"pages/integrations/network/#integration-settings","title":"Integration Settings","text":"<p>These are all the configurable options available to the user.</p>"},{"location":"pages/integrations/network/#triggers","title":"Triggers","text":"<p>Select the individual trigger colour that will be displayed on Discord notifications.</p>"},{"location":"pages/integrations/network/#integration-settings_1","title":"Integration Settings","text":"<ol> <li><code>Status</code> - This will post a message with the current status of selected items and update its self accordingly.</li> <li><code>Exclude</code> - This will allow specific items to be ignored when they go down or come up, typically during expected maintenance.</li> </ol>"},{"location":"pages/integrations/network/#extra-settings","title":"Extra Settings","text":"<ol> <li><code>Status Page</code> - Enables a web page status overview of all your monitored items. Past events are also shown.</li> <li><code>Website Status</code> - Include current status of websites being tracked with the Website Status integration.</li> <li><code>Network Integration API</code> - Enable this by assigning a unique API key to the Network Integration on the Homepage of the Notifiarr website.</li> </ol>"},{"location":"pages/integrations/network/#client-settings","title":"Client Settings","text":"<ol> <li><code>Mute Client Down Alerts</code> - Select this to stop down alerts.</li> <li><code>Interval</code> - Select from the drop down list the check time in minutes. Or to disable all checks.</li> </ol>"},{"location":"pages/integrations/network/#custom-icon","title":"Custom Icon","text":"<p>Assign another icon to notifications from this integration (Subscriber Feature) </p>"},{"location":"pages/integrations/overseerr/","title":"Overseerr","text":"<p>Info</p> <p>this is the same for jellyseerr</p>"},{"location":"pages/integrations/overseerr/#integration-card","title":"Integration Card","text":"<ol> <li>Configuration</li> <li>Channel picker for the notifications</li> </ol>"},{"location":"pages/integrations/overseerr/#channel-picker","title":"Channel Picker","text":"<ol> <li>List of channels <sup>Dropdown menu</sup></li> <li>Test bot channel permissions</li> <li>Copy Channel to all</li> </ol>"},{"location":"pages/integrations/overseerr/#configuration","title":"Configuration","text":"<ol> <li>Notification triggers</li> <li>Notification Options</li> <li>Notification Color</li> </ol> <p>Note</p> <p>Be sure to save settings</p>"},{"location":"pages/integrations/overseerr/#instructions","title":"Instructions","text":"<ol> <li>Notifications Settings</li> <li>Webhook</li> <li>Enable the webhook agent</li> <li>Add the notification URL <code>https://notifiarr.com/api/v1/notification/overseerr/api_key_here</code> - Make sure to make a api key specific to overseerr</li> <li>Notification types you want to receive</li> <li>Save changes and enable the webhook</li> </ol>"},{"location":"pages/integrations/passthrough/","title":"Passthrough","text":""},{"location":"pages/integrations/passthrough/#passthrough","title":"Passthrough","text":"<p>Info</p> <p>This integration allows for notifications from custom scripts. This means you can create any script you want to run and add a webhook with the JSON payload below so you get notified about it.</p> <p>By sending them through this integration you can keep track of how many it has sent, when the last one was, status code, etc</p>"},{"location":"pages/integrations/passthrough/#payload-field-breakdown","title":"Payload field breakdown","text":"<pre><code>notification: {\n    update: false, // Optional (Bool) - This is used to update an existing message with the same id, true will update existing &amp; false will always post new\n    name: \"Local App\", // Required (Str) - This is the name of the custom app/script, should be unique\n    event: \"0\" // Optional (Str) - This is used to pass a unique id for this notification if necessary\n},\ndiscord: {\n    color: \"\", // Optional (Str) - The color you want to use for the notification, 6 digit HTML color code\n    ping: {\n        pingUser: 123456789, // Optional (Int) - If you want to ping a user with this notification, add their discord id\n        pingRole: 0 // Optional (Int) - If you want to ping a role with this notification, add the role discord id\n    },\n    images: {\n        thumbnail: \"http://website.com/image.png\", //-- Optional (Str) - Add a valid URL to a thumbnail\n        image: \"http://website.com/image.png\" //-- Optional (Str) - Add a valid URL to an image that will be on the bottom of the notification\n    },\n    text: {\n        title: \"Notification Title\", // Optional (Str)\n        icon: \"http://website.com/image.png\", // Optional (Str) - Add a valid URL\n        content: \"\", //-- Optional - (Str) This text goes above the embed and is what is seen in toast notifications and wearables\n        description: \"\", // Optional if fields is used (Str) - This text goes between the title and the embeds\n        fields: [{ // Optional if description is used (List) - This is a list of items to put in the notification, 25 max fields allowed\n            title: \"Field\",\n            text: \"Field Text\",\n            inline: false\n        }, {\n            title: \"Field\", // (Str)\n            text: \"Field Text\", // (Str)\n            inline: false // (Bool)\n        }],\n        footer: \"Footer text\" // Optional (Str)\n    },\n    ids: {\n        channel: 1234567890 // Required (Int) - This is the channel to send the notification to on your server\n    }\n}\n</code></pre>"},{"location":"pages/integrations/passthrough/#payload-example-1","title":"Payload Example 1","text":"<ul> <li>This would send a new notification <pre><code>{\n    \"notification\": {\n        \"update\": false,\n        \"name\": \"1:1 App\",\n        \"event\": \"12345\"\n    },\n    \"discord\": {\n        \"color\": \"FFFFFF\",\n        \"ping\": {\n            \"pingUser\": 0,\n            \"pingRole\": 0\n        },\n        \"images\": {\n            \"thumbnail\": \"\",\n            \"image\": \"\"\n        },\n        \"text\": {\n            \"title\": \"Notification Title\",\n            \"icon\": \"\",\n            \"content\": \"Content of the notification here\",\n            \"description\": \"Body of the notification here\",\n            \"fields\": [],\n            \"footer\": \"Footer Text\"\n        },\n        \"ids\": {\n            \"channel\": 735481457153277994\n        }\n    }\n}\n</code></pre></li> </ul>"},{"location":"pages/integrations/passthrough/#payload-example-2","title":"Payload Example 2","text":"<ul> <li>This would update an existing notification</li> </ul> <pre><code>{\n    \"notification\": {\n        \"update\": true,\n        \"name\": \"Update App\",\n        \"event\": \"\"\n    },\n    \"discord\": {\n        \"color\": \"000000\",\n        \"ping\": {\n            \"pingUser\": 543077981707436033,\n            \"pingRole\": 0\n        },\n        \"images\": {\n            \"thumbnail\": \"https://notifiarr.com/images/logo/notifiarr.png\",\n            \"image\": \"\"\n        },\n        \"text\": {\n            \"title\": \"Notification Title\",\n            \"icon\": \"\",\n            \"content\": \"Content of the notification here\",\n            \"description\": \"Body of the notification here\",\n            \"fields\": [{\n                \"title\": \"Field Title\",\n                \"text\": \"Inline true\",\n                \"inline\": true\n            }, {\n                \"title\": \"Field Title\",\n                \"text\": \"Inline true\",\n                \"inline\": true\n            }, {\n                \"title\": \"Field Title\",\n                \"text\": \"Inline false\",\n                \"inline\": false\n            }],\n            \"footer\": \"\"\n        },\n        \"ids\": {\n            \"channel\": 735481457153277994\n        }\n    }\n}\n</code></pre>"},{"location":"pages/integrations/passthrough/#python-example-usage","title":"Python example usage","text":"<pre><code>import json\nimport subprocess\n\nNOTIFIARR_PY = '/path/to/notifiarr.py'\n\n....\n\nwebhook = \"python \" + NOTIFIARR_PY + \" -e \\\" Errors\\\" -c 631827062348512345 -m \\\"FFA500\\\" -t \\\"Error (\"+ str(counter) +\"/\"+ str(totalErrors) +\")\\\" -b \\\"URLs found with errors\\\" -g \\\"\" + json.dumps(inlineFields).replace('\"', r'\\\"') + \"\\\" -f \\\"\" + json.dumps(singleFields).replace('\"', r'\\\"') + \"\\\" -a \\\"https://notifiarr.com/images/logo/notifiarr.png\\\" -z \\\"Passthrough Integration\\\"\"\nsubprocess.call(webhook)\n</code></pre>"},{"location":"pages/integrations/passthrough/#notifiarr-script","title":"Notifiarr script","text":"<ul> <li>Can be called from any script (example above)</li> </ul>"},{"location":"pages/integrations/passthrough/#python","title":"Python","text":"<pre><code>import argparse\nimport json\nimport requests\n\n#\n# Example\n# python notifiarr.py -e \"System Backup\" -c 735481457153277994 -m \"FFA500\" -t \"Backup Failed\" -f \"[{\\\"Reason\\\": \\\"Permissions error\\\"}, {\\\"Severity\\\": \\\"Critical\\\"}]\" -a \"https://notifiarr.com/images/logo/notifiarr.png\" -z \"Passthrough Integration\"\n# python notifiarr.py -e \"System Backup\" -c 735481457153277994 -m \"FFA500\" -t \"Backup Failed\" -b \"Critical permissions error\" -a \"https://notifiarr.com/images/logo/notifiarr.png\" -z \"Passthrough Integration\"\n#\n\n# The apikey from Passthrough integration (located in Basic Instructions)\nNOTIFIARR_APIKEY = ''\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Example: python notifiarr.py -e \"System Backup\" -c 735481457153277994 -m \"FFA500\" -t \"Backup Failed\" -f \"[{\\\\\"Reason\\\\\": \\\\\"Permissions error\\\\\"}, {\\\\\"Severity\\\\\": \\\\\"Critical\\\\\"}]\" -g \"[{\\\\\"Reason\\\\\": \\\\\"Permissions error\\\\\"}, {\\\\\"Severity\\\\\": \\\\\"Critical\\\\\"}]\" -a \"https://notifiarr.com/images/logo/notifiarr.png\" -z \"Passthrough Integration\"')\n    parser.add_argument('-e', '--event', dest='event', help='notification type (rclone for example)', type=str, required=True, metavar='')\n    parser.add_argument('-c', '--channel', dest='channel', help='valid discord channel id', type=int, required=True, metavar='')\n    parser.add_argument('-t', '--title', dest='title', help='text title of message (rclone started for example)', type=str, required=True, metavar='')\n    parser.add_argument('-b', '--body', dest='body', help='if fields is not used, text body for message', type=str, metavar='')\n    parser.add_argument('-f', '--fields', dest='fields_not_inline', help='if body is not used, valid JSON list of fields [{title,text},{title,text}] max 25 list items (not inline)', type=str, metavar='')\n    parser.add_argument('-g', '--inline', dest='fields_inline', help='if body is not used, valid JSON list of fields [{title,text},{title,text}] max 25 list items (inline)', type=str, metavar='')\n    parser.add_argument('-z', '--footer', dest='footer', help='text footer of message', default='', type=str, metavar='')\n    parser.add_argument('-a', '--avatar', dest='avatar', help='valid url to image', default='', type=str, metavar='')\n    parser.add_argument('-i', '--thumbnail', dest='thumbnail', help='valid url to image', default='', type=str, metavar='')\n    parser.add_argument('-m', '--color', dest='color', help='6 digit html code for the color', default='', type=str, metavar='')\n    parser.add_argument('-u', '--ping-user', dest='ping_user', help='valid discord user id', default=0, type=int, metavar='')\n    parser.add_argument('-r', '--ping-role', dest='ping_role', help='valid discord role id', default=0, type=int, metavar='')\n    args = parser.parse_args()\n\n    if not NOTIFIARR_APIKEY:\n        raise Exception('ERROR: Edit the script and add your Notifiarr apikey')\n\n    if not args.body and not args.fields_not_inline and not args.fields_inline:\n        raise Exception('ERROR: Either -b/--body or -f/--fields or -g/--inline is required')\n\n    inlineFields = []\n    singleFields = []\n\n    if args.fields_inline:\n        inlineFields = [{'title': t, 'text': x, 'inline': True} for f in json.loads(args.fields_inline) for t, x in f.items()] if args.fields_inline else []\n\n    if args.fields_not_inline:\n        singleFields = [{'title': t, 'text': x, 'inline': False} for f in json.loads(args.fields_not_inline) for t, x in f.items()] if args.fields_not_inline else []\n\n    fields = inlineFields + singleFields\n\n    # BUILD THE TEMPLATE\n    notifiarr_payload = {\n        'notification': {\n            'update': False,\n            'name': args.event,\n            'event': 0\n        },\n        'discord': {\n            'color': args.color,\n            'ping': {\n                'pingUser': args.ping_user,\n                'pingRole': args.ping_role\n            },\n            'images': {\n                'thumbnail': args.thumbnail,\n                'image': ''\n            },\n            'text': {\n                'title': args.title,\n                'icon': args.avatar,\n                'content': '',\n                'description': args.body,\n                'fields': fields,\n                'footer': args.footer\n            },\n            'ids': {\n                'channel': args.channel\n            }\n        }\n    }\n\n    # PUSH THE WEBHOOK\n    r = requests.post(f'https://notifiarr.com/api/v1/notification/passthrough/{NOTIFIARR_APIKEY}', data=json.dumps(notifiarr_payload), headers={'Content-type': 'application/json', 'Accept': 'text/plain'})\n    #print(r.text)\n</code></pre>"},{"location":"pages/integrations/persistent/","title":"Persistent","text":"<p>Info</p> <p>This integration allows for notifications to always stay in the channel. Anytime someone posts, it will remove its previous post and readd it to the bottom of the channel.</p>"},{"location":"pages/integrations/persistent/#trigger-options","title":"Trigger options","text":"<ol> <li>Triggers<ul> <li><code>Active</code> - Enable notifications</li> </ul> </li> </ol>"},{"location":"pages/integrations/persistent/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Persistent messages.</p> <p></p> <ul> <li>Pick the channel you want to add a persistent message to and give it a title with a message.</li> </ul>"},{"location":"pages/integrations/plex/","title":"Plex","text":"<p>Info</p> <p>This integration allows for notifications from Plex. Keep in mind this utilizes the Notifiarr client</p>"},{"location":"pages/integrations/plex/#current-version","title":"Current Version","text":"<p>Reaction example:</p> <p></p>"},{"location":"pages/integrations/plex/#plex-trigger-overview","title":"Plex Trigger Overview","text":"<ol> <li>Opens the integrations settings.</li> <li>Reloads the integration.</li> <li>Triggers<ul> <li><code>Play</code> - Notify when a user starts playing media.</li> <li><code>Resume</code> - Notify when a user resumes playing media.</li> <li><code>Finished</code> - Notify when a user finishes playing media.</li> <li><code>Rating</code> - Notify when a user rates a movie/show.</li> <li><code>New Item</code> - Notify when a new item is added to plex (requires push notifications enabled in Plex - Server -&gt; General).</li> <li><code>Sessions</code> - Get notifications about streaming sessions and minimal server information.</li> <li><code>Devices</code> - Notify when a new device is added.</li> <li><code>Backup</code> - Notify when a backup was completed.</li> <li><code>Corruption</code> - Notify when database corruption is detected.</li> </ul> </li> <li>Discord Channels<ul> <li>Channel(s) to use for sending plex notifications.</li> </ul> </li> </ol>"},{"location":"pages/integrations/plex/#integration-settings-menu","title":"Integration Settings Menu","text":"<p>Click the cog icon to open the integration settings for Plex.</p> <p></p> <ol> <li><code>Basic Instructions</code> - Gives you basic guidelines on how to setup this integration in the UI.</li> <li><code>Triggers</code> - Adjust which webhooks will send notifications to you.</li> <li><code>Integration Settings</code> - Allows the user to further configure the integration.</li> <li><code>Extra Settings</code> - Adjust the extra settings for this integration.</li> <li><code>Client Settings</code> - Allows the user to set the scanning interval.</li> <li><code>Custom Icon</code> - Assign another icon to notifications from this integration. (Subscriber Feature)</li> <li><code>Content Lines</code> - Add a message to the top of notifications for wearable/toast purposes.</li> <li><code>Screenshots</code> - Shows the expected output once all correctly configured.</li> <li><code>Save</code> - Saves all your Configured settings and closes the Integration Settings Menu.</li> </ol>"},{"location":"pages/integrations/plex/#triggers","title":"Triggers","text":"<ol> <li>Notification triggers.</li> <li>Notification fields - Select various fields to be displayed in the notification.</li> <li>Notification colors.</li> </ol>"},{"location":"pages/integrations/plex/#integration-settings","title":"Integration Settings","text":"<p>Here you can adjust the settings for this integration.</p>"},{"location":"pages/integrations/plex/#userdevice","title":"User/Device","text":"<ol> <li>Table of all users and devices. Uncheck the notify box to not receive notifications from the specific user/device.</li> <li>Keyword for having the bot display what is currently streaming on your server.</li> </ol>"},{"location":"pages/integrations/plex/#session-management","title":"Session Management","text":"<ol> <li><code>Scope</code> - Kill all sessions from a given user/device (Maybe a user shared their login with someone else).</li> <li><code>Rules</code> - Kill the session after rules have been met.</li> <li><code>Action</code> - Notify when sessions are automatically killed.</li> </ol>"},{"location":"pages/integrations/plex/#library-trash","title":"Library Trash","text":"<p>Note: You may see the following error when tab is loading: <code>Error fetching plex library list.</code> Ensure the client settings are saved and try again. 1. <code>Trigger</code> - Keyword to trigger a cleanup outside the set frequency and time 2. <code>Library</code> - Check which libraries you want the automated trash cleanup 3. <code>Trash Settings</code> - The time and frequency of the automated cleanup     - <code>Frequency</code> - How frequently this should try to clear the trash.     - <code>Time</code> - What time of day this should try to clear the trash.     - <code>Max</code> - Do not empty if trash items is more than this number (incase of a drive failure for example).     - <code>Copy</code> - Copy applied settings to all libraries. Note: This only appears on the first listed library. 4. <code>Times</code> - The times for the library</p>"},{"location":"pages/integrations/plex/#extra-settings","title":"Extra Settings","text":"<p>Additional settings such as automatically unmonitor an episode or movie once a user has watched it. You are able to select multiple users by holding down ctrl and highlighting the names. </p>"},{"location":"pages/integrations/plex/#client-settings","title":"Client Settings","text":"<ol> <li><code>Account Map</code> - This will map user emails in your notifications to a user friendly name. </li> <li><code>Plex and Tautulli Account Map</code> - Examples of mapped accounts.</li> <li><code>Track Play/Resume sessions</code> - Check this if you want to get Play/Resume notifications but do not have a Plex Pass.</li> <li><code>Finished Movie</code> - This is a percentage setting for when to send a finished playing movie notification, 0 to disable, 70 min and 95-98 suggested.</li> <li><code>Finished Episode</code> - This is a percentage setting for when to send a finished playing episode notification, 0 to disable, 70 min and 95-98 suggested.</li> <li><code>Include Activity</code> - This is a used to send speed, transcode, container, etc information in plex notifications.</li> <li><code>Activity Delay</code> - This is how long to wait after media is started before getting the session, at least 10-12 seconds is needed.</li> <li><code>Cooldown</code> - Minimum time between notifications to ensure duplicates are not sent (such as media.play and playback.started)</li> <li><code>Interval</code> - This is how often to send a notification for the Plex Sessions trigger, nothing sends if there is no media playing or paused. </li> </ol>"},{"location":"pages/integrations/plex/#custom-icon","title":"Custom Icon","text":"<p>Assign another icon to notifications from this integration (Subscriber Feature) </p>"},{"location":"pages/integrations/plex/#content-lines","title":"Content Lines","text":"<p>Content lines are small previews of the full notification for toast/push notifications. Great for wearables. </p>"},{"location":"pages/integrations/plex/#instructions","title":"Instructions","text":"<p>This integration requires the Notifiarr client to be running locally. You can get it from Github. After installing, you need to setup plex in the UI. An example is</p> <p></p> <ol> <li>The name for Plex comes from Plex and cannot be changed here. There is no automatic way to add a service check to Plex. If you want service checks, add one for it in Service Checks.</li> <li><code>http://</code> or <code>https://</code> URL for the application instance. If your application has a Base URL, include it. Providing an https:// URL reveals a checkbox. Checking this box enables SSL certificate validation; invalid certificates generate an error.</li> <li>Your Plex Token you may find directions for locating your Plex token at this Plex Article.</li> <li>This controls the maximum duration a request to this application may elapse. Selecting No Timeout can be dangerous. Selecting Disabled completely disables the instance.</li> </ol>"},{"location":"pages/integrations/plex/#webhook","title":"Webhook","text":"<p>Info</p> <p>Plex Webhooks from Plex to the Client require Plexpass</p> <p>In Plex, add a webhook that points to <code>http://localhost:port/plex?token=plex-token-here</code> - Replace <code>localhost:port</code> with the <code>ip:port</code> to the Notifiarr client - Replace <code>plex-token-here</code> with the token for Plex so the Notifiarr client allows the incoming connection</p> <p></p>"},{"location":"pages/integrations/plexmetamanager/","title":"Kometa","text":""},{"location":"pages/integrations/plexmetamanager/#notifiarr-configuration","title":"Notifiarr Configuration","text":""},{"location":"pages/integrations/plexmetamanager/#website","title":"Website","text":"<p>To enable Kometa support on the site, open the Plex integration and you will find the Kometa triggers and color settings.</p> <p>Open the Plex channel picker and you will see a channel setting for <code>Collections</code>. Any errors will automatically be sent to the shared error channel.</p>"},{"location":"pages/integrations/plexmetamanager/#webhook-types","title":"Webhook Types","text":"<p>Info</p> <p>As of December 2022, this integration can send 5 webhooks. You can either activate them by ticking the on/off buttons or clicking on the gear icon where you can pic your notifications\u2019 colours as well.</p> <p></p> <ul> <li><code>Start/Complete</code>: Sends a notification every time Kometa runs and finishes its run.</li> <li><code>Updated</code>: Sends a notification whenever a collection changes, whether an item is added or removed. They can be sent at the same time as well. Notifiarr will show a maximum of 10 items and will sum up the rest according to their number.</li> <li><code>Created</code>: Sends a notification whenever a Kometa collection is created.</li> <li><code>Failure</code>: Sends a notification whenever there\u2019s an error inside your Kometa configs. For more information you would have to look at your Kometa logs. This notification is sent to the default notifiarr error channel.</li> <li><code>Deleted</code>: Sends a notification whenever a Kometa collection is removed.</li> <li><code>Updates</code>: Sends a notification whenever there's a new Kometa version available.</li> </ul>"},{"location":"pages/integrations/plexmetamanager/#client","title":"Client","text":"<p>The Notifiarr client on your local machine is not required for this integration to work. Kometa is webhook based.  It is highly recommended you add an API key specific to this integration since it is a 3rd party.</p>"},{"location":"pages/integrations/plexmetamanager/#kometa-configuration","title":"Kometa Configuration","text":""},{"location":"pages/integrations/plexmetamanager/#kometa-config-file","title":"Kometa Config File","text":"<p>In order to activate Notifiarr on Kometa, you need to edit the yml config file and add the following:</p> <pre><code>notifiarr:\n apikey: YOURKEY\n</code></pre> <p>Kometa is web-hook agnostic hence you need to instruct it where to send the webhooks. Inside the config file edit the following:</p> <pre><code>webhooks:\n  error: notifiarr\n  version: notifiarr\n  run_start: notifiarr\n  run_end: notifiarr\n  changes: notifiarr\n</code></pre> <p>It's always good to run a yml validator if you are not sure if your file will be a valid one. Then make sure to restart Kometa in order for new changes to take effect.</p>"},{"location":"pages/integrations/plexmetamanager/#misc","title":"Misc","text":"<p>If you would like Notifiarr to include your Collections\u2019 pictures and background, you can include <code>url_background</code> and/or <code>url_poster</code> inside your PMM library\u2019s yml file and notifiarr will grab them and include them within the notification, making them look nicer.</p>"},{"location":"pages/integrations/radarr/","title":"Radarr","text":"<p>Info</p> <p>This integration allows for notifications from Radarr using its built in Connection for Notifiarr. In Radarr click Settings \u2192 Connect \u2192 + \u2192 Notifiarr</p>"},{"location":"pages/integrations/radarr/#current-versions","title":"Current Versions","text":""},{"location":"pages/integrations/radarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/radarr/#triggers","title":"Triggers","text":"<ul> <li><code>Movie Added</code> - Receive a notification when media is added to Radarr</li> <li><code>Grab</code> - Receive a notification when media is initially grabbed (RSS or manual)</li> <li><code>Download</code> - Receive a notification when media new is successfully imported</li> <li><code>Upgrade</code> - Receive a notification when upgraded media is successfully imported</li> <li><code>Deleted</code> - Be notified when media is deleted</li> <li><code>Update</code> - Receive a notification when the application updates</li> <li><code>Backup</code> - Receive a notification when a backup occurs </li> <li><code>Corrupt</code> - Monitor backups for corruption and size loss</li> <li><code>Failed</code> - Custom notification type based on previous grabs. If the system detects a grab for the same media with the same quality or better before the previous one was imported then it will set the previous one as failed</li> <li><code>Health</code> - Receive a notification when the application reports an issue</li> </ul>"},{"location":"pages/integrations/radarr/#channel","title":"Channel","text":"<ul> <li>Radarr Channel picker for each trigger</li> </ul>"},{"location":"pages/integrations/radarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Radarr.</p> <p></p> <ol> <li>Basic instructions on how to add Notifiarr to Radarr</li> <li>If you have already setup the client and configured the connection you can use this too automatically add the connect</li> <li>all available triggers </li> <li>Trigger specific color selector in this example trigger <code>updates</code> uses the color black</li> <li>Use this to be notified if your database is corrupted</li> <li>Get notified of health status </li> <li>Set a daily overview of radarr and a set time of day</li> <li>Send notifications with selected ratings (considered 'adult') to another channel</li> <li>Use this too remove <code>forced</code> instances.</li> </ol>"},{"location":"pages/integrations/radarr/#notification-content","title":"Notification Content","text":"<ol> <li>Use the <code>customize</code> toggle too drop down all available notification fields in this example we use <code>movie added</code></li> <li>Select if you want too know how the movie was added</li> </ol>"},{"location":"pages/integrations/radarr/#examples","title":"Examples","text":"grabbed example update example"},{"location":"pages/integrations/radarr/#errors","title":"Errors","text":""},{"location":"pages/integrations/radarr/#400-bad-request","title":"400 Bad Request","text":"<p>Check and ensure you have a Grab or Download channel configured for Radarr</p>"},{"location":"pages/integrations/radarr/#401-unauthorized","title":"401 Unauthorized","text":"<p>Your APIKey is incorrect</p>"},{"location":"pages/integrations/readarr/","title":"Readarr","text":"<p>Info</p> <p>This integration allows for notifications from Readarr using its built in Connection for Notifiarr. In Readarr click Settings \u2192 Connect \u2192 + \u2192 Notifiarr</p>"},{"location":"pages/integrations/readarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/readarr/#triggers","title":"Triggers","text":"<ul> <li><code>Grab</code> - Receive a notification when media is initially grabbed (RSS or manual)</li> <li><code>Download</code> - Receive a notification when media new is successfully imported</li> <li><code>Update</code> - Receive a notification when the application updates</li> <li><code>Upgrade</code> - Receive a notification when upgraded media is successfully imported</li> <li><code>Health</code> - Receive a notification when the application reports an issue</li> <li><code>Backup</code> - Receive a notification when a backup occurs</li> <li><code>Corrupt</code> - Monitor backups for corruption and size loss</li> <li><code>Deleted</code> - Be notified when media is deleted</li> </ul>"},{"location":"pages/integrations/readarr/#channel","title":"Channel","text":"<ul> <li>Readarr shares the *arr channel unless Granular Setup is used, clicking the link on the site will move to the channel setup location.</li> </ul>"},{"location":"pages/integrations/readarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Readarr.</p>"},{"location":"pages/integrations/readarr/#instructions","title":"Instructions","text":"<ol> <li>How to enable notifications from within Readarr</li> <li>Automatically add the connect if the client is setup</li> </ol>"},{"location":"pages/integrations/readarr/#integration-instructions","title":"Integration Instructions","text":"<ol> <li>Use the <code>Customize</code> toggle too drop down</li> <li>Set the color of the notification</li> <li>All available <code>notification fields</code> in this case we used the <code>grab</code> trigger</li> </ol>"},{"location":"pages/integrations/readarr/#errors","title":"Errors","text":""},{"location":"pages/integrations/readarr/#400-bad-request","title":"400 Bad Request","text":"<p>Check and ensure you have a Grab or Download channel configured for Readarr</p>"},{"location":"pages/integrations/readarr/#401-unauthorized","title":"401 Unauthorized","text":"<p>Your APIKey is incorrect</p>"},{"location":"pages/integrations/reddit/","title":"Reddit","text":"<p>Info</p> <p>This integration allows for notifications from subreddits you choose to watch</p>"},{"location":"pages/integrations/reddit/#monitoring-overview","title":"Monitoring overview","text":"<p>This will list all subreddits you are monitoring.</p>"},{"location":"pages/integrations/reddit/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for the Reddit integration.</p> <p></p> <ol> <li><code>Select Channel</code> - Pick a channel for the subreddit notification to go to.</li> <li><code>Subreddit Config</code> - Either enter in the subreddit or custom domain. After which you can include or exclude key words using Regex.</li> <li><code>Add Reddit Monitoring</code> - Add the subreddit to your account to monitor.</li> <li><code>Update/Delete</code> - Save or remove the modified subreddit from being monitored.</li> </ol>"},{"location":"pages/integrations/releaseParser/","title":"Release Parser","text":"<p>Info</p> <p>This integration allows for users to parse a release name in the same method Radarr and Sonarr do to see how the name will be treated.</p>"},{"location":"pages/integrations/releaseParser/#trigger-options","title":"Trigger options","text":"<ul> <li>Select the channel to monitor for releases to be checked</li> </ul>"},{"location":"pages/integrations/releaseParser/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for the Release parser.</p>"},{"location":"pages/integrations/releaseParser/#instructions","title":"Instructions","text":"<ol> <li>basic instructions</li> <li>Pick the keywords that the bot will watch for</li> </ol>"},{"location":"pages/integrations/rssWatcher/","title":"RSS Watcher","text":""},{"location":"pages/integrations/rssWatcher/#integration-card","title":"Integration Card","text":"<p> 1. Configuration 2. Channel picker for the feeds</p>"},{"location":"pages/integrations/rssWatcher/#channel-picker","title":"Channel Picker","text":"<p> 1. List of channels <sup>Dropdown menu</sup> 2. Test bot channel permissions 3. Copy Channel to all</p>"},{"location":"pages/integrations/rssWatcher/#configuration","title":"Configuration","text":"<p> 1. Page to configure the RSS Watcher. 2. Custom Icon <sup>Subscriber Feature</sup> 3. Example screenshots of what you can expect the notification to look like. 4. List of preset RSS feeds you can toggle on to get notifications from 5. Name of custom feed 6. URL for the RSS feed you wanna add 7. regex filter of things to post</p>"},{"location":"pages/integrations/simonSays/","title":"Simon Says","text":"<p>documentation coming soon</p>"},{"location":"pages/integrations/snapshots/","title":"Snapshots","text":"<ol> <li>Reloads the integration.</li> <li>Opens the integrations settings.</li> <li>A list of locations which have the Notifiarr client installed.</li> <li>Opens up the Discord channel selection menu.</li> </ol>"},{"location":"pages/integrations/snapshots/#integration-settings-menu","title":"Integration Settings Menu","text":"<p>Click the cog icon to open the integration settings for the Snapshot integration.</p> <p></p> <ol> <li><code>Basic Instructions</code> - Gives you basic guidelines on how to setup this integration.</li> <li><code>Integration Settings</code> - Allows the user to further configure the integration.</li> <li><code>Extra Settings</code> - Adjust the extra settings for this integration.</li> <li><code>Client Settings</code> - Allows the user to set what should be reported in the snapshot and select which client to use</li> <li><code>Custom Icon</code> - Assign another icon to notifications from this integration. (Subscriber Feature)</li> <li><code>Screenshots</code> - Shows the expected output once all correctly configured.</li> <li><code>Save</code> - Saves all your Configured settings and closes the Integration Settings Menu.</li> </ol>"},{"location":"pages/integrations/snapshots/#integration-settings","title":"Integration Settings","text":"<p>Before all the configuration options are available you must \"Pick a client\" from the drop-down list. This will typically be the hostname you have for your locally installed Notifiarr client.</p> <p></p> <p>These are all the configurable options available to the user.</p> <p></p> <ol> <li><code>Pick a client</code> - Select the local Notifiarr client you wish to configure for alerting.</li> <li><code>Trigger</code> - What the Snapshot integration will alert on. The following Trigger options are available.</li> </ol> <p></p> <ol> <li><code>Comparator</code> - Allows the user to configure alerts using one of the following, =, &lt;=, &gt;=, contains OR does not contain.</li> <li><code>Value</code> - What value shall be used to trigger the alert.</li> <li><code>@mention</code> - Pick a user or role and Discord will ping you if there is an alert.</li> <li><code>Add or Delete</code> - Here you can delete any existing alerts you may have or you can add a new alert.</li> <li>Select this if you only want notifications when an alert is triggered. If left unchecked, you will receive continous notifications as specified in the interval selection time (e.g. every 30min). This is found under client settings and discussed below.</li> </ol>"},{"location":"pages/integrations/snapshots/#triggers-and-allowed-values","title":"Triggers and Allowed Values","text":"<p>The triggers used by the snapshot integration have the following allowed values.</p> <ol> <li><code>Raid</code> - Using the Comparator \"contains\" with a Value of \"_\" will alert of a failure.</li> <li><code>MegaCLI</code> - Using the Comparator \"contains\" with a Value of \"degraded\".</li> <li><code>Load</code> - Value can be a decimal or whole number.</li> <li><code>Users</code> - Value can be a whole Number.</li> <li><code>Drive Age (Days)</code> - Value can be a number in days.</li> <li><code>Drive Temp</code> - Value can be a decimal or whole number.</li> <li><code>Drive SMART</code> - Using the Comparator \"contains\" with a Value of either \"fail\" OR \"pass\"</li> <li><code>Storage (Free GB)</code> - Value can be a whole number or decimal followed by G for Gigabyte or T for Terabyte. e.g. 500G or 0.5T</li> <li><code>Quota (Free GB)</code> - Value can be a whole number or decimal followed by G for Gigabyte or T for Terabyte. e.g. 500G or 0.5T</li> <li><code>CPU Temp</code> - Value can be a decimal or whole number.</li> <li><code>CPU Load</code> - Value can be a decimal or whole number.</li> <li><code>RAM Load</code> - Value can be a decimal or whole number.</li> </ol>"},{"location":"pages/integrations/snapshots/#extra-settings","title":"Extra Settings","text":"<p>Allows the user to update existing messages and change between Fahrenheit and Celsius.</p> <p></p>"},{"location":"pages/integrations/snapshots/#client-settings","title":"Client Settings","text":"<p>Here are all the different settings for your client. These selections will determin what notifications will be monitored and reported on.</p> <p></p>"},{"location":"pages/integrations/snapshots/#custom-icon","title":"Custom Icon","text":"<p>If you are AWESOME and are one of our Sub's then you will see this option and can upload your own custom icon.</p> <p></p>"},{"location":"pages/integrations/sonarr/","title":"Sonarr","text":"<p>Info</p> <p>This integration allows for notifications from Sonarr using the connect for Webhooks. In Sonarr click Settings \u2192 Connect \u2192 + \u2192 Webhook.</p>"},{"location":"pages/integrations/sonarr/#current-versions","title":"Current Versions","text":""},{"location":"pages/integrations/sonarr/#trigger-options","title":"Trigger options","text":""},{"location":"pages/integrations/sonarr/#1-triggers","title":"1. Triggers","text":"<ul> <li><code>Grab</code> - Receive a notification when media is initially grabbed (RSS or manual)</li> <li><code>Download</code> - Receive a notification when media new is successfully imported</li> <li><code>Upgrade</code> - Receive a notification when upgraded media is successfully imported</li> <li><code>Deleted</code> - Be notified when media is deleted</li> <li><code>Update</code> - Receive a notification when the application updates</li> <li><code>Backup</code> - Receive a notification when a backup occurs </li> <li><code>Corrupt</code> - Monitor backups for corruption and size loss </li> <li><code>Failed</code> - Custom notification type based on previous grabs. If the system detects a grab for the same media with the same quality or better before the previous one was imported then it will set the previous one as failed</li> <li><code>Health</code> - Receive a notification when the application reports an issue</li> </ul>"},{"location":"pages/integrations/sonarr/#2-channels","title":"2. Channels","text":"<ul> <li>Sonarr channel picker for each trigger</li> </ul>"},{"location":"pages/integrations/sonarr/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for Sonarr.</p>"},{"location":"pages/integrations/sonarr/#instructions","title":"Instructions","text":"<ol> <li>In Sonarr navigate to Connect =&gt; Add New (Plus Button) =&gt; Webhook</li> <li>Enter the webhook URL in the URL field Enter a name for the Notification in Sonarr <code>Notifiarr</code> is suggested, but use what you like Enable the notification triggers you wish to have sent from Sonarr to the Notifiarr Site Hit test - you should receive a notification on discord with the test message from Sonarr Save</li> </ol>"},{"location":"pages/integrations/sonarr/#integration-instructions","title":"Integration instructions","text":"<ol> <li>Notification color selector</li> <li>all <code>notification fields</code> available under <code>grabbbed</code> trigger</li> <li>Notification for corrupted database</li> <li>Sends an overview once a day of your Sonarr history at your specified time</li> <li>Send notifications with selected ratings (considered 'adult') to another channel</li> <li>Options to remove <code>forced</code> from instances/indexer name</li> </ol>"},{"location":"pages/integrations/sonarr/#examples","title":"Examples","text":"grabbed example update example"},{"location":"pages/integrations/sonarr/#errors","title":"Errors","text":""},{"location":"pages/integrations/sonarr/#400-bad-request","title":"400 Bad Request","text":"<ul> <li>Check and ensure you have a Grab or Download channel configured for Sonarr (Test notifications try to use Grab, then Download to send, you can disable after the test if you want)</li> <li>Ensure the webhook URL is accurate</li> </ul>"},{"location":"pages/integrations/sonarr/#401-unauthorized","title":"401 Unauthorized","text":"<p>Your APIKey is incorrect</p>"},{"location":"pages/integrations/trash/","title":"TRaSH","text":"<p>TRaSH</p> <p>This integration allows you to setup and sync TRaSH guides with Radarr and Sonarr. Keep in mind this requires the Notifiarr client.</p> <p>patrons/subscribers</p> <p>Patron Feature - Acessible to Patrons and Subscribers only</p> <p>Warning</p> <p>Users switching from an existing Sonarr v3 instance to Sonarr v4 have additional steps that are required</p>"},{"location":"pages/integrations/trash/#client-setup","title":"Client Setup","text":"<ul> <li>TRaSH Integration requires the notifiarr client to be running locally, configured and working (i.e. communicating with) on the Notifiarr site, and the Starr Apps configured.</li> <li>Add Starr Apps to the Client in the <code>Starr Apps</code> Tab of the Local Client</li> <li>Note that <code>Time Out</code> for the Starr Apps cannot be set to <code>Disabled</code> for the app to be enabled</li> <li>Note that a <code>Name</code> value is required for the Starr Apps you wish to sync</li> </ul>"},{"location":"pages/integrations/trash/#integration-card","title":"Integration Card","text":"<ol> <li>Sync<ul> <li>The amount of CF's and scores you have in sync</li> </ul> </li> <li>Channel<ul> <li>Which channel to send TRaSH update notifications to (when TRaSH updates them, removes them, when you sync them or unsync them)</li> </ul> </li> </ol>"},{"location":"pages/integrations/trash/#integration-settings","title":"Integration Settings","text":"<p>Click the cog icon in the card header to open the configuration options for TRaSH.</p>"},{"location":"pages/integrations/trash/#client-settings","title":"Client Settings","text":""},{"location":"pages/integrations/trash/#interval-options","title":"Interval Options","text":"<ol> <li>This will sync your CF changes as soon as TRaSH pushes them (Subscriber feature)</li> <li>This will save the client settings</li> </ol>"},{"location":"pages/integrations/trash/#notification-triggers","title":"Notification Triggers","text":"<ol> <li>Radarr Notifications<ul> <li><code>Update</code>  When differences are detected and notifiarr syncs</li> <li><code>Score Update</code> When Score changes are detected and updated</li> <li><code>Quality Update</code> When Quality Definitions are updated</li> <li><code>Removed</code> When a CF is removed from the guide</li> </ul> </li> <li>Sonarr Notifications<ul> <li><code>Quality Update</code> When Quality Definitions are updated</li> </ul> </li> <li>Sonarr CF Notifications <sup>Requires V4</sup><ul> <li><code>Update</code>  When differences are detected and notifiarr syncs</li> <li><code>Score Update</code> When Score changes are detected and updated</li> <li><code>Removed</code> When a CF is removed from the guide</li> </ul> </li> <li>Sonarr RP Notifications <sup>Requires V3</sup><ul> <li><code>Update</code>  When differences are detected and notifiarr syncs</li> <li><code>Score Update</code> When Score changes are detected and updated</li> <li><code>Removed</code> When a CF is removed from the guide</li> </ul> </li> </ol>"},{"location":"pages/integrations/trash/#quality-definitions","title":"Quality Definitions","text":"<ol> <li>Quality Definition Options Radarr  Sonarr </li> <li>Sync toggles</li> <li>You can set all at once or each individually to keep synced</li> </ol>"},{"location":"pages/integrations/trash/#radarr-sync-v4-sonarr","title":"Radarr Sync <sup>&amp; V4 Sonarr</sup>","text":"<ol> <li>Sync TRaSH CF Names</li> <li><code>Names</code> This will sync the names of the TRaSH Custom format especially important for ones such as <code>AMZN</code> that includes the custom format in the renaming</li> <li><code>Condition Names</code> This will sync the condition names in the custom format to match TRaSH Condition Names</li> <li>Auto close results dialog will close the pop up showing the progress and results of the syncing</li> <li>Clicking one of the CFs in this table will send you down to the Custom Format settings of the one you clicked which is explained in the next section</li> </ol>"},{"location":"pages/integrations/trash/#custom-formats-v4-sonarr","title":"Custom Formats <sup>&amp; V4 Sonarr</sup>","text":"<ol> <li>This will toggle on all custom formats in all your Radarr instances <sup>Be very careful with this option</sup></li> <li>This will toggle on all scores to be synced in all your Radarr instances</li> <li>This will save all your settings and initiate a client sync</li> </ol> <ol> <li>This will open the CF on the TRaSH guides site</li> <li>This will save or delete the CF from all your instances right away</li> <li>These toggles will enable the Custom Format</li> <li>These toggles will turn on syncing the scores from TRaSH in your Quality Profile</li> </ol>"},{"location":"pages/integrations/trash/#flowcharts-for-help","title":"Flowcharts for help","text":"<p> 1. Opens the flowchart selector 2. Flowcharts <sup>SQP Flowchart should not be selected without joining the SQP Trash Discord Channel</sup></p> <p></p>"},{"location":"pages/integrations/trash/#default-flowchart","title":"Default Flowchart","text":"<ol> <li>Clicking the Yellow scare will open the Custom Formats list for these matching conditions</li> <li>List of the Custom Formats for the condition you selected</li> <li>Choose which profiles for which instance you want to apply this to</li> <li>Clicking the button will enable them for the specified Instance, to save and initiate sync you can refer to Custom Formats</li> </ol>"},{"location":"pages/integrations/trash/#radarr-scores-v4-sonarr","title":"Radarr Scores <sup>&amp; V4 Sonarr</sup>","text":"<ol> <li> <p>Quality Profile Selection <sup>Dropdown menu</sup></p> </li> <li> <p>If you toggle off one of the profiles it won't show in the scores list </p> </li> <li> <p>CF Name and the instance it is in</p> </li> <li>The Quality Profile you are syncing the score to</li> <li>You can input a multiplier here to subtract or add a percentage to the synced TRaSH score</li> <li>Such as multiplier of 0.8 would reduce it by 20%</li> <li>The current score of the CF in the Quality Profile</li> <li>Tick the checkbox if you wish to manually edit the score directly and disable sync</li> <li>This is  the current TRaSH Guide score for this CF</li> <li>This checkbox will enable score sync for all Custom Formats in the list</li> <li>You can also tick each checkbox individually and choose which you want to be synced to which profile</li> </ol>"},{"location":"pages/integrations/trash/#naming-conventions","title":"Naming Conventions","text":"<ol> <li>Movie folder naming</li> <li>Pick to use a variation of naming that TRaSH recommends</li> <li>Movie file naming</li> <li>Pick to use a variation of naming that TRaSH recommends</li> </ol>"},{"location":"pages/integrations/trash/#radarr-delete-v4-sonarr","title":"Radarr Delete <sup>&amp; V4 Sonarr</sup>","text":"<ol> <li>Instance the CF is in</li> <li>The Custom Format name</li> <li>Shows whether the CF is synced or not and the ID for it</li> <li>This checkbox will mark all CFs for deletion</li> <li>You can also mark them individually for deletion</li> <li>Actions</li> <li><code>Fix Map</code> This will re-enable disabled CFs and Scores that exist in radarr so the sync can add them back or re-map them</li> <li><code>Delete CFs</code> This will delete the marked CFs and let the sync put them back as needed</li> <li><code>Delete CFs &amp; Map</code> Delete the marked CFs and the map so they will no longer sync</li> <li><code>Delete Map</code> Delete the site map for the radarr instance and start over <sup>Disables Sync</sup></li> </ol>"},{"location":"pages/integrations/trash/#sonarr-delete-v3","title":"Sonarr Delete <sup>V3</sup>","text":"<ol> <li>Instance the RP is in</li> <li>The Release Profile name</li> <li>Shows whether the RP is synced or not</li> <li>This checkbox will mark all RPs for deletion</li> <li>You can also mark them individually for deletion</li> <li>Actions</li> <li><code>Delete RPs</code> This will delete the marked RPs so they can sync again</li> <li><code>Delete Map</code> Delete the sync map for sonarr instances and start over <sup>Disables Sync</sup></li> </ol>"},{"location":"pages/integrations/trash/#sonarr-sync-v3","title":"Sonarr Sync <sup>V3</sup>","text":"<ol> <li>This will sync the Release Profile names with TRaSH Guides</li> <li>This toggle will enable the Release Profile sync to the selected instance</li> <li>This toggle will enable keeping the TRaSH guide scores in sync on this RP</li> <li>These will toggle the settings you wanna sync to the Optionals RP</li> <li>Tick the checkboxes of the options you want and then enable the Profile and Score sync</li> </ol>"},{"location":"pages/integrations/trash/#sonarr-v3-to-v4-migration","title":"Sonarr v3 to v4 Migration","text":"<ul> <li>Users with an existing v3 instance they upgraded to v4 have some manual migration steps required.</li> <li>Open the TRaSH Guides integration on Notifiarr</li> <li>on the left in the Sonarr group click the Delete link in the <code>RP &lt;= v3.*</code> section.</li> <li>In the popup click the Delete Map button and clear the maps.</li> <li>(Optional) As Sonarr v4 does a less than optimal job of migrating Preferred Words to Custom Formats, you can use Notifiarr to bulk delete. Click the Delete link in the <code>CF &gt;= 4.*</code> You can then mass delete all the migrated CFs to start fresh. Then you can configure Notifiarr to sync the Custom Formats you want to use.</li> </ul> <p>Sonarr v4</p> <p>For Sonarr v4 specific (non-Notifiarr Sonarr related) support questions, visit Sonarr's discord, forums, or subreddit.</p>"},{"location":"pages/integrations/unpackerr/","title":"Unpackerr","text":"<p>Info</p> <p>This integration provides Unpackerr notifications and reactions.</p> <p>You may choose to have either a reaction placed on existing Starr notifications, or receive a stand alone message for Unpackerr notifications, or both. Selecting the Reactions box enables or disables the Reaction emoji. </p> <p>As a premium feature you may elect to have Unpackerr notifications automatically add Custom Formats to your Starr apps. These custom formats downgrade the priority on the release group that gave you a packed download. That means in time your Starr apps will choose to download fewer and fewer packed items.</p>"},{"location":"pages/integrations/unpackerr/#reaction-example","title":"Reaction example","text":""},{"location":"pages/integrations/unpackerr/#notifiation-example","title":"Notifiation Example","text":""},{"location":"pages/integrations/websitestatus/","title":"Website Status","text":"<p>Info</p> <p>This integration allows for notifications based on website status.</p>"},{"location":"pages/integrations/websitestatus/#trigger-options","title":"Trigger options","text":"<ol> <li>Toggle on/off for each website being monitored</li> <li>List of websites being monitored (Click the information icon for some simple stats)</li> <li>Uptime percentage since monitoring started</li> <li>Channel to post notifications to</li> </ol>"},{"location":"pages/integrations/websitestatus/#configuration","title":"Configuration","text":"<p>Click the cog icon to open the configuration options for website monitoring.</p> <p></p> <ol> <li>Colors for notifications based on status</li> <li>Select pre-defined indexters to monitor</li> <li>Update the selected indexer</li> <li>toggle active state on/off</li> <li>URL of the desired website</li> <li>Delete toggle \"browser popup to confirm action\"</li> <li>reset all integration settings</li> </ol>"},{"location":"pages/quickstart/quickStart/","title":"Quick Start","text":""},{"location":"pages/quickstart/quickStart/#quick-start","title":"Quick Start","text":"<p>Almost everything needed is available in different parts of the wiki. This will point to each one to get you up and running.</p>"},{"location":"pages/quickstart/quickStart/#assumptions","title":"Assumptions","text":"<ul> <li>You already have an account setup on notifiarr.com with a valid apikey to use in the client but if you dont, stop here and go make one.</li> <li>You have setup the notifiarr client if you plan to use it. To know if you will need it or not you can view the faq for information on if it is required</li> </ul>"},{"location":"pages/quickstart/quickStart/#client-connection","title":"Client Connection","text":"<p>Once the client is setup locally and you can see it internally (example: <code>localhost:5454</code>) and externally (example: <code>http://&lt;your-external-ip&gt;:5454</code> or <code>https://notifiarr.&lt;your-domain&gt;.com</code>).</p>"},{"location":"pages/quickstart/quickStart/#integrations","title":"Integrations","text":"<p>First thing, turn on a couple that you want to use (or all of them at once that you want to use if you want but less is more while learning). Once you have them turned on the page will reload and you'll see a card for each one. If you cant figure out how to turn things on etc, each integration has a wiki page for it (well most do). Click the <code>Wiki</code> link in the integration card to get more information about that specific one.</p>"},{"location":"pages/translations/contribute/","title":"Contribute","text":""},{"location":"pages/translations/contribute/#translations","title":"Translations","text":"<p>Notifiarr Translations are handled on the Notifiarr Weblate</p> <p>If you wish to translate Notifiarr you'll need to: 1. Sign In to Weblate. 1. Notify Notifiarr Staff on Discord so your role can be applied</p> <p>Notifiarr Translations only impact Notifications and not the site itself.</p>"},{"location":"pages/website/clientConfig/","title":"Client config","text":""},{"location":"pages/website/clientConfig/#clients-setup","title":"Clients Setup","text":"<p>The client is used to do all local communication between the site and your system. This allows all urls, apikeys, etc to stay local and requires apikey validation between the site and the client before any actions can be taken.</p> <p>You may run more than 1 client, and it is recommended if you have more than 1 system to monitor.</p> <p>Depending on your layout (Grid or List) you will see:</p> <p> </p> <p>When you open the client settings you will see:</p> <p></p> <ol> <li>Client list: Each client you have configured will show up as a tab so its settings can be modified</li> <li>This section is information about the local client and its host environment</li> <li>This is the automatically configured <code>Tunnel URL</code> to the client so the site can communicate with the locally installed client </li> <li>This is the connection status, if it isn't green then the site can not reach the client. See Errors below.</li> <li>Use this client for timers that are not part of a specific integration (non client integrated timers, daily overview posts for example)</li> <li> <p>Client triggers: If the URL is provided, you can trigger the client to run any of these actions by clicking the cloud icon</p> </li> <li> <p>Save button: Once done, click this and it will update all your settings. If a URL is provided it will trigger the client to fetch the new settings right then. If no URL is provided then you can restart the client manually to pull the changed settings or wait 5 minutes for the client poller to request any changed settings and update</p> </li> <li>If you have a duplicate client showup (change the user, hostname changed, etc) you can merge the new client with the old one so all the settings copy over and the old one is removed</li> <li>If you no longer have the client installed on a specific hostname, you can remove it</li> </ol>"},{"location":"pages/website/clientConfig/#commands","title":"Commands","text":"<p>Subscribers Only</p> <p>This is a subscriber feature, you can add them in the client and run them from the client without being a subscriber but no automation will be available from the site.</p>"},{"location":"pages/website/clientConfig/#client","title":"Client","text":"<p>First thing is to add a command in the local client. Commands are basically custom scripts you want to trigger. Read below to understand how they work and then add them to the client.</p> <p></p> <ol> <li>Open the Commands section in the local client UI</li> <li>Name of the command</li> </ol> <p>Click the (?) icons for more information on each box</p>"},{"location":"pages/website/clientConfig/#website","title":"Website","text":"<p>At the bottom of the client configuration is a <code>Commands</code> section</p> <p></p> <ol> <li>Click the <code>+</code> to expand the command settings</li> </ol> <p></p> <ol> <li>This table will allow running any client configured commands by clicking the cloud icon</li> <li>This will allow adding commands to be automatically triggered based on options (image and info below)</li> <li>This table is a list of automated commands</li> </ol> <p></p> <ol> <li>Pick which command (must be added to the client already) to configure automation for</li> <li>What type of command</li> <li>Auto triggered This has options such as a network notification that Plex is down, it can auto trigger a command to run (example below)</li> <li>Keyword This is a discord keyword such as <code>!plexRestart</code> to trigger the command to run</li> <li>Timer This will run commands on a schedule</li> <li>Which channel(s) can the keyword be used in</li> <li>Which role(s) can use the keyword to trigger the command</li> </ol>"},{"location":"pages/website/clientConfig/#command-example","title":"Command Example","text":"<p>The network integration is enabled and Plex is being monitored so when Plex goes down a notification is sent to Discord. With that in mind we want Plex to automatically restart its self at that point so a command is used.</p> <p>plexRestart.ps1</p> <pre><code>taskkill /IM \"Plex Media Server.exe\" /F\nStart-Process -FilePath \"C:\\Program Files (x86)\\Plex\\Plex Media Server\\Plex Media Server.exe\"\n</code></pre> <p>This script is on the computer and the command to run <code>plexRestart.ps1</code> is added in the client. With that done, we can now set it up to trigger this command when the network notification comes in that it is down. As seen above there is also a keyword configured with <code>!plexRestart</code> so if we want to restart it on demand (maybe it is slow or acting up) we can do that as well.</p>"},{"location":"pages/website/clientConfig/#errors","title":"Errors","text":"<ul> <li>If the icon does not turn green, you can see the error and details in the Console via the Browser's DevTools (F12 in most browsers). Some common issues are listed below. </li> <li>App in the client is taking too long to respond causing timeouts. Disable all apps and re-enable 1x1 to identify the culprit</li> </ul>"},{"location":"pages/website/clientConfig/#duplicate-clients","title":"Duplicate Clients","text":"<ul> <li>This typically occurs in Docker or *BSD when a hostname is not configured everytime the container is restarted.</li> <li>For other installations this would occur if the unique attributes of your host system and installation change.</li> </ul>"},{"location":"pages/website/clientConfig/#resolving-duplicate-clients","title":"Resolving Duplicate Clients","text":"<ol> <li>Configure/Set a hostname for the client if applicable or resolve the changing attributes</li> <li>Restart the client</li> <li>On the Website in Client Configuration, Delete all client entries between the first and last client</li> <li>On the Website in Client Configuration, Merge the remaining two client entries</li> </ol>"},{"location":"pages/website/integrationsSetup/","title":"Integrations setup","text":""},{"location":"pages/website/integrationsSetup/#main-setup","title":"Main Setup","text":"<ol> <li>Open the integrations page</li> <li>Click the cog wheel (Card view). All available integrations have to be enabled before they can be used.</li> </ol> <ol> <li>Once you open the <code>Integration Configuration</code> you only need to toggle on/off what you want to use.</li> </ol>"},{"location":"pages/website/integrationsSetup/#reactions-setup","title":"Reactions Setup","text":"<ul> <li>You can use any emoji you prefer for reactions, however, if you would like to use the existing set of emoji provided by Notifiarr, visit https://notifiarr.com/user.php?page=setup&amp;grab=reactions and save the .zip file.</li> <li>After extracting the contents of the zip file, you can choose which emoji you would like to use by uploading them to your Discord server.<ul> <li>For instructions on uploading emoji to your server, please visit this article from Discord: https://support.discord.com/hc/en-us/articles/360036479811-Custom-Emojis</li> </ul> </li> <li>Once you've uploaded the emoji you want to use, you will need to find the emoji's ID for your server.  To do this:<ol> <li>Go to any channel on your server and type <code>\\:emoji_name:</code> (replace <code>emoji_name</code> with the actual name/alias you are using for the emoji when you uploaded it to your server) then press Enter.</li> </ol> </li> <li>You will see a message in your chat that looks like <code>&lt;:emoji_name:1069872535814496896&gt;</code>. In this example, <code>emoji_name</code> represents the name/alias of the emoji, and the string of numbers after the colon is the emoji ID.</li> <li>Copy this value, without the brackets or leading colon (in this example, you would copy <code>emoji_name:1069872535814496896</code>) and paste the results in the Discord settings field that corresponds to the reaction you are using the emoji for.</li> </ul>"},{"location":"pages/website/integrationsSetup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pages/website/integrationsSetup/#discord-server-missing-from-dropdown","title":"Discord Server Missing from Dropdown","text":"<ul> <li>This should only be an issue if you linked your Discord account to Notifiarr before creating the server.</li> <li>If you created the server after you already authorized your account, give it 5 minutes and re-authorize so it re-fetches the server list.</li> </ul>"},{"location":"pages/website/mediaRequests/","title":"Media requests","text":""},{"location":"pages/website/mediaRequests/#history","title":"History","text":"<ol> <li>History tab will show you all your request history from the bot</li> <li>Radarr collections (<code>Subscriber</code> feature, details below)</li> <li>Total requests per *arr app</li> <li>Details about each request made</li> <li>Action buttons for things that are pending if approval is used (This can also be done with the bot)</li> </ol>"},{"location":"pages/website/mediaRequests/#collections-monitoring-gaps","title":"Collections Monitoring (Gaps)","text":"<ol> <li>Turn monitoring on/off per instance</li> <li>Sync happens automatically every 12 hours, refresh icon will do an instant sync</li> <li>Filter the table of collections</li> </ol> <ol> <li>Manual checkbox, something you are going to add now</li> <li>Monitor checkbox, something you want to automatically have monitored so when new movies are added to the collection, they are automatically added to your library</li> <li>Exclude checkbox, something you do not want to monitor during automation</li> <li>TMDb collection name and link to the collection</li> <li>List of movies in the collection and if you have them or not</li> <li>Percentage of the collection that is completed</li> <li>A check before the movie means the movie is in Radarr's list exclusion and will not be added even if automatically monitoing the collection</li> <li>Manual settings if you want to add missing movies from collections now</li> <li>Monitor settings for how automation will be handled</li> </ol>"},{"location":"pages/website/metrics/","title":"Metrics","text":"<ol> <li>The top 5 users based on total notifications sent</li> <li>The top 5 users per integration based on the total notifications sent for that integration</li> </ol>"},{"location":"pages/website/notificationHistory/","title":"Notification history","text":"<ol> <li>Statistics for all your messages that log history in the last 30 days</li> <li>All of your notification history details that log in the last 30 days</li> <li>External links &amp; you can use this icon to blacklist a series from Sonarr notifications</li> </ol>"},{"location":"pages/website/transcodeHistory/","title":"Transcode history","text":""},{"location":"pages/website/transcodeHistory/#transcode-history","title":"Transcode History","text":"<p>Transcode History is a history of all Plex Streams Notifiarr recieved from your Plex Server.</p> <p>It is required that you have a Notifiarr Profile retention of 1 or more days to see this data. This information is gathered from the following Notifiarr Plex Notifications: - Play - Resume - Session</p>"},{"location":"pages/website/transcodeHistory/#graphs","title":"Graphs","text":"<ol> <li>The amount of transcodes overall in the last 30 days</li> <li>Video transcodes</li> <li>Audio Transcodes</li> <li>Transcode by device</li> </ol>"},{"location":"pages/website/transcodeHistory/#details","title":"Details","text":"<p>This is a detailed table of each transcode. It will show what was transcoded (audio, video or both), the user and device.</p>"},{"location":"pages/website/translations/","title":"Translations","text":""},{"location":"pages/website/translations/#translations","title":"Translations","text":"<p>Notifiarr Translations are handled on the Notifiarr Weblate</p> <p>If you wish to translate Notifiarr you'll need to: 1. Sign In to Weblate. 1. Notify Notifiarr Staff on Discord so your role can be applied</p> <p>Notifiarr Translations only impact Notifications and not the site itself.</p>"},{"location":"pages/website/trending/","title":"Trending","text":"<ol> <li>Most grabbed among all users with Sonarr enabled in the last 30 days</li> <li> <p>Most grabbed among all users with Radarr enabled in the last 30 days</p> </li> <li> <p>Same idea if you scroll down for those with Plex enabled</p> </li> </ol> <p></p> <ol> <li>Add this as a list to *arr with a Steven Lu list</li> </ol>"}]}